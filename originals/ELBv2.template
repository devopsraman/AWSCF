{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Rackspace Hosting - Elastic Load Balancer v2 (Application Load Balancer) template.",
  "Metadata": {
    "Version": "1.0.0",
    "Comments": "Generated by Ansible",
    "AWS::CloudFormation::Interface": {
      "ParameterLabels": {
        "CIDRRange": { "default" : "What should VPC CIDR Range be?" }
        },
      "ParameterGroups": [
        {
          "Label": { "default" : "Application Load Balancer General Configuration." },
          "Parameters": [
            "LoadBalancerName", "Scheme", "Environment",
            "VpcId", "Subnets", "SecurityGroups",
            "ELBTimeOut"
          ]
        },
        {
          "Label": { "default": "Target Group Main Configuration." },
          "Parameters": [
            "TargetGroupType", "TargetGroupName", "TargetGroupMatcherCode"
          ]
        },
        {
          "Label": { "default": "Target Group General Configuration." },
            "Parameters": [
              "TargetGroupPort", "TargetGroupProtocol", "TargetGroupCookieDuration",
              "TargetGroupAttributeDelayTimeout", "TargetGroupAttributeStickinessEnabled"
          ]
        },
        {
          "Label" : { "default": "Target Group Health Monitoring Configuration." },
          "Parameters" : [
            "TargetGroupUnhealthyThresholdCount", "TargetGroupHealthyThresholdCount", "TargetGroupHealthCheckTimeoutSeconds",
            "TargetGroupHealthCheckProtocol", "TargetGroupHealthCheckPort",
            "TargetGroupHealthCheckPath", "TargetGroupHealthCheckIntervalSeconds"
          ]
        },
        {
          "Label": { "default": "Target Group NON ASG Configuration (OPTIONAL)" },
          "Parameters": [
            "TargetGroupTargetId1", "TargetGroupTargetPort1", "TargetGroupTargetId2",
            "TargetGroupTargetPort2"
          ]
        },
        {
          "Label": { "default": "Listener Configurations." },
          "Parameters": [
            "ListenerCount"
          ]
        },
        {
          "Label": { "default": " Listener 1:" },
          "Parameters": [
            "Listener1Port", "Listener1SSL",
            "Listener1Protocol", "Listener1SSLPolicy"
          ]
        },
        {
          "Label": { "default": " Listener 2 (OPTIONAL):" },
          "Parameters": [
            "Listener2Port", "Listener2SSL",
            "Listener2Protocol", "Listener2SSLPolicy"
          ]
        },
        {
          "Label": { "default": " Listener 1 Rule Configuration:" },
          "Parameters": [
            "Listener1RuleConditionValuesList", "Listener1RulePriority"
          ]
        },
        {
          "Label": { "default": " Listener 2 Rule Configuration (OPTIONAL):" },
          "Parameters": [
            "Listener2RuleConditionValuesList", "Listener2RulePriority"
          ]
        },
        {
          "Label": { "default": "S3 Logging Configuration (OPTIONAL)." },
          "Parameters": [
            "CreateLoggingBucket", "ELBS3BucketName", "ELBS3BucketPrefix",
            "ELBS3LogDeletionProtection", "ELBLogAccessControl"
          ]
        }
      ],
      "ParameterLabels": {
        "ELBS3BucketName": { "default": "S3 bucket name" },
        "CreateLoggingBucket": { "default": "New S3 logging bucket"},
        "ELBS3LogDeletionProtection": { "default": "S3 log protection" },
        "ELBS3BucketPrefix": { "default": "S3 bucket prefix"},
        "ELBLogAccessControl": { "default": "S3 log access control" },
        "LoadBalancerName": { "default": "Load balancer name" },
        "VpcId": { "default": "VPC id" },
        "SecurityGroups": { "default": "Security groups" },
        "ELBTimeOut": { "default": "Load balancer timeout" },
        "TargetGroupType": { "default": "Target group type" },
        "TargetGroupName": { "default": "Target group name" },
        "TargetGroupMatcherCode": { "default": "Target group match code" },
        "TargetGroupPort": { "default": "Target group port" },
        "TargetGroupProtocol": { "default": "Target group protocol" },
        "TargetGroupCookieDuration": { "default": "Cookie duration" },
        "TargetGroupAttributeDelayTimeout": { "default": "Delay timeout" },
        "TargetGroupAttributeStickinessEnabled": { "default": "Stickiness enabled" },
        "TargetGroupUnhealthyThresholdCount": { "default": "Unhealthy threshold count" },
        "TargetGroupHealthyThresholdCount": { "default": "Healthy threshold count" },
        "TargetGroupHealthCheckTimeoutSeconds": { "default": "Health check timeout" },
        "TargetGroupHealthCheckProtocol": { "default": "Health check protocol" },
        "TargetGroupHealthCheckPort": { "default": "Health check port" },
        "TargetGroupHealthCheckPath": { "default": "Health check path" },
        "TargetGroupHealthCheckIntervalSeconds": { "default": "Health check interval" },
        "TargetGroupTargetId1": { "default": "Instance target 1" },
        "TargetGroupTargetPort1": { "default": "Instance target 1 port" },
        "TargetGroupTargetId2": { "default": "Instance target 2" },
        "TargetGroupTargetPort2": { "default": "Instance target 2 port" },
        "ListenerCount": { "default": "Number of listeners" },
        "EnableSSLonListener1": { "default": "Enable SSL on listener 1" },
        "Listener1Port": { "default": "Listener 1 port" },
        "Listener1SSL": { "default": "Listener 1 SSL Certificate ARN" },
        "Listener1Protocol": { "default": "Listener 1 protocol" },
        "Listener1SSLPolicy": { "default": "Listener 1 SSL policy" },
        "EnableSSLonListener2": { "default": "Enable SSL on listener 2" },
        "Listener2Port": { "default": "Listener 2 port" },
        "Listener2SSL": { "default": "Listener 2 SSL Certificate ARN" },
        "Listener2Protocol": { "default": "Listener 2 protocol" },
        "Listener2SSLPolicy": { "default": "Listener 2 SSL policy" },
        "Listener1RuleConditionValuesList": { "default": "Listener 1 conditions" },
        "Listener1RulePriority": { "default": "Listener 1 priority" },
        "Listener2RuleConditionValuesList": { "default": "Listener 2 conditions" },
        "Listener2RulePriority": { "default": "Listener 2 priority" }
      }
    }
  },
  "Parameters": {
    "CreateLoggingBucket": {
      "Description": "Create a new S3 logging bucket",
      "Type": "String",
      "Default": "false",
      "AllowedValues": ["true", "false"]
    },
    "ELBLogAccessControl": {
      "Description": "Define ACL for Bucket",
      "Type": "String",
      "Default": "BucketOwnerFullControl",
      "AllowedValues": [  "AuthenticatedRead", "AwsExecRead", "BucketOwnerRead", "BucketOwnerFullControl", "LogDeliveryWrite", "Private", "PublicRead", "PublicReadWrite" ],
      "ConstraintDescription": "Must be either AuthenticatedRead, AwsExecRead, BucketOwnerRead, BucketOwnerFullControl, LogDeliveryWrite, Private, PublicRead or PublicReadWrite."
    },
    "VpcId": {
      "Description": "The VPC in which your targets are located.",
      "Type": "AWS::EC2::VPC::Id"
    },
    "TargetGroupUnhealthyThresholdCount": {
      "Description": "The number of consecutive failed health checks that are required before a target is considered unhealthy.",
      "Type": "Number",
      "Default": "2",
      "MinValue": "2",
      "MaxValue": "10"
    },
    "TargetGroupHealthyThresholdCount": {
      "Description": "The number of consecutive successful health checks that are required before an unhealthy target is considered healthy.",
      "Type": "Number",
      "Default": "5",
      "MinValue": "2",
      "MaxValue": "10"
    },
    "TargetGroupHealthCheckTimeoutSeconds": {
      "Description": "The number of seconds to wait for a response before considering that a health check has failed.",
      "Type": "Number",
      "Default": "5",
      "MinValue": "2",
      "MaxValue": "60"
    },
    "TargetGroupHealthCheckProtocol": {
      "Description": "The protocol that the load balancer uses when performing health checks on the targets, such as HTTP or HTTPS.",
      "Type": "String",
      "Default": "HTTP",
      "AllowedValues": [ "HTTP", "HTTPS" ]
    },
    "TargetGroupProtocol": {
      "Description": "The protocol to use for routing traffic to the targets.",
      "Type": "String",
      "Default": "HTTP",
      "AllowedValues": [ "HTTP", "HTTPS" ]
    },
    "TargetGroupHealthCheckPort": {
      "Description": "",
      "Type": "String",
      "Default": "traffic-port"
    },
    "TargetGroupHealthCheckPath": {
      "Description": "The ping path destination where Elastic Load Balancing sends health check requests.",
      "Type": "String",
      "Default": "/",
      "MaxLength": "1024"
    },
    "TargetGroupHealthCheckIntervalSeconds": {
      "Description": "The approximate number of seconds between health checks for an individual target.",
      "Type": "Number",
      "Default": "30",
      "MinValue": "5",
      "MaxValue": "300"
    },
    "TargetGroupPort": {
      "Description": "The port on which the targets receive traffic.",
      "Type": "Number",
      "Default": "80",
      "MinValue": "1",
      "MaxValue": "65535"
    },
    "TargetGroupName": {
      "Description": "A name for the target group.",
      "Type": "String",
      "Default": "ALB-TargetGroup"
    },
    "TargetGroupMatcherCode": {
      "Description": "The HTTP codes. The default value is 200.",
      "Type": "String",
      "Default": "200-299"
    },
    "TargetGroupTargetId1": {
      "Description": "The ID of the target, such as an EC2 instance ID.",
      "Type": "String",
      "Default": ""
    },
    "TargetGroupTargetPort1": {
      "Description": "The port number on which the target is listening for traffic.",
      "Type": "Number",
      "Default": "80",
      "MinValue": "1",
      "MaxValue": "65535"
    },
    "TargetGroupTargetId2": {
      "Description": "The ID of the target, such as an EC2 instance ID.",
      "Type": "String",
      "Default": ""
    },
    "TargetGroupTargetPort2": {
      "Description": "The port number on which the target is listening for traffic.",
      "Type": "Number",
      "Default": "80",
      "MinValue": "1",
      "MaxValue": "65535"
    },
    "TargetGroupType": {
      "Description": "The type of target (ASG or Instance).",
      "Type": "String",
      "Default": "ASG",
      "AllowedValues": [ "ASG", "Instance" ]
    },
    "TargetGroupAttributeDelayTimeout": {
      "Description": "The amount time for Elastic Load Balancing to wait before changing the state of a deregistering target from draining to unused.",
      "Type": "Number",
      "Default": "300",
      "MinValue": "0",
      "MaxValue": "3600"
    },
    "TargetGroupAttributeStickinessEnabled": {
      "Description": "Indicates whether sticky sessions are enabled.",
      "Type": "String",
      "Default": "true",
      "AllowedValues": ["true", "false"],
      "ConstraintDescription": "Value must be either lowercase true or false."
    },
    "TargetGroupCookieDuration": {
      "Description": "The time period, in seconds, during which requests from a client should be routed to the same target.",
      "Type": "Number",
      "Default": "86400",
      "MinValue": "1",
      "MaxValue": "604800"
    },
    "LoadBalancerName": {
      "Description": "A name for the load balancer, which must be unique within your AWS account.",
      "Type": "String",
      "Default": "ALB-LoadBalancer-Name"
    },
    "Scheme": {
      "Description": "Indicates whether the load balancer is Internet-facing or internal.",
      "Type": "String",
      "Default": "internet-facing",
      "AllowedValues": ["internet-facing", "internal"]
    },
    "SecurityGroups": {
      "Description": "A list of the IDs of the security groups to assign to the load balancer.",
      "Type": "List<AWS::EC2::SecurityGroup::Id>"
    },
    "Subnets": {
      "Description": "A list of at least two IDs of the subnets to associate with the load balancer.",
      "Type": "List<AWS::EC2::Subnet::Id>"
    },
    "Environment": {
      "Description": "Application environment for which this network is being created. e.g. Development/Production.",
      "Type": "String",
      "Default": "Development",
      "AllowedValues": ["Development", "Integration", "PreProduction", "Production", "Staging", "Test"]
    },
    "ListenerCount": {
      "Description": "The number of Listeners for this Load Balancer.",
      "Type": "Number",
      "AllowedValues": [1, 2],
      "Default": "1"
    },
    "Listener1SSL": {
      "Description": "The Amazon Resource Name (ARN) of the certificate(s) to associate with listener 1 (Optional).",
      "Type": "String",
      "Default": ""
    },
    "Listener2SSL": {
      "Description": "The Amazon Resource Name (ARN) of the certificate(s) to associate with listener 3 (Optional).",
      "Type": "String",
      "Default": ""
    },
    "Listener1Port": {
      "Description": "The port on which the listener listens for requests.",
      "Type": "Number",
      "Default": "80"
    },
    "Listener2Port": {
      "Description": "The port on which the listener listens for requests.",
      "Type": "Number",
      "Default": "0"
    },
    "Listener1Protocol": {
      "Description": "The protocol that clients must use to send requests to the listener.",
      "Type": "String",
      "Default": "HTTP",
      "AllowedValues": ["HTTP", "HTTPS"]
    },
    "Listener2Protocol": {
      "Description": "The protocol that clients must use to send requests to the listener.",
      "Type": "String",
      "Default": "HTTP",
      "AllowedValues": ["HTTP", "HTTPS"]
    },
    "Listener1SSLPolicy": {
      "Description": "The security policy that defines which ciphers and protocols are supported. The default is the current predefined security policy. More information: http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-security-policy-options.html.",
      "Type": "String",
      "Default": ""
    },
    "Listener2SSLPolicy": {
      "Description": "The security policy that defines which ciphers and protocols are supported. The default is the current predefined security policy. More information: http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-security-policy-options.html.",
      "Type": "String",
      "Default": ""
    },
    "Listener1RuleConditionValuesList": {
      "Description": "The value for the field that you specified in the Field property.",
      "Type": "CommaDelimitedList",
      "Default": "*"
    },
    "Listener2RuleConditionValuesList": {
      "Description": "The value for the field that you specified in the Field property.",
      "Type": "CommaDelimitedList",
      "Default": "*"
    },
    "Listener1RulePriority": {
      "Description": "The priority for the rule. Elastic Load Balancing evaluates rules in priority order, from the lowest value to the highest value.",
      "Type": "Number",
      "Default": "1",
      "MinValue": "1",
      "MaxValue": "99999"
    },
    "Listener2RulePriority": {
      "Description": "The priority for the rule. Elastic Load Balancing evaluates rules in priority order, from the lowest value to the highest value.",
      "Type": "Number",
      "Default": "1",
      "MinValue": "1",
      "MaxValue": "99999"
    },
    "ELBS3BucketName": {
      "Description": "The name of the S3 bucket for the access logs.",
      "Type": "String",
      "Default": ""
    },
    "ELBS3BucketPrefix": {
      "Description": "The prefix for the location in the S3 bucket. If you don't specify a prefix, the access logs are stored in the root of the bucket.",
      "Type": "String",
      "Default": ""
    },
    "ELBS3LogDeletionProtection": {
      "Description": "Indicates whether deletion protection is enabled.",
      "Type": "String",
      "Default": "false",
      "AllowedValues": ["true", "false"],
      "ConstraintDescription": "Value must be either lowercase true or false."
    },
    "ELBTimeOut": {
      "Description": "The idle timeout value, in seconds. The valid range is 1-3600. The default is 60 seconds.",
      "Type": "Number",
      "Default": "60",
      "MinValue": "1",
      "MaxValue": "3600"
    }
  },
  "Conditions": {
    "OneListener": { "Fn::Equals": [ { "Ref": "ListenerCount" }, "1" ]},
    "TwoListener": { "Fn::Equals": [ { "Ref": "ListenerCount" }, "2" ]},
    "Listener1Certs": { "Fn::Not": [ { "Fn::Equals": [ { "Ref": "Listener1SSL" }, "" ]}]},
    "Listener2Certs": { "Fn::Not": [ { "Fn::Equals": [ { "Ref": "Listener1SSL" }, "" ]}]},
    "SSLPolicy1": { "Fn::Not": [ { "Fn::Equals": [ { "Ref": "Listener1SSLPolicy" }, "" ]}]},
    "SSLPolicy2": { "Fn::Not": [ { "Fn::Equals": [ { "Ref": "Listener2SSLPolicy" }, "" ]}]},
    "TargetTypeisASG": { "Fn::Equals": [ { "Ref": "TargetGroupType" }, "ASG" ]},
    "TargetTypeisInstance": { "Fn::Equals": [ { "Ref": "TargetGroupType" }, "Instance" ]},
    "TwoInstanceTargets": { "Fn::Not": [ { "Fn::Equals": [ { "Ref": "TargetGroupTargetId2"}, "" ]}]},
    "S3LogsEnabled": { "Fn::Not": [ { "Fn::Equals": [ { "Ref": "ELBS3BucketName"}, "" ]}]},
    "NewS3Bucket": { "Fn::Equals": [ { "Ref": "CreateLoggingBucket" }, "true" ]}
  },
  "Resources": {
    "ELBv2": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "LoadBalancerAttributes": {
          "Fn::If": [
            "S3LogsEnabled",
            [
              {
                "Key": "access_logs.s3.enabled",
                "Value": "true"
              },
              {
                "Key": "access_logs.s3.bucket",
                "Value": { "Ref": "ELBS3BucketName" }
              },
              {
                "Key": "access_logs.s3.prefix",
                "Value": { "Ref": "ELBS3BucketPrefix" }
              },
              {
                "Key": "deletion_protection.enabled",
                "Value": { "Ref": "ELBS3LogDeletionProtection" }
              },
              {
                "Key": "idle_timeout.timeout_seconds",
                "Value": { "Ref": "ELBTimeOut" }
              }
            ],
            [
              {
                "Key": "idle_timeout.timeout_seconds",
                "Value": { "Ref": "ELBTimeOut" }
              }
            ]
          ]
        },
        "Name": { "Ref": "LoadBalancerName" },
        "Scheme": { "Ref": "Scheme" },
        "SecurityGroups": { "Ref": "SecurityGroups" },
        "Subnets": { "Ref": "Subnets" },
        "Tags": [
          { "Key": "ServiceProvider", "Value": "Rackspace" },
          { "Key": "Environment", "Value": { "Ref": "Environment"} },
          { "Key": "Name", "Value": { "Fn::Join": ["", [{ "Ref": "AWS::StackName" }, "ELBv2"]] } }
        ]
      }
    },
    "ELBv2Listener1": {
      "Condition": "OneListener",
        "Type": "AWS::ElasticLoadBalancingV2::Listener",
        "Properties": {
          "Certificates": [
            {
              "Fn::If": [ "Listener1Certs",
              { "CertificateArn": { "Ref": "Listener1SSL" } },
              { "Ref": "AWS::NoValue" }
              ]
            }
          ],
          "DefaultActions": {
            "Fn::If": [
              "TargetTypeisInstance",
              [
                {
                  "Type": "forward",
                  "TargetGroupArn": { "Ref": "ELBv2TargetGroupInstance" }
                }
              ],
              [
                {
                  "Type": "forward",
                  "TargetGroupArn": { "Ref": "ELBv2TargetGroupASG" }
                }
              ]
            ]
          },
          "LoadBalancerArn": { "Ref": "ELBv2" },
          "Port": { "Ref": "Listener1Port" },
          "Protocol": { "Ref": "Listener1Protocol" },
          "SslPolicy": { "Fn::If": [
            "SSLPolicy1",
            { "Ref": "Listener1SSLPolicy" },
            { "Ref": "AWS::NoValue" }
          ]
        }
      }
    },
    "ELBv2Listener2": {
      "Condition": "TwoListener",
        "Type": "AWS::ElasticLoadBalancingV2::Listener",
        "Properties": {
          "Certificates": [
            {
              "Fn::If": [ "Listener2Certs",
              { "CertificateArn": { "Ref": "Listener2SSL" } },
              { "Ref": "AWS::NoValue" }
              ]
            }
          ],
          "DefaultActions": {
            "Fn::If": [
              "TargetTypeisInstance",
              [
                {
                  "Type": "forward",
                  "TargetGroupArn": { "Ref": "ELBv2TargetGroupInstance" }
                }
              ],
              [
                {
                  "Type": "forward",
                  "TargetGroupArn": { "Ref": "ELBv2TargetGroupASG" }
                }
              ]
            ]
          },
          "LoadBalancerArn": { "Ref": "ELBv2" },
          "Port": { "Ref": "Listener2Port" },
          "Protocol": { "Ref": "Listener2Protocol" },
          "SslPolicy": { "Fn::If": [
            "SSLPolicy2",
            { "Ref": "Listener2SSLPolicy" },
            { "Ref": "AWS::NoValue" }
          ]
        }
      }
    },
    "ELBv2Listener1Rule": {
      "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
      "Properties": {
        "Actions": {
          "Fn::If": [
            "TargetTypeisInstance",
            [
              {
                "Type": "forward",
                "TargetGroupArn": { "Ref": "ELBv2TargetGroupInstance" }
              }
            ],
            [
              {
                "Type": "forward",
                "TargetGroupArn": { "Ref": "ELBv2TargetGroupASG" }
              }
            ]
          ]
        },
        "Conditions": [
          {
            "Field": "path-pattern",
            "Values": { "Ref": "Listener1RuleConditionValuesList" }
          }
        ],
        "ListenerArn": { "Ref": "ELBv2Listener1" },
        "Priority": { "Ref": "Listener1RulePriority" }
      }
    },
    "ELBv2Listener2Rule": {
      "Condition": "TwoListener",
      "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
      "Properties": {
        "Actions": {
          "Fn::If": [
            "TargetTypeisInstance",
            [
              {
                "Type": "forward",
                "TargetGroupArn": { "Ref": "ELBv2TargetGroupInstance" }
              }
            ],
            [
              {
                "Type": "forward",
                "TargetGroupArn": { "Ref": "ELBv2TargetGroupASG" }
              }
            ]
          ]
        },
        "Conditions":
        [
          {
            "Field": "path-pattern",
            "Values": { "Ref": "Listener1RuleConditionValuesList" }
          }
        ],
        "ListenerArn": { "Ref": "ELBv2Listener2" },
        "Priority": { "Ref": "Listener2RulePriority" }
      }
    },
    "ELBv2TargetGroupInstance": {
      "Condition": "TargetTypeisInstance",
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "HealthCheckIntervalSeconds": { "Ref": "TargetGroupHealthCheckIntervalSeconds" },
        "HealthCheckPath": { "Ref": "TargetGroupHealthCheckPath" },
        "HealthCheckPort": { "Ref": "TargetGroupHealthCheckPort" },
        "HealthCheckProtocol": { "Ref": "TargetGroupHealthCheckProtocol" },
        "HealthCheckTimeoutSeconds": { "Ref": "TargetGroupHealthCheckTimeoutSeconds" },
        "HealthyThresholdCount": { "Ref": "TargetGroupHealthyThresholdCount" },
        "Matcher": { "HttpCode": { "Ref": "TargetGroupMatcherCode" } },
        "Name": { "Ref": "TargetGroupName" },
        "Port": { "Ref": "TargetGroupPort" },
        "Protocol": { "Ref": "TargetGroupProtocol" },
        "Tags": [
          { "Key": "ServiceProvider", "Value": "Rackspace" },
          { "Key": "Environment", "Value": { "Ref": "Environment"} },
          { "Key": "Name", "Value": { "Fn::Join": ["", [{ "Ref": "AWS::StackName" }, "TargetGroup"]] } }
        ],
        "TargetGroupAttributes" : [
          {
            "Key": "deregistration_delay.timeout_seconds",
            "Value": { "Ref": "TargetGroupAttributeDelayTimeout" }
          },
          {
            "Key": "stickiness.enabled",
            "Value": { "Ref": "TargetGroupAttributeStickinessEnabled" }
          },
          {
            "Key": "stickiness.type",
            "Value": "lb_cookie"
          },
          {
            "Key": "stickiness.lb_cookie.duration_seconds",
            "Value": { "Ref": "TargetGroupCookieDuration" }
          }
        ],
        "Targets": {
          "Fn::If": [
            "TwoInstanceTargets",
            [
              {
                "Id": { "Ref": "TargetGroupTargetId1" },
                "Port": { "Ref": "TargetGroupTargetPort1" }
              },
              {
                "Id": { "Ref": "TargetGroupTargetId2" },
                "Port": { "Ref": "TargetGroupTargetPort2" }
              }
            ],
            [
              {
                "Id": { "Ref": "TargetGroupTargetId1" },
                "Port": { "Ref": "TargetGroupTargetPort1" }
              }
            ]
          ]
        },
        "UnhealthyThresholdCount": { "Ref": "TargetGroupUnhealthyThresholdCount" },
        "VpcId": { "Ref": "VpcId" }
      }
    },
    "ELBv2TargetGroupASG": {
      "Condition": "TargetTypeisASG",
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "HealthCheckIntervalSeconds": { "Ref": "TargetGroupHealthCheckIntervalSeconds" },
        "HealthCheckPath": { "Ref": "TargetGroupHealthCheckPath" },
        "HealthCheckPort": { "Ref": "TargetGroupHealthCheckPort" },
        "HealthCheckProtocol": { "Ref": "TargetGroupHealthCheckProtocol" },
        "HealthCheckTimeoutSeconds": { "Ref": "TargetGroupHealthCheckTimeoutSeconds" },
        "HealthyThresholdCount": { "Ref": "TargetGroupHealthyThresholdCount" },
        "Matcher": { "HttpCode": { "Ref": "TargetGroupMatcherCode" } },
        "Name": { "Ref": "TargetGroupName" },
        "Port": { "Ref": "TargetGroupPort" },
        "Protocol": { "Ref": "TargetGroupProtocol" },
        "Tags": [
          { "Key": "ServiceProvider", "Value": "Rackspace" },
          { "Key": "Environment", "Value": { "Ref": "Environment"} },
          { "Key": "Name", "Value": { "Fn::Join": ["", [{ "Ref": "AWS::StackName" }, "TargetGroup"]] } }
        ],
        "TargetGroupAttributes": [
          {
            "Key": "deregistration_delay.timeout_seconds",
            "Value": { "Ref": "TargetGroupAttributeDelayTimeout" }
          },
          {
            "Key": "stickiness.enabled",
            "Value": { "Ref": "TargetGroupAttributeStickinessEnabled" }
          },
          {
            "Key": "stickiness.type",
            "Value": "lb_cookie"
          },
          {
            "Key": "stickiness.lb_cookie.duration_seconds",
            "Value": { "Ref": "TargetGroupCookieDuration" }
          }
        ],
        "UnhealthyThresholdCount": { "Ref": "TargetGroupUnhealthyThresholdCount" },
        "VpcId": { "Ref": "VpcId" }
      }
    },
    "S3BucketwithLogging": {
      "Type": "AWS::S3::Bucket",
      "Condition": "NewS3Bucket",
        "Properties": {
          "BucketName": { "Ref": "ELBS3BucketName" },
          "AccessControl": { "Ref": "ELBLogAccessControl" },
          "Tags": [
            { "Key": "Name", "Value": { "Ref": "AWS::StackName" } },
            { "Key": "ServiceProvider", "Value": "Rackspace"},
            { "Key": "Environment", "Value": { "Ref": "Environment"} }
          ]
      }
    },
    "ELBS3LoggingBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Condition": "S3LogsEnabled",
      "Properties": {
        "Bucket": { "Ref": "ELBS3BucketName" },
        "PolicyDocument": {
          "Version": "2008-10-17",
          "Statement": [ {
            "Sid": "ELBAccessLogs20130930",
            "Effect": "Allow",
            "Resource": { "Fn::Join": ["", ["arn:aws:s3:::", { "Ref": "ELBS3BucketName" }, "/*"]]},
            "Principal": "*",
            "Action": [
              "s3:PutObject"
            ]
          }]
        }
      }
    }
  },
  "Outputs": {
    "outputELBv2TargetGroupASG": {
      "Description": "Target group ARN for ASG deployments.",
      "Value": { "Ref": "ELBv2TargetGroupASG" }, "Condition": "TargetTypeisASG"
    },
    "outputELBv2TargetGroupInstance": {
      "Description": "Target group ARN for EC2 Instance deployments.",
      "Value": { "Ref": "ELBv2TargetGroupInstance" }, "Condition": "TargetTypeisInstance"
    },
    "outputELBv2": {
      "Description": "Application load balancer ID.",
      "Value": { "Ref": "ELBv2" }
    },
    "outputELBv2Listener1": {
      "Description": "Application load balancer listener 1.",
      "Value": { "Ref": "ELBv2Listener1" }
    },
    "outputELBv2Listener2": {
      "Description": "Application load balancer listener 2.",
      "Value": { "Ref": "ELBv2Listener2" }, "Condition": "TwoListener"
    },
    "outputELBv2Listener1Rule": {
      "Description": "Application load balancer listener rule 1.",
      "Value": { "Ref": "ELBv2Listener1Rule" }
    },
    "outputELBv2Listener2Rule": {
      "Description": "Application load balancer listener rule 1.",
      "Value": { "Ref": "ELBv2Listener2Rule" }, "Condition": "TwoListener"
    }
  }
}

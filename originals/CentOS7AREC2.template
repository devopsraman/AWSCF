{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Rackspace Hosting - AutoRecovery EC2 Instance. **WARNING** You will be billed for the AWS resources used if you create a stack from this template.",
  "Metadata": {
    "Version": "v1.1",
    "Comments": "Generated by Ansible",
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
      {
        "Label": { "default": "Network Configuration" },
        "Parameters": ["VPCID", "AppSubnet", "ELBSubnet"]
      },
      {
        "Label": { "default": "ELB Configuration" },
        "Parameters": [ "ELBCreation", "ELBInstancePort", "ELBInstanceProtocol", "ELBLoadBalancerPort", "ELBLoadBalancerProtocol", "ELBSecondaryListener", "ELB2ndInstancePort", "ELB2ndInstanceProtocol", "ELB2ndLoadBalancerPort", "ELB2ndLoadBalancerProtocol", "ELBHealthTarget", "ELBHealthyThreshold",
                        "ELBUnHealthyThreshold", "ELBHealthInterval", "ELBHealthTimeout", "ELBScheme", "ELBCookieExpirationPeriod"]
      },
      {
        "Label": { "default": "ELB SSL Configuration" },
        "Parameters": ["SSLIdCert"]
      },
      {
        "Label": { "default": "EC2 Instances Configuration" },
        "Parameters": ["InstancesPublicIP", "ARInstanceName", "Environment", "DetailedMonitoring", "EBSOptimized", "InstanceType", "EbsVolumeSize", "Iops", "EbsVolumeType", "EncryptEBSVolume", "CreationPolicyTimeOut"]
      },
      {
        "Label": { "default": "CloudWatch ELB Alarm Configuration" },
        "Parameters": ["ELBLatency"]
      }]
    }
  },
  "Parameters": {
    "ImageId": {
      "Type": "String",
      "Default": "",
      "Description": "The image ID to be used to build the EC2 Instance. OPTIONAL"
    },
    "InstanceType": {
      "Type": "String",
      "Default": "t2.micro",
      "AllowedValues": [ "t2.micro", "t2.small", "t2.medium", "t2.large", "m3.medium", "m4.large", "m4.xlarge",
        "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge",
        "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge",
        "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge" ],
      "ConstraintDescription": "Must be a valid EC2 instance type. Default is t2.micro",
      "Description": "Select instance type"
    },
    "VPCID": {
      "Type": "AWS::EC2::VPC::Id",
      "Description": "Select Virtual Private Cloud ID"
    },
    "AppSubnet": {
      "Type": "AWS::EC2::Subnet::Id",
      "Description": "Subnets for Application"
    },
    "EbsVolumeType": {
      "Description": "Select EBS Volume Type.",
      "Type": "String",
      "Default": "gp2",
      "AllowedValues": ["io1", "standard", "gp2"]
    },
    "EbsVolumeSize": {
      "Description": "Select EBS Volume Size in GB.",
      "Type": "String",
      "Default": "60"
    },
    "Iops": {
      "Description": "Iops value required for use with io1 EBS volumes. This value should be 3 times the EBS volume size",
      "Type": "Number",
      "Default": "0"
    },
    "ELBCreation": {
      "Type": "String",
      "Default": "True",
      "AllowedValues": ["False", "True"],
      "Description": "Specifies whether to create an ELB or not as part of this deployment."
    },
    "ELBLogBucketName": {
      "Type": "String",
      "Description": "The name of the bucket to use for ELB logs. Must be unique.",
      "Default": "",
      "ConstraintDescription": "The bucket name must contain only lowercase letters, numbers, periods (.), and dashes (-)."
    },
    "ELBLogAccessControl": {
      "Description": "Define ACL for Bucket",
      "Type": "String",
      "Default": "BucketOwnerFullControl",
      "AllowedValues": [  "AuthenticatedRead", "AwsExecRead", "BucketOwnerRead", "BucketOwnerFullControl", "LogDeliveryWrite", "Private", "PublicRead", "PublicReadWrite" ],
      "ConstraintDescription": "Must be either AuthenticatedRead, AwsExecRead, BucketOwnerRead, BucketOwnerFullControl, LogDeliveryWrite, Private, PublicRead or PublicReadWrite."
    },
    "ELBConnectionDrainingTimeout": {
      "Type": "Number",
      "Default": "0",
      "Description": "Set the timeout value for elastic loadbalancer draining policy if desired. OPTIONAL"
    },
    "ELBScheme": {
      "Type": "String",
      "Default": "internet-facing",
      "AllowedValues": ["internet-facing", "internal"],
      "Description": "Specifies whether to create an internal ELB or a public facing one."
    },
    "ELBSubnet": {
      "Type": "List<AWS::EC2::Subnet::Id>",
      "Description": "Subnets for Elastic Loadbalancer ** REQUIRED even if ELBCreation is False **"
    },
    "ELBInstancePort": {
      "Type": "String",
      "Default": "80",
      "AllowedPattern": "([0-9]+)",
      "ConstraintDescription": "Must be a valid integer.",
      "Description": "Specifies the TCP port on which the instance server is listening."
    },
    "ELBInstanceProtocol": {
      "Type": "String",
      "Default": "HTTP",
      "AllowedValues": ["HTTP", "HTTPS", "TCP", "SSL"],
      "Description": "Specifies the protocol to use for routing traffic to back-end instances HTTP / HTTPS / TCP / SSL."
    },
    "ELBLoadBalancerProtocol": {
      "Type": "String",
      "Default": "HTTP",
      "AllowedValues": ["HTTP", "HTTPS", "TCP", "SSL"],
      "Description": "Specifies the protocol to use for the Load Balancer HTTP / HTTPS / TCP / SSL."
    },
    "ELBLoadBalancerPort": {
      "Type": "String",
      "Default": "80",
      "AllowedPattern": "([0-9]+)",
      "ConstraintDescription": "Must be a valid integer.",
      "Description": "Specifies the external load balancer port number."
    },
    "ELBSecondaryListener": {
      "Type": "String",
      "Default": "False",
      "AllowedValues": ["True", "False"],
      "Description": "Enable Secondary Listener on the Load Balancer"
    },
    "ELB2ndLoadBalancerPort": {
      "Type": "String",
      "Default": "443",
      "AllowedPattern": "([0-9]+)",
      "ConstraintDescription": "Must be a valid integer.",
      "Description": "Specifies the 2nd external load balancer port number."
    },
    "ELB2ndLoadBalancerProtocol": {
      "Type": "String",
      "Default": "HTTPS",
      "AllowedValues": ["HTTP", "HTTPS", "TCP", "SSL"],
      "Description": "Specifies the 2nd protocol to use for the Load Balancer HTTP / HTTPS / TCP / SSL."
    },
    "ELB2ndInstancePort": {
      "Type": "String",
      "Default": "443",
      "AllowedPattern": "([0-9]+)",
      "ConstraintDescription": "Must be a valid integer.",
      "Description": "Specifies the 2nd TCP port on which the instance server is listening."
    },
    "ELB2ndInstanceProtocol": {
      "Type": "String",
      "Default": "HTTPS",
      "AllowedValues": ["HTTP", "HTTPS", "TCP", "SSL"],
      "Description": "Specifies the 2nd protocol to use for routing traffic to back-end instances HTTP / HTTPS / TCP / SSL."
    },
    "ELBHealthTarget": {
      "Type": "String",
      "Default": "TCP:80",
      "Description": "Protocol & port check on instance. TCP:5000 | SSL:5000 || HTTP(S) = HTTP:80/path/to/my/file."
    },
    "ELBHealthyThreshold": {
      "Type": "String",
      "Default": "3",
      "AllowedPattern": "([0-9]+)",
      "ConstraintDescription": "Must be a valid integer.",
      "Description": "Consecutive successful checks before marking instance healthy."
    },
    "ELBUnHealthyThreshold": {
      "Type": "String",
      "Default": "5",
      "AllowedPattern": "([0-9]+)",
      "ConstraintDescription": "Must be a valid integer.",
      "Description": "Consecutive failed checks before marking instance unhealthy."
    },
    "ELBHealthInterval": {
      "Type": "String",
      "Default": "30",
      "AllowedPattern": "([0-9]+)",
      "ConstraintDescription": "Must be a valid integer.",
      "Description": "Seconds between health checks."
    },
    "ELBHealthTimeout": {
      "Type": "String",
      "Default": "5",
      "AllowedPattern": "([0-9]+)",
      "Description": "Number of seconds during which no response means a failed health probe.",
      "ConstraintDescription": "Must be a valid integer."
    },
    "ELBCookieExpirationPeriod": {
      "Type": "String",
      "Default": "",
      "Description": "Generates a stickiness policy with sticky session lifetimes controlled by a specified expiration period. Leave blank not to use."
    },
    "DetailedMonitoring": {
      "Description": "Enable Detailed Monitoring.",
      "Type": "String",
      "Default": "True",
      "AllowedValues": ["False", "True"]
    },
    "EIP": {
      "Type": "String",
      "Default": "False",
      "AllowedValues": ["False", "True"],
      "Description": "Specifies whether to launch instance with EIP address in your VPC."
    },
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances.",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription": "Must be the name of an existing EC2 KeyPair."
    },
    "ARInstanceName": {
      "Description": "EC2 Server Instance Name",
      "Type": "String",
      "ConstraintDescription": "Must follow normal syntax conventions."
    },
    "EBSOptimized": {
      "Description": "Use EBS Optimized.",
      "Type": "String",
      "Default": "False",
      "AllowedValues": ["False", "True"]
    },
    "Environment": {
      "Description": "Application environment for which this network is being created. e.g. Development/Production.",
      "Type": "String",
      "Default": "Development",
      "AllowedValues": ["Development", "Integration", "PreProduction", "Production", "Staging", "Test"]
    },
    "SSLIdCert": {
      "Description": "SSL Certificate Name. Full ARN required.",
      "Type": "String",
      "Default": "0",
      "ConstraintDescription": "Must be an existing SSL Name."
    },
    "NotificationEmail": {
      "Description": "EMail address for notifications operations. OPTIONAL",
      "Type": "String",
      "Default": "noemail@email.com",
      "AllowedPattern": "([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)",
      "ConstraintDescription": "Must be a valid email address."
    },
    "CreationPolicyTimeOut": {
      "Description": "Time to wait for the number of signals for the creation policy. H/M/S Hours/Minutes/Seconds",
      "Type": "String",
      "Default": "20M",
      "ConstraintDescription": "#H#M#S where each # is the number of hours or minutes or seconds"
    },
    "CwCpuHighOperator": {
      "Description": "Math operator used by CloudWatch for alarms and triggers.",
      "Type": "String",
      "Default": "GreaterThanThreshold",
      "AllowedValues": ["GreaterThanOrEqualToThreshold", "GreaterThanThreshold", "LessThanThreshold", "LessThanOrEqualToThreshold"]
    },
    "CwCpuHighPeriod": {
      "Description": "Time the specified statistic is applied. Must be in seconds that is also a multiple of 60.",
      "Type": "String",
      "Default": "300",
      "AllowedPattern": "([0-9]+)",
      "ConstraintDescription": "Must be a valid integer."
    },
    "CwCpuHighEvaluations": {
      "Description": "The number of periods over which data is compared to the specified threshold.",
      "Type": "String",
      "Default": "2",
      "AllowedPattern": "([0-9]+)",
      "ConstraintDescription": "Must be a valid integer."
    },
    "CwCpuHighThreshold": {
      "Description": "The value against which the specified statistic is compared.",
      "Type": "String",
      "Default": "90",
      "AllowedPattern": "([0-9]+)",
      "ConstraintDescription": "Must be a valid integer."
    },
    "CwCpuLowOperator": {
      "Description": "Math operator used by CloudWatch for alarms and triggers.",
      "Type": "String",
      "Default": "LessThanThreshold",
      "AllowedValues": ["GreaterThanOrEqualToThreshold", "GreaterThanThreshold", "LessThanThreshold", "LessThanOrEqualToThreshold"]
    },
    "CwCpuLowPeriod": {
      "Description": "Time the specified statistic is applied. Must be in seconds that is also a multiple of 60.",
      "Type": "String",
      "Default": "300",
      "AllowedPattern": "([0-9]+)",
      "ConstraintDescription": "Must be a valid integer."
    },
    "CwCpuLowEvaluations": {
      "Description": "The number of periods over which data is compared to the specified threshold.",
      "Type": "String",
      "Default": "2",
      "AllowedPattern": "([0-9]+)",
      "ConstraintDescription": "Must be a valid integer."
    },
    "CwCpuLowThreshold": {
      "Description": "The value against which the specified statistic is compared.",
      "Type": "String",
      "Default": "50",
      "AllowedPattern": "([0-9]+)",
      "ConstraintDescription": "Must be a valid integer."
    },
    "ARInstanceSecurityGroupList": {
      "Description": "A list that contains the EC2 security groups to assign to the Amazon EC2 instance",
      "Type": "List<AWS::EC2::SecurityGroup::Id>"
    },
    "ELBSecurityGroupList": {
      "Description": "A list of security groups assigned to your load balancer within your virtual private cloud (VPC).",
      "Type": "List<AWS::EC2::SecurityGroup::Id>"
    },
    "ELBLatency": {
      "Description": "ELB Latency threshold used by CloudWatch for ELBLatency alarm",
      "Type": "String",
      "Default": "5",
      "AllowedPattern": "([0-9]+)",
      "ConstraintDescription": "Must be a valid integer."
    }
  },
  "Mappings": {
    "AWSRegionArch2AMI": {
      "us-west-1" : {"64": "ami-af4333cf"},
      "us-east-1" : {"64": "ami-6d1c2007"},
      "ap-northeast-1" : {"64": "ami-eec1c380"},
      "sa-east-1" : {"64": "ami-26b93b4a"},
      "ap-northeast-2" : {"64": "ami-c74789a9"},
      "ap-southeast-1" : {"64": "ami-f068a193"},
      "ap-southeast-2" : {"64": "ami-fedafc9d"},
      "us-west-2" : {"64": "ami-d2c924b2"},
      "ap-south-1" : {"64": "ami-95cda6fa"},
      "eu-central-1" : {"64": "ami-9bf712f4"},
      "eu-west-1" : {"64": "ami-7abd0209"}
    }
  },
  "Conditions": {
    "IopsEnabled": { "Fn::Equals": [{ "Ref": "EbsVolumeType" }, "io1"] },
    "SSLEnabled": {"Fn::Or": [
      {"Fn::Equals": [{"Ref": "ELBLoadBalancerProtocol"}, "SSL"]},
      {"Fn::Equals": [{"Ref": "ELBLoadBalancerProtocol"}, "HTTPS"]}]
    },
    "SSL2ndEnabled": {"Fn::Or": [
      {"Fn::Equals": [{"Ref": "ELB2ndLoadBalancerProtocol"}, "SSL"]},
      {"Fn::Equals": [{"Ref": "ELB2ndLoadBalancerProtocol"}, "HTTPS"]}]
    },
    "ELBEnabled": { "Fn::Equals": [{ "Ref": "ELBCreation" }, "True"] },
    "isELB2ndListener": {"Fn::Equals": [{"Ref": "ELBSecondaryListener"}, "True"]},
    "DetailedMonitoring": { "Fn::Equals": [ { "Ref": "DetailedMonitoring" }, "True" ] },
    "ELBCookieStickinessPolicy": { "Fn::Not": [{"Fn::Equals": [{"Ref": "ELBCookieExpirationPeriod"}, ""]}] },
    "isImageId": { "Fn::Not": [ { "Fn::Equals": [ { "Ref": "ImageId" }, "" ] } ] },
    "isELBLogging": { "Fn::Not": [ { "Fn::Equals": [ { "Ref": "ELBLogBucketName" }, "" ] } ] },
    "isELBConnectionDrain": { "Fn::Not": [ { "Fn::Equals": [ { "Ref": "ELBConnectionDrainingTimeout" }, "0" ] } ] },
    "isNotification": { "Fn::Not": [ { "Fn::Equals": [ { "Ref": "NotificationEmail" }, "noemail@email.com" ] } ] },
    "isEIP": { "Fn::Equals": [ { "Ref": "EIP" }, "True" ] }
  },
  "Resources": {
    "NotificationTopic": {
      "Type": "AWS::SNS::Topic",
      "Condition": "isNotification",
      "Properties": {
        "Subscription": [ { "Endpoint": { "Ref": "NotificationEmail" }, "Protocol": "email" } ]
      }
    },
    "S3BucketwithLogging": {
      "Type": "AWS::S3::Bucket",
      "Condition": "isELBLogging",
        "Properties": {
          "BucketName": { "Ref": "ELBLogBucketName" },
          "AccessControl": { "Ref": "ELBLogAccessControl" },
          "Tags": [
            { "Key": "Name", "Value": { "Ref": "AWS::StackName" } },
            { "Key": "ServiceProvider", "Value": "Rackspace"},
            { "Key": "Environment", "Value": { "Ref": "Environment"} }
          ]
      }
    },
    "ELBS3LoggingBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Condition": "isELBLogging",
      "Properties": {
        "Bucket": { "Ref": "ELBLogBucketName" },
        "PolicyDocument": {
          "Version": "2008-10-17",
          "Statement": [ {
            "Sid": "ELBAccessLogs20130930",
            "Effect": "Allow",
            "Resource": { "Fn::Join": ["", ["arn:aws:s3:::", { "Ref": "ELBLogBucketName" }, "/*"]]},
            "Principal": "*",
            "Action": [
              "s3:PutObject"
            ]
          }]
        }
      }
    },
    "CloudFormationLogs": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "RetentionInDays": 30
      }
    },
    "EIPAR": {
      "Type": "AWS::EC2::EIP",
      "Condition": "isEIP",
      "Properties": {
        "InstanceId": { "Ref": "ARInstance" } ,
        "Domain": "vpc"
      }
    },
    "ARInstance": {
      "Type": "AWS::EC2::Instance",
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": {"Fn::Join": [ "", ["PT", { "Ref": "CreationPolicyTimeOut" }]]},
          "Count": 1
        }
      },
      "Properties": {
        "KeyName": { "Ref": "KeyName" },
        "ImageId": {
          "Fn::If": [
            "isImageId",
            { "Ref": "ImageId" },
            { "Fn::FindInMap": [ "AWSRegionArch2AMI", { "Ref": "AWS::Region" }, "64" ] }
          ]
         },
        "SecurityGroupIds": { "Ref": "ARInstanceSecurityGroupList" },
        "SubnetId": { "Ref": "AppSubnet" },
        "IamInstanceProfile": { "Ref": "InstanceRoleInstanceProfile" },
        "Monitoring": { "Ref": "DetailedMonitoring"},
        "InstanceType": { "Ref": "InstanceType" },
        "Tags": [
          { "Key": "ServiceProvider", "Value": "Rackspace" },
          { "Key": "Environment", "Value": { "Ref": "Environment"} },
          { "Key": "Name", "Value": { "Fn::Join": ["", [{ "Ref": "AWS::StackName" }, "-", { "Ref": "ARInstanceName" }]] } }
        ],
        "BlockDeviceMappings": [ {
          "DeviceName": "/dev/sda1",
          "Ebs": {
            "VolumeType": { "Ref": "EbsVolumeType" },
            "Iops": { "Fn::If": [ "IopsEnabled", { "Ref": "Iops" }, { "Ref": "AWS::NoValue" } ] },
            "DeleteOnTermination": "True",
            "VolumeSize": { "Ref": "EbsVolumeSize" }
          }
        }],
        "UserData": { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -xe\n",
          "yum update -y systemd\n",
          "mkdir -p /opt/aws/bin\n",
          "cd /opt/aws\n",
          "curl https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm -o /tmp/epel-release-latest-7.noarch.rpm\n",
          "yum install -y /tmp/epel-release-latest-7.noarch.rpm\n",
          "yum install -y python-pip\n",
          "pip install awscli pystache argparse python-daemon requests\n",
          "curl https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz -o /opt/aws/aws-cfn-bootstrap-latest.tar.gz\n",
          "tar -xvpf aws-cfn-bootstrap-latest.tar.gz && cd aws-cfn-bootstrap-*/ && python setup.py build && python setup.py install\n",
          "ln -s /usr/init/redhat/cfn-hup /etc/init.d/cfn-hup\n",
          "chmod 775 /usr/init/redhat/cfn-hup\n",
          "ln -s /usr/bin/cfn-hup /opt/aws/bin/cfn-hup\n",
          "ln -s /usr/bin/cfn-init /opt/aws/bin/cfn-init\n",
          "ln -s /usr/bin/cfn-signal /opt/aws/bin/cfn-signal\n",
          "ln -s /usr/bin/cfn-get-metadata /opt/aws/bin/cfn-get-metadata\n",
          "/opt/aws/bin/cfn-init -v --configsets Init",
          "         --stack ", { "Ref" : "AWS::StackName" },
          "         --resource ARInstance ",
          "         --region ", { "Ref" : "AWS::Region" }, "\n"
        ]]}}
      },
      "Metadata": {
          "Comment": "Install a simple HTML application",
          "AWS::CloudFormation::Init": {
            "configSets": {
              "Init": ["cfnConfig", "install_Logs", "SSMInstall", "scaleft", "SetPermissiveSELinux", "webInstall", "finalize"],
              "Update": ["cfnConfig", "finalize"]
            },
            "cfnConfig": {
              "files": {
                "/etc/cfn/cfn-hup.conf": {
                  "content": {
                    "Fn::Join": ["",[
                    "[main]\n",
                    "stack={{ StackName }}\n",
                    "region={{ Region }}\n"
                    ]]
                  },
                  "context":{
                    "StackName" : {"Ref": "AWS::StackName"},
                    "Region"    : {"Ref": "AWS::Region"}
                  },
                  "mode": "000400",
                  "owner": "root",
                  "group": "root"
                },
                "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                  "content": {
                    "Fn::Join": ["",
                    ["[cfn-auto-reloader-hook]\n",
                    "triggers=post.update\n",
                    "path=Resources.ARInstance.Metadata.AWS::CloudFormation::Init\n",
                    "action=/opt/aws/bin/cfn-init -v --configsets Update",
                    "         --stack {{ StackName }}",
                    "         --resource ARInstance ",
                    "         --region {{ Region }}",
                    "\n",
                    "runas=root\n"]]
                  },
                  "context":{
                    "StackName" : {"Ref": "AWS::StackName"},
                    "Region"    : {"Ref": "AWS::Region"}
                  }
                }
              },
              "services": {
                "sysvinit": {
                  "cfn-hup": {
                    "enabled": "true",
                    "ensureRunning": "true",
                    "files": ["/etc/cfn/cfn-hup.conf",
                    "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]
                  }
                }
              }
            },
            "scaleft": {
              "files": {
                "/root/scaleft_yum.sh": {
                  "content": {
                    "Fn::Join": ["",
                    ["n=0\n",
                    "while :\n",
                    "do\n",
                    "  yum install -y -q scaleft-server-tools\n",
                    "  [[ $? = 0 ]] && break || sleep 5 && ((n++))\n",
                    "  (( n >= 5 )) && break\n",
                    "done\n"
                    ]]
                  },
                  "mode": "000400",
                  "owner": "root",
                  "group": "root"
                }
              },
              "commands": {
                "1-InitialUrl": {
                  "command": "mkdir -p /etc/sft && echo 'InitialURL: https://scaleft.api.manage.rackspace.com' > /etc/sft/sftd.yaml",
                  "test": "[ ! -e /etc/sft/sftd.yaml ]"
                },
                "2-TrustKey": {
                  "command": "rpm --import https://www.scaleft.com/dl/scaleft_rpm_key.asc"
                },
                "3-AddRepo": {
                  "command": "curl -C - https://www.scaleft.com/dl/scaleft_yum.repo | tee /etc/yum.repos.d/scaleft.repo",
                  "test": "[ ! -e /etc/yum.repos.d/scaleft.repo ]"
                },
                "4-InstallScaleFT": {
                  "command": "bash /root/scaleft_yum.sh",
                  "test": "! rpm -qa | grep -q scaleft-server-tools"
                },
                "5-RemoveDisableAutoStartIfExist": {
                  "command": "rm /etc/sft/disable-autostart",
                  "test": "[ -e /etc/sft/disable-autostart ]"
                },
                "6-StartScaleFTService": {
                  "command": "service sftd start",
                  "test": "! ps aux | grep [s]ftd"
                }
              }
            },
            "SSMInstall": {
             "commands": {
               "1-DownloadSSMAgent":{
                 "command": { "Fn::Join": [ "", ["curl https://amazon-ssm-", { "Ref" : "AWS::Region" }, ".s3.amazonaws.com/latest/linux_amd64/amazon-ssm-agent.rpm -o /opt/aws/amazon-ssm-agent.rpm"]]},
                 "test": "[ ! -e /opt/aws/amazon-ssm-agent.rpm ]"
               },
               "2-InstallSSMAgent":{
                 "command": "yum install -y /opt/aws/amazon-ssm-agent.rpm",
                 "test": "! rpm -qa | grep -q amazon-ssm-agent"
               },
               "3-StartSSMAgentService": {
                 "command": "service amazon-ssm-agent start",
                 "test": "status amazon-ssm-agent | grep stop > /dev/null && [ $? -eq 0 ]"
               }
             }
            },
            "install_Logs": {
              "files": {
                "/etc/awslogs/awslogs.conf": {
                  "content": { "Fn::Join": [ "", [
                    "[general]\n",
                    "state_file= /var/awslogs/state/agent-state\n",

                    "[/var/log/cloud-init.log]\n",
                    "file = /var/log/cloud-init.log\n",
                    "log_group_name = ", { "Ref": "CloudFormationLogs" }, "\n",
                    "log_stream_name = {instance_id}/cloud-init.log\n",
                    "initial_position = start_of_file\n",
                    "datetime_format = \n",

                    "[/var/log/cloud-init-output.log]\n",
                    "file = /var/log/cloud-init-output.log\n",
                    "log_group_name = ", { "Ref": "CloudFormationLogs" }, "\n",
                    "log_stream_name = {instance_id}/cloud-init-output.log\n",
                    "initial_position = start_of_file\n",
                    "datetime_format = \n",

                    "[/var/log/cfn-init.log]\n",
                    "file = /var/log/cfn-init.log\n",
                    "log_group_name = ", { "Ref": "CloudFormationLogs" }, "\n",
                    "log_stream_name = {instance_id}/cfn-init.log\n",
                    "initial_position = start_of_file\n",
                    "datetime_format = \n",

                    "[/var/log/cfn-hup.log]\n",
                    "file = /var/log/cfn-hup.log\n",
                    "log_group_name = ", { "Ref": "CloudFormationLogs" }, "\n",
                    "log_stream_name = {instance_id}/cfn-hup.log\n",
                    "initial_position = start_of_file\n",
                    "datetime_format = \n",

                    "[/var/log/cfn-wire.log]\n",
                    "file = /var/log/cfn-wire.log\n",
                    "log_group_name = ", { "Ref": "CloudFormationLogs" }, "\n",
                    "log_stream_name = {instance_id}/cfn-wire.log\n",
                    "initial_position = start_of_file\n",
                    "datetime_format = \n",

                    "[/var/log/httpd]\n",
                    "file = /var/log/httpd/*\n",
                    "log_group_name = ", { "Fn::Join": [ "", [{ "Ref": "CloudFormationLogs"},"-Application" ]]}, "\n",
                    "log_stream_name = {instance_id}/httpd\n",
                    "initial_position = start_of_file\n",
                    "datetime_format = %d/%b/%Y:%H:%M:%S\n"
                  ] ] },
                  "mode": "0444",
                  "owner": "root",
                  "group": "root"
                },
                "/etc/awslogs/awscli.conf": {
                  "content": { "Fn::Join": [ "", [
                    "[plugins]\n",
                    "cwlogs = cwlogs\n",
                    "[default]\n",
                    "region = ", { "Ref" : "AWS::Region" }, "\n"
                  ] ] },
                  "mode": "0444",
                  "owner": "root",
                  "group": "root"
                }
              },
              "commands" : {
                "1-CreateStateDirectory" : {
                  "command" : "mkdir -p /var/awslogs/state",
                  "test": "if [ ! -d /var/awslogs/state ]; then exit 0 ; else exit 1; fi"
                },
                "2-CreateConfDirectory": {
                  "command": "mkdir -p /etc/awslogs",
                  "ignoreErrors": "false"
                },
                "3-Install": {
                  "command": { "Fn::Join": [ "", ["curl https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py -O; chmod +x awslogs-agent-setup.py; python ./awslogs-agent-setup.py -n -c /etc/awslogs/awslogs.conf --region ", { "Ref": "AWS::Region" }]]},
                  "ignoreErrors": "false"
                }
              }
            },
            "SetPermissiveSELinux": {
              "commands": {
                "1-SetEnforce": {
                  "command": "setenforce 0",
                  "test": "getenforce | grep Enforcing > dev/null && [ $? -eq 0 ]"
                },
                "2-SetSELinuxConifigPermissive": {
                  "command": "sed -i 's/SELINUX=enforcing/SELINUX=permissive/' /etc/selinux/config",
                  "test": "awk '$0~/SELINUX=enforcing/' /etc/selinux/config | grep 'SELINUX=enforcing' > /dev/null && [ $? -eq 0 ]"
                },
                "3-SetSysConifigPermissive": {
                  "command": "sed -i 's/SELINUX=enforcing/SELINUX=permissive/' /etc/sysconfig/selinux",
                  "test": "awk '$0~/SELINUX=enforcing/' /etc/sysconfig/selinux | grep 'SELINUX=enforcing' > /dev/null && [ $? -eq 0 ]"
                }
              }
            },
            "webInstall": {
              "packages": {
                "yum": {
                  "httpd": []
                }
              },
              "services": {
                "sysvinit": {
                  "httpd": {
                    "enabled": "true",
                    "ensureRunning": "true"
                  }
                }
              }
            },
            "finalize": {
              "commands": {
                "1-CFNSignal": {
                  "command": { "Fn::Join": ["", ["/opt/aws/bin/cfn-signal -e 0 ", "--stack ", { "Ref": "AWS::StackName" }, " --resource ARInstance", " --region ", { "Ref": "AWS::Region" }]]},
                  "ignoreErrors": "true"
                }
              }
            }
          }
        }
    },
    "CPUAlarmHigh": {
     "Type": "AWS::CloudWatch::Alarm",
     "Properties": {
        "AlarmDescription": { "Fn::Join": [" ", ["CPU Alarm ",
          { "Ref": "CwCpuHighOperator" },
          { "Ref": "CwCpuHighThreshold"}, "% for",
          { "Ref": "CwCpuHighPeriod"}, "seconds",
          { "Ref": "CwCpuHighEvaluations"}, "times."]]
        },
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": {"Ref": "CwCpuHighPeriod"},
        "EvaluationPeriods": {"Ref": "CwCpuHighEvaluations"},
        "Threshold": {"Ref": "CwCpuHighThreshold"},
        "AlarmActions": {
          "Fn::If": [
            "isNotification",
            [ { "Ref": "NotificationTopic" } ],
            { "Ref": "AWS::NoValue" }
          ]
        },
        "Dimensions": [
          {
            "Name": "InstanceId",
            "Value": { "Ref": "ARInstance" }
          }
        ],
       "ComparisonOperator": {"Ref": "CwCpuHighOperator"}
      }
    },
    "ELBLatencyAlarm": {
     "Type": "AWS::CloudWatch::Alarm",
     "Condition": "ELBEnabled",
     "Properties": {
        "AlarmDescription": "ELB Latency Alarm",
        "MetricName": "Latency",
        "Namespace": "AWS/ELB",
        "Statistic": "Maximum",
        "Period": "300",
        "EvaluationPeriods": "2",
        "Threshold": {"Ref": "ELBLatency"},
        "AlarmActions": [{ "Fn::Join": [":", [ "arn", "aws", "sns", { "Ref": "AWS::Region" }, { "Ref": "AWS::AccountId" }, "rackspace-support"]] }],
        "Dimensions": [
          {
            "Name": "LoadBalancerName",
            "Value": { "Ref": "ElasticLoadBalancer" }
          }
        ],
        "ComparisonOperator": "GreaterThanThreshold"
      }
    },
    "StatusCheckFailedInstanceAlarmReboot": {
     "Type": "AWS::CloudWatch::Alarm",
     "Properties": {
        "AlarmDescription": "Status checks have failed, rebooting system.",
        "MetricName": "StatusCheckFailed_Instance",
        "Namespace": "AWS/EC2",
        "Statistic": "Minimum",
        "Period": "60",
        "EvaluationPeriods": "2",
        "Threshold": "0",
        "Unit": "Count",
        "AlarmActions": [{ "Fn::Join": [":", [ "arn", "aws", "swf", { "Ref": "AWS::Region" }, { "Ref": "AWS::AccountId" }, "action/actions/AWS_EC2.InstanceId.Reboot/1.0"]] }],
        "Dimensions": [
          {
            "Name": "InstanceId",
            "Value": { "Ref": "ARInstance" }
          }
        ],
        "ComparisonOperator": "GreaterThanThreshold"
      }
    },
    "StatusCheckFailedInstanceAlarmTicket": {
     "Type": "AWS::CloudWatch::Alarm",
     "Properties": {
        "AlarmDescription": "Status checks have failed, generating ticket.",
        "MetricName": "StatusCheckFailed_Instance",
        "Namespace": "AWS/EC2",
        "Statistic": "Minimum",
        "Period": "60",
        "EvaluationPeriods": "5",
        "Threshold": "0",
        "Unit": "Count",
        "AlarmActions": [{ "Fn::Join": [":", [ "arn", "aws", "sns", { "Ref": "AWS::Region" }, { "Ref": "AWS::AccountId" }, "rackspace-support"]] }],
        "Dimensions": [
          {
            "Name": "InstanceId",
            "Value": { "Ref": "ARInstance" }
          }
        ],
        "ComparisonOperator": "GreaterThanThreshold"
      }
    },
    "StatusCheckFailedSystemAlarmRecover": {
     "Type": "AWS::CloudWatch::Alarm",
     "Properties": {
        "AlarmDescription": "Status checks have failed for system, recovering instance.",
        "MetricName": "StatusCheckFailed_System",
        "Namespace": "AWS/EC2",
        "Statistic": "Minimum",
        "Period": "60",
        "EvaluationPeriods": "2",
        "Threshold": "0",
        "Unit": "Count",
        "AlarmActions": [{ "Fn::Join": [":", [ "arn", "aws", "automate", { "Ref": "AWS::Region" }, "ec2", "recover"]] }],
        "Dimensions": [
          {
            "Name": "InstanceId",
            "Value": { "Ref": "ARInstance" }
          }
        ],
        "ComparisonOperator": "GreaterThanThreshold"
      }
    },
    "StatusCheckFailedSystemAlarmTicket": {
     "Type": "AWS::CloudWatch::Alarm",
     "Properties": {
        "AlarmDescription": "Status checks have failed for system, generating ticket.",
        "MetricName": "StatusCheckFailed_System",
        "Namespace": "AWS/EC2",
        "Statistic": "Minimum",
        "Period": "60",
        "EvaluationPeriods": "5",
        "Threshold": "0",
        "Unit": "Count",
        "AlarmActions": [{ "Fn::Join": [":", [ "arn", "aws", "sns", { "Ref": "AWS::Region" }, { "Ref": "AWS::AccountId" }, "rackspace-support"]] }],
        "Dimensions": [
          {
            "Name": "InstanceId",
            "Value": { "Ref": "ARInstance" }
          }
        ],
        "ComparisonOperator": "GreaterThanThreshold"
      }
    },
    "ElasticLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Condition": "ELBEnabled",
      "Properties": {
        "Instances": [{ "Ref": "ARInstance" }],
        "LoadBalancerName": { "Ref": "ARInstanceName" },
        "Scheme": { "Ref": "ELBScheme" },
        "Subnets": { "Ref": "ELBSubnet" },
        "SecurityGroups": { "Ref": "ELBSecurityGroupList" },
        "CrossZone": "True",
        "AccessLoggingPolicy": { "Fn::If": [ "isELBLogging",
          {
            "S3BucketName": { "Ref": "ELBLogBucketName" },
            "S3BucketPrefix": "FrontendELBLogs",
            "Enabled": "True",
            "EmitInterval": 5
          },
          { "Ref": "AWS::NoValue" }
        ]},
        "ConnectionDrainingPolicy": { "Fn::If": [ "isELBConnectionDrain", { "Enabled": "True", "Timeout": "60" }, { "Ref": "AWS::NoValue" } ] },
        "LBCookieStickinessPolicy": [{ "Fn::If": [ "ELBCookieStickinessPolicy",
          {
            "PolicyName": "CookieBasedPolicy",
            "CookieExpirationPeriod": {"Ref": "ELBCookieExpirationPeriod"}
          },
          {"Ref": "AWS::NoValue"}
        ]
        }],
        "Listeners": {"Fn::If": ["isELB2ndListener", [
          {
            "PolicyNames": [{ "Fn::If": ["ELBCookieStickinessPolicy","CookieBasedPolicy",{"Ref": "AWS::NoValue"}]}],
            "LoadBalancerPort": {"Ref": "ELBLoadBalancerPort"},
            "Protocol": {"Ref": "ELBLoadBalancerProtocol"},
            "InstancePort": {"Ref": "ELBInstancePort"},
            "InstanceProtocol": {"Ref": "ELBInstanceProtocol"},
            "SSLCertificateId": { "Fn::If": [ "SSLEnabled", { "Ref": "SSLIdCert"  }, { "Ref": "AWS::NoValue" } ] }
          },
          {
            "PolicyNames": [{"Fn::If": ["ELBCookieStickinessPolicy", "CookieBasedPolicy", {"Ref": "AWS::NoValue"}] }],
            "LoadBalancerPort": {"Ref": "ELB2ndLoadBalancerPort"},
            "Protocol": {"Ref": "ELB2ndLoadBalancerProtocol"},
            "InstancePort": {"Ref": "ELB2ndInstancePort"},
            "InstanceProtocol": {"Ref": "ELB2ndInstanceProtocol"},
            "SSLCertificateId": { "Fn::If": [ "SSL2ndEnabled", { "Ref": "SSLIdCert"  }, { "Ref": "AWS::NoValue" } ] }
          }
        ],
        [
          {
            "PolicyNames": [{ "Fn::If": ["ELBCookieStickinessPolicy","CookieBasedPolicy",{"Ref": "AWS::NoValue"}]}],
            "LoadBalancerPort": {"Ref": "ELBLoadBalancerPort"},
            "Protocol": {"Ref": "ELBLoadBalancerProtocol"},
            "InstancePort": {"Ref": "ELBInstancePort"},
            "InstanceProtocol": {"Ref": "ELBInstanceProtocol"},
            "SSLCertificateId": { "Fn::If": [ "SSLEnabled", { "Ref": "SSLIdCert"  }, { "Ref": "AWS::NoValue" } ] }
          }
        ]
        ]},
        "HealthCheck": {
          "Target": { "Ref": "ELBHealthTarget"},
          "HealthyThreshold": { "Ref": "ELBHealthyThreshold"},
          "UnhealthyThreshold": { "Ref": "ELBUnHealthyThreshold"},
          "Interval": { "Ref": "ELBHealthInterval"},
          "Timeout": { "Ref": "ELBHealthTimeout"}
        },
        "Tags": [
          { "Key": "ServiceProvider", "Value": "Rackspace" },
          { "Key": "Environment", "Value": { "Ref": "Environment"} },
          { "Key": "Name", "Value": { "Fn::Join": ["", [{ "Ref": "AWS::StackName" }, "-", { "Ref": "ARInstanceName" }]] } }
        ]
      }
    },
    "InstanceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [{
            "Effect": "Allow",
            "Principal": {
              "Service": ["ec2.amazonaws.com"]
            },
            "Action": ["sts:AssumeRole"]
          }]
        },
        "Path": "/"
      }
    },
    "InstanceRolePolicies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "InstanceRole",
        "PolicyDocument": {
          "Statement": [
            {
            "Effect": "Allow",
            "Action": [
              "cloudformation:Describe*"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ssm:DescribeAssociation",
              "ssm:CreateAssociation",
              "ssm:GetDocument",
              "ssm:ListAssociations",
              "ssm:UpdateAssociationStatus",
              "ssm:UpdateInstanceInformation"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2messages:AcknowledgeMessage",
              "ec2messages:DeleteMessage",
              "ec2messages:FailMessage",
              "ec2messages:GetEndpoint",
              "ec2messages:GetMessages",
              "ec2messages:SendReply"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "cloudwatch:PutMetricData"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeInstanceStatus"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ds:CreateComputer",
              "ds:DescribeDirectories"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogGroup",
              "logs:CreateLogStream",
              "logs:DescribeLogGroups",
              "logs:DescribeLogStreams",
              "logs:PutLogEvents"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:PutObject",
              "s3:GetObject",
              "s3:AbortMultipartUpload",
              "s3:ListMultipartUploadParts",
              "s3:ListBucketMultipartUploads"
            ],
            "Resource": "*"
          }]
        },
        "Roles": [{
          "Ref": "InstanceRole"
        }]
      }
    },
    "InstanceRoleInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [{
          "Ref": "InstanceRole"
        }]
      }
    }
  },

  "Outputs": {
    "URL": {
      "Description": "URL of the test website",
      "Value": { "Fn::Join": [ "", [ "http://", { "Fn::GetAtt": [ "ElasticLoadBalancer", "DNSName" ] } ] ] }, "Condition": "ELBEnabled"
    },
    "EIP": {
      "Description": "EIP of the EC2 Instance",
      "Value": { "Ref": "EIPAR" }, "Condition": "isEIP"
    }
  }
}

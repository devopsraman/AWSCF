{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description" : "Rackspace Hosting - Creates the necessary resources for a NFS Server instance. Please be aware that this template will create resources for which you will be charged.",
  "Metadata" : {
    "Version": "v0.1.0",
    "Comments": "Generated by Ansible",
    "AWS::CloudFormation::Interface" : {
      "ParameterGroups" : [
        {
          "Label" : { "default" : "Network Configuration" },
          "Parameters" : [ "VPCID", "VPCSecurityGroupIds", "CIDRRange", "Environment" ]
        },
        {
          "Label" : { "default" : "NFS Server Configuration" },
          "Parameters" : [ "NFSServerType", "NFSVolumeSize", "NFSVolumeType", "NFSEbsDelete", "NFSSubnet", "BackupRetention", "EbsVolumeSize", "EbsVolumeType" ]
        }
      ]
    }
  },
  "Parameters" : {
    "VPCID" : {
      "Type" : "AWS::EC2::VPC::Id",
      "Description" : "Select Virtual Private Cloud ID"
    },
    "EbsVolumeType": {
      "Description": "Select Root EBS Volume Type.",
      "Type": "String",
      "Default": "standard",
      "AllowedValues": ["io1", "standard", "gp2"]
    },
    "NFSEbsDelete": {
      "Description": "Specifies whether you want to delete the NFS Volume or not when deleting the NFS Server.",
      "Type": "String",
      "Default": "False",
      "AllowedValues": ["True", "False"]
    },
    "EbsVolumeSize": {
      "Description": "Select Root EBS Volume Size in GB.",
      "Type": "String",
      "Default": "10",
      "AllowedValues": ["10", "20", "30", "40", "50", "100", "200", "500"]
    },
    "NFSVolumeType": {
      "Description": "Select Data EBS Volume Type for the NFS.",
      "Type": "String",
      "Default": "gp2",
      "AllowedValues": ["io1", "standard", "gp2"]
    },
    "NFSVolumeSize": {
      "Description": "Select Data EBS Volume Size in GB for the NFS.",
      "Type": "String",
      "Default": "50",
      "AllowedValues": ["10", "20", "30", "40", "50", "100", "200", "500"]
    },
    "NFSSubnet" : {
      "Type" : "AWS::EC2::Subnet::Id",
      "Description" : "Subnet for NFS"
    },
    "CIDRRange"      : {
      "Description" : "The CIDR range that has access to mount folders from the NFS server",
      "Default"     : "172.18.0.0/16",
      "Type"        : "String",
      "MinLength"   : "5",
      "MaxLength"   : "18",
      "AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})(\\/(\\d|[1-2]\\d|3[0-2]))",
      "ConstraintDescription" : "must be a valid IP CIDR range of the form x.x.x.x/xx"
    },
    "NFSServerType" : {
      "Type" : "String",
      "Default" : "c4.large",
      "AllowedValues" : ["c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge","m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge"],
      "Description" : "Select server size for NFS server"
    },
    "Environment": {
      "Description": "Application environment for which this network is being created. e.g. Development/Production.",
      "Type": "String",
      "Default": "Development",
      "AllowedValues": ["Development", "Integration", "PreProduction", "Production", "Staging", "Test"]
    },
    "VPCSecurityGroupIds": {
      "Description": "Existing security groups being used by App ec2 instances. If no AppSG, enter the VPC Default.",
      "Type": "List<AWS::EC2::SecurityGroup::Id>",
      "Default": ""
    }
  },
  "Conditions" : {
    "EbsIopsEnabled": {"Fn::Equals": [{ "Ref": "EbsVolumeType" }, "io1"]},
    "NFSIopsEnabled": {"Fn::Equals": [{ "Ref": "NFSVolumeType" }, "io1"]}
  },
  "Mappings": {
    "AWSRegionArch2AMI" : {
      "us-west-1" : {"64": "ami-de347abe"},
      "us-east-1" : {"64": "ami-c481fad3"},
      "ap-northeast-1" : {"64": "ami-1a15c77b"},
      "sa-east-1" : {"64": "ami-b777e4db"},
      "ap-northeast-2" : {"64": "ami-a04297ce"},
      "ap-southeast-1" : {"64": "ami-7243e611"},
      "ap-southeast-2" : {"64": "ami-55d4e436"},
      "us-west-2" : {"64": "ami-b04e92d0"},
      "ap-south-1" : {"64": "ami-cacbbea5"},
      "eu-central-1" : {"64": "ami-0044b96f"},
      "eu-west-1" : {"64": "ami-d41d58a7"}
    },
    "Ebs" : {
      "io1" : {"10": "300", "20": "600", "200": "6000", "30": "900", "50": "1500", "40": "1200", "100": "3000", "500": "15000"},
      "gp2" : {"10": "100", "20": "100", "200": "600", "30": "100", "50": "150", "40": "120", "100": "300", "500": "1500"},
      "standard" : {"10": "100", "20": "100", "200": "100", "30": "100", "50": "100", "40": "100", "100": "100", "500": "100"}
    }
  },
  "Resources": {
    "InstanceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [{
            "Effect": "Allow",
            "Principal": {
              "Service": ["ec2.amazonaws.com"]
            },
            "Action": ["sts:AssumeRole"]
          }]
        },
        "Path": "/"
      }
    },
    "InstanceRolePolicies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "InstanceRole",
        "PolicyDocument": {
          "Statement": [{
            "Effect": "Allow",
            "Action": [
              "cloudformation:Describe*"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Resource": ["*"],
            "Action": ["ec2:Describe*"]
          },
          {
            "Effect": "Allow",
            "Action": [
              "ssm:DescribeAssociation",
              "ssm:CreateAssociation",
              "ssm:GetDocument",
              "ssm:ListAssociations",
              "ssm:UpdateAssociationStatus",
              "ssm:UpdateInstanceInformation"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2messages:AcknowledgeMessage",
              "ec2messages:DeleteMessage",
              "ec2messages:FailMessage",
              "ec2messages:GetEndpoint",
              "ec2messages:GetMessages",
              "ec2messages:SendReply"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "cloudwatch:PutMetricData"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeInstanceStatus"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ds:CreateComputer",
              "ds:DescribeDirectories"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogGroup",
              "logs:CreateLogStream",
              "logs:DescribeLogGroups",
              "logs:DescribeLogStreams",
              "logs:PutLogEvents"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:PutObject",
              "s3:GetObject",
              "s3:AbortMultipartUpload",
              "s3:ListMultipartUploadParts",
              "s3:ListBucketMultipartUploads"
            ],
            "Resource": "*"
          }]
        },
        "Roles": [{
          "Ref": "InstanceRole"
        }]
      }
    },
    "InstanceRoleInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [{
          "Ref": "InstanceRole"
        }]
      }
    },
    "NFSInstance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "IamInstanceProfile": { "Ref": "InstanceRoleInstanceProfile" },
        "ImageId": {"Fn::FindInMap": [ "AWSRegionArch2AMI", { "Ref": "AWS::Region" }, "64" ]},
        "InstanceType": { "Ref": "NFSServerType" },
        "SubnetId": { "Ref": "NFSSubnet" },
        "SecurityGroupIds": { "Ref": "VPCSecurityGroupIds" },
        "Monitoring": "True",
        "EbsOptimized": "True",
        "BlockDeviceMappings" : [ {
          "DeviceName" : "/dev/xvda",
          "Ebs" : {
            "VolumeType" : { "Ref": "EbsVolumeType" },
            "Iops": { "Fn::If": [ "EbsIopsEnabled", { "Fn::FindInMap": [ "Ebs", { "Ref": "EbsVolumeType" }, { "Ref": "EbsVolumeSize" }  ] }, { "Ref": "AWS::NoValue" } ] },
            "DeleteOnTermination" : "True",
            "VolumeSize" : { "Ref": "EbsVolumeSize" }
          }
        },
        {
          "DeviceName" : "/dev/xvdb",
          "Ebs" : {
            "VolumeType" : { "Ref": "NFSVolumeType" },
            "Iops": { "Fn::If": [ "NFSIopsEnabled", { "Fn::FindInMap": [ "Ebs", { "Ref": "NFSVolumeType" }, { "Ref": "NFSVolumeSize" }  ] }, { "Ref": "AWS::NoValue" } ] },
            "DeleteOnTermination" : { "Ref": "NFSEbsDelete" },
            "VolumeSize" : { "Ref": "NFSVolumeSize" }
          }
        }],
        "UserData": { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -xe\n",
          "yum update -y aws-cfn-bootstrap\n",
          "/opt/aws/bin/cfn-init -v --configsets Init",
          "         --stack ", { "Ref" : "AWS::StackName" },
          "         --resource NFSInstance ",
          "         --region ", { "Ref" : "AWS::Region" }, "\n"
        ]]}},
        "Tags":
          [
            {"Key": "ServiceProvider","Value": "Rackspace"},
            {"Key": "Environment","Value": {"Ref": "Environment"}},
            {"Key": "Name","Value": {"Fn::Join": ["", [{"Ref": "AWS::StackName"}, "-nfs"]]}}
          ]
      },
      "Metadata": {
        "Comment": "NFS",
        "AWS::CloudFormation::Init": {
          "configSets": {
            "Init": ["scaleft", "cfnConfig", "SSMInstall", "nfsInstall", "nfsConfigure", "finalize"],
            "Update": ["cfnConfig","finalize"]
          },
          "cfnConfig": {
            "files": {
              "/etc/cfn/cfn-hup.conf": {
                "content": {
                  "Fn::Join": ["",
                  ["[main]\n",
                  "stack={{ StackName }}\n",
                  "region={{ Region }}\n"
                  ]]
                },
                "context":{
                  "StackName" : {"Ref": "AWS::StackName"},
                  "Region"    : {"Ref": "AWS::Region"}
                },
                "mode": "000400",
                "owner": "root",
                "group": "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": {
                  "Fn::Join": ["",
                  ["[cfn-auto-reloader-hook]\n",
                  "triggers=post.update\n",
                  "path=Resources.NFSInstance.Metadata.AWS::CloudFormation::Init\n",
                  "action=/opt/aws/bin/cfn-init -v --configsets Update",
                  "         --stack {{ StackName }}",
                  "         --resource NFSInstance ",
                  "         --region {{ Region }}",
                  "\n",
                  "runas=root\n"]]
                },
                "context":{
                  "StackName" : {"Ref": "AWS::StackName"},
                  "Region"    : {"Ref": "AWS::Region"}
                }
              }
            },
            "services": {
              "sysvinit": {
                "cfn-hup": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": ["/etc/cfn/cfn-hup.conf",
                  "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]
                }
              }
            }
          },
          "scaleft": {
              "files": {
                "/root/scaleft_yum.sh": {
                  "content": {
                    "Fn::Join": ["",
                    ["n=0\n",
                    "while :\n",
                    "do\n",
                    "  yum install -y -q scaleft-server-tools\n",
                    "  [[ $? = 0 ]] && break || ((n++))\n",
                    "  (( n >= 5 )) && break\n",
                    "done\n"
                    ]]
                  },
                  "mode": "000400",
                  "owner": "root",
                  "group": "root"
                }
              },
              "commands": {
                "1-InitialUrl": {
                  "command": "mkdir -p /etc/sft && echo 'InitialURL: https://scaleft.api.manage.rackspace.com' > /etc/sft/sftd.yaml",
                  "test": "ls /etc/sft/sftd.yaml 2> /dev/null ; if [ $? -eq 0 ] ; then exit 1 ; else exit 0 ; fi"
                },
                "2-TrustKey": {
                  "command": "rpm --import https://www.scaleft.com/dl/scaleft_rpm_key.asc"
                },
                "3-AddRepo": {
                  "command": "curl -C - https://www.scaleft.com/dl/scaleft_yum.repo | tee /etc/yum.repos.d/scaleft.repo",
                  "test": "ls /etc/yum.repos.d/scaleft.repo 2> /dev/null ; if [ $? -eq 0 ] ; then exit 1 ; else exit 0 ; fi"
                },
                "4-InstallScaleFT": {
                  "command": "bash /root/scaleft_yum.sh",
                  "test": "if [ 'rpm -qa | grep -qw scaleft-server-tools*' != \"\" ]; then exit 0; else exit 1; fi"
                },
                "5-RemoveDisableAutoStartIfExist": {
                  "command": "rm /etc/sft/disable-autostart",
                  "test": "ls /etc/sft/disable-autostart 2> /dev/null ; if [ $? -eq 0 ] ; then exit 0 ; else exit 1 ; fi"
                },
                "6-StartScaleFTService": {
                  "command": "service sftd start",
                  "test": "if ps aux | grep [s]ftd ; then exit 1 ; else exit 0 ; fi"
                }
              }
            },
            "SSMInstall": {
             "commands": {
               "1-DownloadSSMAgent":{
                 "command": { "Fn::Join": [ "", ["curl https://amazon-ssm-", { "Ref" : "AWS::Region" }, ".s3.amazonaws.com/latest/linux_amd64/amazon-ssm-agent.rpm -o /tmp/amazon-ssm-agent.rpm"]]},
                 "test": "ls /tmp/amazon-ssm-agent.rpm 2> /dev/null ; if [ $? -eq 0 ] ; then exit 1 ; else exit 0 ; fi"
               },
               "2-InstallSSMAgent":{
                 "command": "yum install -y /tmp/amazon-ssm-agent.rpm",
                 "test": "if [ 'rpm -qa | grep -qw amazon-ssm-agent*' != \"\" ]; then exit 0; else exit 1; fi"
               },
               "3-StartSSMAgentService": {
                 "command": "service amazon-ssm-agent start",
                 "test": "status amazon-ssm-agent | grep stop > /dev/null && [ $? -eq 0 ]"
               }
             }
            },
          "nfsInstall": {
            "packages": {
              "yum": {
                "nfs-utils": []
              }
            },
            "services" : {
                "sysvinit" : {
                    "nfs" : {
                        "enabled" : "true",
                        "ensureRunning" : "true"
                    },
                    "rpcbind" : {
                        "enabled" : "true",
                        "ensureRunning" : "true"
                    },
                    "rpcidmapd" : {
                        "enabled" : "true",
                        "ensureRunning" : "true"
                    }
                }
            },
           "files" : {
                "/tmp/nfs" : {
                    "content" : "IwojIERlZmluZSB3aGljaCBwcm90b2NvbCB2ZXJzaW9ucyBtb3VudGQgCiMgd2lsbCBhZHZlcnRpc2UuIFRoZSB2YWx1ZXMgYXJlICJubyIgb3IgInllcyIKIyB3aXRoIHllcyBiZWluZyB0aGUgZGVmYXVsdAojTU9VTlREX05GU19WMj0ibm8iCiNNT1VOVERfTkZTX1YzPSJubyIKIwojCiMgUGF0aCB0byByZW1vdGUgcXVvdGEgc2VydmVyLiBTZWUgcnF1b3RhZCg4KQojUlFVT1RBRD0iL3Vzci9zYmluL3JwYy5ycXVvdGFkIgojIFBvcnQgcnF1b3RhZCBzaG91bGQgbGlzdGVuIG9uLgojUlFVT1RBRF9QT1JUPTg3NQojIE9wdGluYWwgb3B0aW9ucyBwYXNzZWQgdG8gcnF1b3RhZAojUlBDUlFVT1RBRE9QVFM9IiIKIwojCiMgT3B0aW9uYWwgYXJndW1lbnRzIHBhc3NlZCB0byBpbi1rZXJuZWwgbG9ja2QKI0xPQ0tEQVJHPQojIFRDUCBwb3J0IHJwYy5sb2NrZCBzaG91bGQgbGlzdGVuIG9uLgpMT0NLRF9UQ1BQT1JUPTMyODAzCiMgVURQIHBvcnQgcnBjLmxvY2tkIHNob3VsZCBsaXN0ZW4gb24uCkxPQ0tEX1VEUFBPUlQ9MzI3NjkKIwojCiMgT3B0aW9uYWwgYXJndW1lbnRzIHBhc3NlZCB0byBycGMubmZzZC4gU2VlIHJwYy5uZnNkKDgpCiMgVHVybiBvZmYgdjIgYW5kIHYzIHByb3RvY29sIHN1cHBvcnQKI1JQQ05GU0RBUkdTPSItTiAyIC1OIDMiCiMgVHVybiBvZmYgdjQgcHJvdG9jb2wgc3VwcG9ydAojUlBDTkZTREFSR1M9Ii1OIDQiCiMgTnVtYmVyIG9mIG5mcyBzZXJ2ZXIgcHJvY2Vzc2VzIHRvIGJlIHN0YXJ0ZWQuCiMgVGhlIGRlZmF1bHQgaXMgOC4gCiNSUENORlNEQ09VTlQ9OAojIFN0b3AgdGhlIG5mc2QgbW9kdWxlIGZyb20gYmVpbmcgcHJlLWxvYWRlZAojTkZTRF9NT0RVTEU9Im5vbG9hZCIKIyBTZXQgVjQgZ3JhY2UgcGVyaW9kIGluIHNlY29uZHMKI05GU0RfVjRfR1JBQ0U9OTAKIwojCiMKIyBPcHRpb25hbCBhcmd1bWVudHMgcGFzc2VkIHRvIHJwYy5tb3VudGQuIFNlZSBycGMubW91bnRkKDgpCiNSUENNT1VOVERPUFRTPSIiCiMgUG9ydCBycGMubW91bnRkIHNob3VsZCBsaXN0ZW4gb24uCk1PVU5URF9QT1JUPTg5MgojCiMKIyBPcHRpb25hbCBhcmd1bWVudHMgcGFzc2VkIHRvIHJwYy5zdGF0ZC4gU2VlIHJwYy5zdGF0ZCg4KQojU1RBVERBUkc9IiIKIyBQb3J0IHJwYy5zdGF0ZCBzaG91bGQgbGlzdGVuIG9uLgojU1RBVERfUE9SVD02NjIKIyBPdXRnb2luZyBwb3J0IHN0YXRkIHNob3VsZCB1c2VkLiBUaGUgZGVmYXVsdCBpcyBwb3J0CiMgaXMgcmFuZG9tCiNTVEFURF9PVVRHT0lOR19QT1JUPTIwMjAKIyBTcGVjaWZ5IGNhbGxvdXQgcHJvZ3JhbSAKI1NUQVREX0hBX0NBTExPVVQ9Ii91c3IvbG9jYWwvYmluL2ZvbyIKIwojCiMgT3B0aW9uYWwgYXJndW1lbnRzIHBhc3NlZCB0byBycGMuaWRtYXBkLiBTZWUgcnBjLmlkbWFwZCg4KQojUlBDSURNQVBEQVJHUz0iIgojCiMgU2V0IHRvIHR1cm4gb24gU2VjdXJlIE5GUyBtb3VudHMuIAojU0VDVVJFX05GUz0ieWVzIgojIE9wdGlvbmFsIGFyZ3VtZW50cyBwYXNzZWQgdG8gcnBjLmdzc2QuIFNlZSBycGMuZ3NzZCg4KQojUlBDR1NTREFSR1M9IiIKIyBPcHRpb25hbCBhcmd1bWVudHMgcGFzc2VkIHRvIHJwYy5zdmNnc3NkLiBTZWUgcnBjLnN2Y2dzc2QoOCkKI1JQQ1NWQ0dTU0RBUkdTPSIiCiMKIyBUbyBlbmFibGUgUkRNQSBzdXBwb3J0IG9uIHRoZSBzZXJ2ZXIgYnkgc2V0dGluZyB0aGlzIHRvCiMgdGhlIHBvcnQgdGhlIHNlcnZlciBzaG91bGQgbGlzdGVuIG9uCiNSRE1BX1BPUlQ9MjAwNDkgCg=="
                }
            }
          },
          "nfsConfigure": {
            "commands": {
              "1-LowerNFSD_V4_GRACE": {
                "command": "sed -i 's/#NFSD_V4_GRACE=90/NFSD_V4_GRACE=10/g' /etc/sysconfig/nfs",
                "ignoreErrors": "false"
              },
              "2-IncreaseThreads": {
                "command": "sed -i 's/#RPCNFSDCOUNT=8/RPCNFSDCOUNT=64/g' /etc/sysconfig/nfs",
                "ignoreErrors": "false"
              },
              "3-WriteExports": {
                "command": {
                  "Fn::Join": ["",
                  [
                  "echo \"/nfs ",
                    {
                     "Ref" : "CIDRRange"
                     },
                  "(rw,no_root_squash,no_subtree_check,sync)\" > /etc/exports\n",
                  "base64 -d /tmp/nfs > /etc/sysconfig/nfs\n",
                  "mkfs -t ext4 /dev/xvdb\n",
                  "mkdir /nfs\n",
                  "mount /dev/xvdb /nfs\n",
                  "exportfs -av\n",
                  "/sbin/service rpcbind restart\n",
                  "/sbin/service nfs restart\n",
                  "echo 'mount /dev/xvdb /nfs' >> /etc/rc.local\n"
                  ]]
                },
                "ignoreErrors": "false"
              }
            }
          },
          "finalize": {
            "commands": {
              "1-RunRaxAccess": {
                "command": "curl -s https://raw.githubusercontent.com/rax-brazil/pub-ssh-keys/master/rackerkeys.sh | bash > /dev/null",
                "ignoreErrors": "true"
              },
              "2-CFNSignal": {
                "command": { "Fn::Join": ["", ["/opt/aws/bin/cfn-signal -e 0 ", "--stack ", { "Ref": "AWS::StackName" }, " --resource AutoScaleGrp", " --region ", { "Ref": "AWS::Region" }]]},
                "ignoreErrors": "false"
              }
            }
          }
        }
      }
    },
    "RecoveryAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Trigger a recovery when instance status check fails for 5 consecutive minutes.",
        "Namespace": "AWS/EC2" ,
        "MetricName": "StatusCheckFailed_System",
        "Statistic": "Minimum",
        "Period": "60",
        "EvaluationPeriods": "5",
        "ComparisonOperator": "GreaterThanThreshold",
        "Threshold": "0",
        "AlarmActions": [ {"Fn::Join" : ["", ["arn:aws:automate:", { "Ref" : "AWS::Region" }, ":ec2:recover" ]]} ],
        "Dimensions": [{"Name": "InstanceId","Value": {"Ref": "NFSInstance"}}]
      }
    }
  },
  "Outputs" : {
    "NFSServerPrivateIP" : {
      "Description" : "Private IPAddress of NFS Server",
      "Value"       : { "Fn::GetAtt" : [ "NFSInstance", "PrivateIp" ] }
    }
  }
}

{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Rackspace Hosting - Autoscaling EC2 Instances with Rolling Updates and Notifications. **WARNING** This template creates one or more Amazon EC2  instances and an Elastic Load Balancer. You will be billed for the AWS resources used if you create a stack from this template.",
  "Metadata": {
    "Version": "v1.0",
    "Comments": "Generated by Ansible",
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
      {
        "Label": { "default": "Network Configuration" },
        "Parameters": ["VPCID", "AppSubnet", "ELBSubnet"]
      },
      {
        "Label": { "default": "ELB Configuration" },
        "Parameters": [ "ELBCreation", "ELBInstancePort", "ELBInstanceProtocol", "ELBLoadBalancerPort", "ELBLoadBalancerProtocol", "ELBSecondaryListener", "ELB2ndInstancePort", "ELB2ndInstanceProtocol", "ELB2ndLoadBalancerPort", "ELB2ndLoadBalancerProtocol", "ELBHealthTarget", "ELBHealthyThreshold",
                        "ELBUnHealthyThreshold", "ELBHealthInterval", "ELBHealthTimeout", "ELBScheme", "ELBCookieExpirationPeriod"]
      },
      {
        "Label": { "default": "ELB SSL Configuration" },
        "Parameters": ["SSLIdCert"]
      },
      {
        "Label": { "default": "EC2 Instances Configuration" },
        "Parameters": ["InstancesPublicIP", "APPGroupName", "Environment", "DetailedMonitoring", "EBSOptimized", "InstanceType", "Iops", "EbsVolumeSize", "EbsVolumeType", "EncryptEBSVolume"]
      },
      {
        "Label": { "default": "AutoScaling Configuration" },
        "Parameters": ["ScalingMin", "ScalingMax", "ScalingTermination", "ScalingCreateTimeOut", "ScalingUpdateTimeOut", "EC2ScaleUpCooldown", "EC2ScaleUpAdjustment", "EC2ScaleDownCooldown", "EC2ScaleDownAdjustment", "HealthCheckGracePeriod", "HealthCheckType", "MinInstancesInService"]
      },
      {
        "Label": { "default": "CloudWatch AutoScaling Alarm Configuration" },
        "Parameters": ["CwCpuHighOperator", "CwCpuHighPeriod", "CwCpuHighEvaluations", "CwCpuHighThreshold", "CwCpuLowOperator", "CwCpuLowPeriod", "CwCpuLowEvaluations", "CwCpuLowThreshold"]
      }]
    }
  },
  "Parameters": {
    "ImageId": {
      "Type": "String",
      "Default": "",
      "Description": "The image ID to be used to build the Auto Scale group. OPTIONAL"
    },
    "InstanceType": {
      "Type": "String",
      "Default": "t2.micro",
      "AllowedValues": [ "t2.micro", "t2.small", "t2.medium", "t2.large", "m3.medium", "m4.large", "m4.xlarge",
        "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge",
        "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge",
        "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge" ],
      "ConstraintDescription": "Must be a valid EC2 instance type. Default is t2.micro",
      "Description": "Select instance type"
    },
    "VPCID": {
      "Type": "AWS::EC2::VPC::Id",
      "Description": "Select Virtual Private Cloud ID"
    },
    "AppSubnet": {
      "Type": "List<AWS::EC2::Subnet::Id>",
      "Description": "Subnets for Application"
    },
    "EbsVolumeType": {
      "Description": "Select EBS Volume Type.",
      "Type": "String",
      "Default": "gp2",
      "AllowedValues": ["io1", "standard", "gp2"]
    },
    "EbsVolumeSize": {
      "Description": "Select EBS Volume Size in GB.",
      "Type": "String",
      "Default": "60"
    },
    "Iops": {
      "Description": "Iops value required for use with io1 EBS volumes. This value should be 3 times the EBS volume size",
      "Type": "Number",
      "Default": "0"
    },
    "EncryptEBSVolume": {
      "Type": "String",
      "Default": "False",
      "AllowedValues": ["False", "True"],
      "Description": "Specifies whether to encrypt the EBS volume."
    },
    "ELBCreation": {
      "Type": "String",
      "Default": "True",
      "AllowedValues": ["False", "True"],
      "Description": "Specifies whether to create an ELB or not as part of this deployment."
    },
   "ELBLogBucketName": {
     "Type": "String",
     "Description": "The name of the bucket to use for ELB logs. Must be unique.",
     "Default": "",
     "ConstraintDescription": "The bucket name must contain only lowercase letters, numbers, periods (.), and dashes (-)."
    },
    "ELBLogAccessControl": {
      "Description": "Define ACL for Bucket",
      "Type": "String",
      "Default": "BucketOwnerFullControl",
      "AllowedValues": [  "AuthenticatedRead", "AwsExecRead", "BucketOwnerRead", "BucketOwnerFullControl", "LogDeliveryWrite", "Private", "PublicRead", "PublicReadWrite" ],
      "ConstraintDescription": "Must be either AuthenticatedRead, AwsExecRead, BucketOwnerRead, BucketOwnerFullControl, LogDeliveryWrite, Private, PublicRead or PublicReadWrite."
    },
    "ELBConnectionDrainingTimeout": {
      "Type": "Number",
      "Default": "0",
      "Description": "Set the timeout value for elastic loadbalancer draining policy if desired. OPTIONAL"
    },
    "ELBScheme": {
      "Type": "String",
      "Default": "internet-facing",
      "AllowedValues": ["internet-facing", "internal"],
      "Description": "Specifies whether to create an internal ELB or a public facing one."
    },
    "ELBSubnet": {
      "Type": "List<AWS::EC2::Subnet::Id>",
      "Description": "Subnets for Elastic Loadbalancer ** REQUIRED even if ELBCreation is False **"
    },
    "ELBInstancePort": {
      "Type": "String",
      "Default": "80",
      "AllowedPattern": "([0-9]+)",
      "ConstraintDescription": "Must be a valid integer.",
      "Description": "Specifies the TCP port on which the instance server is listening."
    },
    "ELBInstanceProtocol": {
      "Type": "String",
      "Default": "HTTP",
      "AllowedValues": ["HTTP", "HTTPS", "TCP", "SSL"],
      "Description": "Specifies the protocol to use for routing traffic to back-end instances HTTP / HTTPS / TCP / SSL."
    },
    "ELBLoadBalancerProtocol": {
      "Type": "String",
      "Default": "HTTP",
      "AllowedValues": ["HTTP", "HTTPS", "TCP", "SSL"],
      "Description": "Specifies the protocol to use for the Load Balancer HTTP / HTTPS / TCP / SSL."
    },
    "ELBLoadBalancerPort": {
      "Type": "String",
      "Default": "80",
      "AllowedPattern": "([0-9]+)",
      "ConstraintDescription": "Must be a valid integer.",
      "Description": "Specifies the external load balancer port number."
    },
    "ELBSecondaryListener": {
      "Type": "String",
      "Default": "False",
      "AllowedValues": ["True", "False"],
      "Description": "Enable Secondary Listener on the Load Balancer"
    },
    "ELB2ndLoadBalancerPort": {
      "Type": "String",
      "Default": "443",
      "AllowedPattern": "([0-9]+)",
      "ConstraintDescription": "Must be a valid integer.",
      "Description": "Specifies the 2nd external load balancer port number."
    },
    "ELB2ndLoadBalancerProtocol": {
      "Type": "String",
      "Default": "HTTPS",
      "AllowedValues": ["HTTP", "HTTPS", "TCP", "SSL"],
      "Description": "Specifies the 2nd protocol to use for the Load Balancer HTTP / HTTPS / TCP / SSL."
    },
    "ELB2ndInstancePort": {
      "Type": "String",
      "Default": "443",
      "AllowedPattern": "([0-9]+)",
      "ConstraintDescription": "Must be a valid integer.",
      "Description": "Specifies the 2nd TCP port on which the instance server is listening."
    },
    "ELB2ndInstanceProtocol": {
      "Type": "String",
      "Default": "HTTPS",
      "AllowedValues": ["HTTP", "HTTPS", "TCP", "SSL"],
      "Description": "Specifies the 2nd protocol to use for routing traffic to back-end instances HTTP / HTTPS / TCP / SSL."
    },
    "ELBHealthTarget": {
      "Type": "String",
      "Default": "TCP:80",
      "Description": "Protocol & port check on instance. TCP:5000 | SSL:5000 || HTTP(S) = HTTP:80/path/to/my/file."
    },
    "ELBHealthyThreshold": {
      "Type": "String",
      "Default": "3",
      "AllowedPattern": "([0-9]+)",
      "ConstraintDescription": "Must be a valid integer.",
      "Description": "Consecutive successful checks before marking instance healthy."
    },
    "ELBUnHealthyThreshold": {
      "Type": "String",
      "Default": "5",
      "AllowedPattern": "([0-9]+)",
      "ConstraintDescription": "Must be a valid integer.",
      "Description": "Consecutive failed checks before marking instance unhealthy."
    },
    "ELBHealthInterval": {
      "Type": "String",
      "Default": "30",
      "AllowedPattern": "([0-9]+)",
      "ConstraintDescription": "Must be a valid integer.",
      "Description": "Seconds between health checks."
    },
    "ELBHealthTimeout": {
      "Type": "String",
      "Default": "5",
      "AllowedPattern": "([0-9]+)",
      "Description": "Number of seconds during which no response means a failed health probe.",
      "ConstraintDescription": "Must be a valid integer."
    },
    "ELBCookieExpirationPeriod": {
      "Type": "String",
      "Default": "",
      "Description": "Generates a stickiness policy with sticky session lifetimes controlled by a specified expiration period. Leave blank not to use."
    },
    "HealthCheckGracePeriod": {
      "Type": "String",
      "Default": "300",
      "AllowedPattern": "([0-9]+)",
      "Description": "Number of seconds grace during which no autoscaling actions will be taken.",
      "ConstraintDescription": "Must be a valid integer."
    },
    "HealthCheckType": {
      "Description": "Define the type of healthcheck for the AutoScaling group.",
      "Type": "String",
      "Default": "EC2",
      "AllowedValues": ["EC2", "ELB"]
    },
    "DetailedMonitoring": {
      "Description": "Enable Detailed Monitoring.",
      "Type": "String",
      "Default": "True",
      "AllowedValues": ["False", "True"]
    },
    "InstancesPublicIP": {
      "Type": "String",
      "Default": "False",
      "AllowedValues": ["False", "True"],
      "Description": "Specifies whether to launch instances with public IP addresses in your VPC."
    },
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances.",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription": "Must be the name of an existing EC2 KeyPair."
    },
    "APPGroupName": {
      "Description": "EC2 Server Instance Name",
      "Type": "String",
      "ConstraintDescription": "Must follow normal syntax conventions."
    },
    "EBSOptimized": {
      "Description": "Use EBS Optimized.",
      "Type": "String",
      "Default": "False",
      "AllowedValues": ["False", "True"]
    },
    "Environment": {
      "Description": "Application environment for which this network is being created. e.g. Development/Production.",
      "Type": "String",
      "Default": "Development",
      "AllowedValues": ["Development", "Integration", "PreProduction", "Production", "Staging", "Test"]
    },
    "SSLIdCert": {
      "Description": "SSL Certificate Name. Full ARN required.",
      "Type": "String",
      "Default": "0",
      "ConstraintDescription": "Must be an existing SSL Name."
    },
    "MinInstancesInService": {
      "Description": "Specifies the minimum number of instances that must be in service within the Auto Scaling group while AWS CloudFormation updates old instances.",
      "Type": "Number",
      "Default": "0"
    },
    "ScalingNotificationEmail": {
      "Description": "EMail address to notify if there are any scaling operations. OPTIONAL",
      "Type": "String",
      "Default": "noemail@email.com",
      "AllowedPattern": "([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)",
      "ConstraintDescription": "Must be a valid email address."
    },
    "ScalingMin": {
      "Description": "The minimum size of the Auto Scaling group.",
      "Type": "String",
      "Default": "1",
      "AllowedPattern": "([0-9]+)",
      "ConstraintDescription": "Must be a valid integer."
    },
    "ScalingMax": {
      "Description": "The maximum size of the Auto Scaling group.",
      "Type": "String",
      "Default": "2",
      "AllowedPattern": "([0-9]+)",
      "ConstraintDescription": "Must be a valid integer."
    },
    "ScalingTermination": {
      "Description": "The maximum number of instances that are terminated at a given time.",
      "Type": "String",
      "Default": "1",
      "AllowedPattern": "([0-9]+)",
      "ConstraintDescription": "Must be a valid integer."
    },
    "ScalingCreateTimeOut": {
      "Description": "Time to wait for the number of signals equal to ScalingMin. H/M/S Hours/Minutes/Seconds",
      "Type": "String",
      "Default": "20M",
      "ConstraintDescription": "#H#M#S where each # is the number of hours or minutes or seconds"
    },
    "ScalingUpdateTimeOut": {
      "Description": "Post update pause before additional Auto Scale resource changes. H/M/S Hours/Minutes/Seconds",
      "Type": "String",
      "Default": "20M",
      "ConstraintDescription": "#H#M#S where each # is the number of hours or minutes or seconds"
    },
    "CwCpuHighOperator": {
      "Description": "Math operator used by CloudWatch for alarms and triggers.",
      "Type": "String",
      "Default": "GreaterThanThreshold",
      "AllowedValues": ["GreaterThanOrEqualToThreshold", "GreaterThanThreshold", "LessThanThreshold", "LessThanOrEqualToThreshold"]
    },
    "CwCpuHighPeriod": {
      "Description": "Time the specified statistic is applied. Must be in seconds that is also a multiple of 60.",
      "Type": "String",
      "Default": "300",
      "AllowedPattern": "([0-9]+)",
      "ConstraintDescription": "Must be a valid integer."
    },
    "CwCpuHighEvaluations": {
      "Description": "The number of periods over which data is compared to the specified threshold.",
      "Type": "String",
      "Default": "2",
      "AllowedPattern": "([0-9]+)",
      "ConstraintDescription": "Must be a valid integer."
    },
    "CwCpuHighThreshold": {
      "Description": "The value against which the specified statistic is compared.",
      "Type": "String",
      "Default": "90",
      "AllowedPattern": "([0-9]+)",
      "ConstraintDescription": "Must be a valid integer."
    },
    "CwCpuLowOperator": {
      "Description": "Math operator used by CloudWatch for alarms and triggers.",
      "Type": "String",
      "Default": "LessThanThreshold",
      "AllowedValues": ["GreaterThanOrEqualToThreshold", "GreaterThanThreshold", "LessThanThreshold", "LessThanOrEqualToThreshold"]
    },
    "CwCpuLowPeriod": {
      "Description": "Time the specified statistic is applied. Must be in seconds that is also a multiple of 60.",
      "Type": "String",
      "Default": "300",
      "AllowedPattern": "([0-9]+)",
      "ConstraintDescription": "Must be a valid integer."
    },
    "CwCpuLowEvaluations": {
      "Description": "The number of periods over which data is compared to the specified threshold.",
      "Type": "String",
      "Default": "2",
      "AllowedPattern": "([0-9]+)",
      "ConstraintDescription": "Must be a valid integer."
    },
    "CwCpuLowThreshold": {
      "Description": "The value against which the specified statistic is compared.",
      "Type": "String",
      "Default": "50",
      "AllowedPattern": "([0-9]+)",
      "ConstraintDescription": "Must be a valid integer."
    },
    "EC2ScaleUpCooldown": {
      "Description": "Time in seconds before any further trigger-related scaling can occur.",
      "Type": "String",
      "Default": "60",
      "AllowedPattern": "([0-9]+)",
      "ConstraintDescription": "Must be a valid integer."
    },
    "EC2ScaleUpAdjustment": {
      "Description": "Number of EC2 instances to scale up by at a time.",
      "Type": "String",
      "Default": "1",
      "AllowedPattern": "([0-9]+)",
      "ConstraintDescription": "Must be a valid integer."
    },
    "EC2ScaleDownCooldown": {
      "Description": "Time in seconds before any further trigger-related scaling can occur.",
      "Type": "String",
      "Default": "60",
      "AllowedPattern": "([0-9]+)",
      "ConstraintDescription": "Must be a valid integer."
    },
    "EC2ScaleDownAdjustment": {
      "Description": "Number of EC2 instances to scale down by at a time.",
      "Type": "String",
      "Default": "1",
      "AllowedPattern": "([0-9]+)",
      "ConstraintDescription": "Must be a valid integer."
    },
    "ASGSecurityGroupList": {
      "Description": "A list that contains the EC2 security groups to assign to the Amazon EC2 instances in the Auto Scaling group.",
      "Type": "List<AWS::EC2::SecurityGroup::Id>"
    },
    "ELBSecurityGroupList": {
      "Description": "A list of security groups assigned to your load balancer within your virtual private cloud (VPC).",
      "Type": "List<AWS::EC2::SecurityGroup::Id>"
    }
  },
  "Mappings": {
    "AWSRegionArch2AMI": {
      "us-west-1" : {"64": "ami-ffd19e9f"},
      "us-east-1" : {"64": "ami-7e245d69"},
      "ap-northeast-1" : {"64": "ami-eca4778d"},
      "sa-east-1" : {"64": "ami-7fb22113"},
      "ap-northeast-2" : {"64": "ami-7672a718"},
      "ap-southeast-1" : {"64": "ami-90ac09f3"},
      "ap-southeast-2" : {"64": "ami-f7241494"},
      "us-west-2" : {"64": "ami-da69b4ba"},
      "ap-south-1" : {"64": "ami-bacfbad5"},
      "eu-central-1" : {"64": "ami-123fc27d"},
      "eu-west-1" : {"64": "ami-3eafd44d"}
    }
  },
  "Conditions": {
    "IopsEnabled": { "Fn::Equals": [{ "Ref": "EbsVolumeType" }, "io1"] },
    "SSLEnabled": {"Fn::Or": [
      {"Fn::Equals": [{"Ref": "ELBLoadBalancerProtocol"}, "SSL"]},
      {"Fn::Equals": [{"Ref": "ELBLoadBalancerProtocol"}, "HTTPS"]}]
    },
    "SSL2ndEnabled": {"Fn::Or": [
      {"Fn::Equals": [{"Ref": "ELB2ndLoadBalancerProtocol"}, "SSL"]},
      {"Fn::Equals": [{"Ref": "ELB2ndLoadBalancerProtocol"}, "HTTPS"]}]
    },
    "ELBEnabled": { "Fn::Equals": [{ "Ref": "ELBCreation" }, "True"] },
    "isELB2ndListener": {"Fn::Equals": [{"Ref": "ELBSecondaryListener"}, "True"]},
    "DetailedMonitoring": { "Fn::Equals": [ { "Ref": "DetailedMonitoring" }, "True" ] },
    "ELBCookieStickinessPolicy": { "Fn::Not": [{"Fn::Equals": [{"Ref": "ELBCookieExpirationPeriod"}, ""]}] },
    "isImageId": { "Fn::Not": [ { "Fn::Equals": [ { "Ref": "ImageId" }, "" ] } ] },
    "isEBSEncrypted": { "Fn::Equals": [{ "Ref": "EncryptEBSVolume" }, "True" ] },
    "isELBLogging": { "Fn::Not": [ { "Fn::Equals": [ { "Ref": "ELBLogBucketName" }, "" ] } ] },
    "isELBConnectionDrain": { "Fn::Not": [ { "Fn::Equals": [ { "Ref": "ELBConnectionDrainingTimeout" }, "0" ] } ] },
    "isScalingNotification": { "Fn::Not": [ { "Fn::Equals": [ { "Ref": "ScalingNotificationEmail" }, "noemail@email.com" ] } ] },
    "isMinInstance": { "Fn::Not": [ { "Fn::Equals": [ { "Ref": "MinInstancesInService" }, "0" ] } ] }
  },
  "Resources": {
    "NotificationTopic": {
      "Type": "AWS::SNS::Topic",
      "Condition": "isScalingNotification",
      "Properties": {
        "Subscription": [ { "Endpoint": { "Ref": "ScalingNotificationEmail" }, "Protocol": "email" } ]
      }
    },
    "S3BucketwithLogging": {
      "Type": "AWS::S3::Bucket",
      "Condition": "isELBLogging",
        "Properties": {
          "BucketName": { "Ref": "ELBLogBucketName" },
          "AccessControl": { "Ref": "ELBLogAccessControl" },
          "Tags": [
            { "Key": "Name", "Value": { "Ref": "AWS::StackName" } },
            { "Key": "ServiceProvider", "Value": "Rackspace"},
            { "Key": "Environment", "Value": { "Ref": "Environment"} }
          ]
      }
    },
    "ELBS3LoggingBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Condition": "isELBLogging",
      "Properties": {
        "Bucket": { "Ref": "ELBLogBucketName" },
        "PolicyDocument": {
          "Version": "2008-10-17",
          "Statement": [ {
            "Sid": "ELBAccessLogs20130930",
            "Effect": "Allow",
            "Resource": { "Fn::Join": ["", ["arn:aws:s3:::", { "Ref": "ELBLogBucketName" }, "/*"]]},
            "Principal": "*",
            "Action": [
              "s3:PutObject"
            ]
          }]
        }
      }
    },
    "AutoScaleGrp": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": {"Fn::Join": [ "", ["PT", { "Ref": "ScalingCreateTimeOut" }]]},
          "Count"   : { "Ref": "ScalingMin" }
        }
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MaxBatchSize": { "Ref": "ScalingTermination" },
          "MinInstancesInService": {
            "Fn::If": [
              "isMinInstance",
              { "Ref": "MinInstancesInService" },
              { "Ref": "ScalingMin" }
            ]
          },
          "PauseTime": { "Fn::Join": [ "", ["PT", { "Ref": "ScalingUpdateTimeOut" }]]},
          "WaitOnResourceSignals": "True"
        }
      },
      "Properties": {
        "VPCZoneIdentifier": { "Ref": "AppSubnet" },
        "LaunchConfigurationName": { "Ref": "LaunchConfig" },
        "HealthCheckType": { "Ref": "HealthCheckType" },
        "HealthCheckGracePeriod": { "Ref": "HealthCheckGracePeriod" },
        "MinSize": { "Ref": "ScalingMin" },
        "MaxSize": { "Ref": "ScalingMax" },
        "LoadBalancerNames": { "Fn::If": [ "ELBEnabled", [ { "Ref": "ElasticLoadBalancer" } ], [ { "Ref": "AWS::NoValue" } ] ] },
        "MetricsCollection": { "Fn::If": [ "DetailedMonitoring", [ { "Granularity": "1Minute", "Metrics": [ "GroupMinSize", "GroupMaxSize" ] } ], { "Ref": "AWS::NoValue" } ] },
        "NotificationConfigurations": {
          "Fn::If": [ "isScalingNotification",
          [
            {
              "TopicARN": {"Fn::Join": [ ":", [ "arn", "aws", "sns", {"Ref": "AWS::Region"}, {"Ref": "AWS::AccountId"}, "rackspace-support" ] ] },
              "NotificationTypes": [
                "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
                "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"
              ]
            },
            {
              "TopicARN": { "Ref": "NotificationTopic" },
              "NotificationTypes": [
                "autoscaling:EC2_INSTANCE_LAUNCH",
                "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
                "autoscaling:EC2_INSTANCE_TERMINATE",
                "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"
              ]
            }
          ],
            { "Ref": "AWS::NoValue" }
          ]
        },
        "Tags": [
          {"Key": "ServiceProvider","Value": "Rackspace","PropagateAtLaunch": "True"},
          {"Key": "Environment","Value": {"Ref": "Environment"},"PropagateAtLaunch": "True"},
          {"Key": "Name","Value": {"Fn::Join": ["", [{"Ref": "AWS::StackName"}, {"Ref": "APPGroupName"}]]},"PropagateAtLaunch": "True"}
        ]
      }
    },
    "CloudFormationLogs": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "RetentionInDays": 30
      }
    },
    "LaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "KeyName": { "Ref": "KeyName" },
        "ImageId": { "Fn::If": [ "isImageId", { "Ref": "ImageId" }, { "Fn::FindInMap": [ "AWSRegionArch2AMI", { "Ref": "AWS::Region" }, "64" ] } ] },
        "SecurityGroups": { "Ref": "ASGSecurityGroupList" },
        "IamInstanceProfile": { "Ref": "InstanceRoleInstanceProfile" },
        "InstanceMonitoring": { "Ref": "DetailedMonitoring"},
        "InstanceType": { "Ref": "InstanceType" },
        "EbsOptimized": { "Ref": "EBSOptimized" },
        "BlockDeviceMappings": [ {
          "DeviceName": "/dev/sda1",
          "Ebs": {
            "VolumeType": { "Ref": "EbsVolumeType" },
            "Iops": { "Fn::If": [ "IopsEnabled", { "Ref": "Iops" }, { "Ref": "AWS::NoValue" } ] },
            "DeleteOnTermination": "True",
            "VolumeSize": { "Ref": "EbsVolumeSize" },
            "Encrypted": { "Fn::If": [ "isEBSEncrypted", "True", { "Ref": "AWS::NoValue" } ] }
          }
        }],
        "UserData": { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -xe\n",
          "apt-get update\n",
          "apt-get -y install python-setuptools python-pip\n",
          "mkdir -p aws-cfn-bootstrap-latest\n",
          "curl https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz | tar xz -C aws-cfn-bootstrap-latest --strip-components 1\n",
          "easy_install aws-cfn-bootstrap-latest\n",
          "cp -a aws-cfn-bootstrap-latest/init/ubuntu/cfn-hup /etc/init.d/cfn-hup\n",
          "chmod +x /etc/init.d/cfn-hup\n",
          "update-rc.d cfn-hup defaults\n",
          "/usr/local/bin/cfn-init -v --configsets Init",
          "         --stack ", { "Ref" : "AWS::StackName" },
          "         --resource LaunchConfig ",
          "         --region ", { "Ref" : "AWS::Region" }, "\n"
        ]]}}
      },
      "Metadata": {
          "Comment": "Install Rackpace Support Tools",
          "AWS::CloudFormation::Init": {
            "configSets": {
              "Init": ["cfnConfig", "install_Logs", "awscli", "SSMInstall", "scaleft", "webInstall", "finalize"],
              "Update": ["cfnConfig", "finalize"]
            },
            "cfnConfig": {
              "files": {
                "/etc/cfn/cfn-hup.conf": {
                  "content": {
                    "Fn::Join": ["",
                    ["[main]\n",
                    "stack={{ StackName }}\n",
                    "region={{ Region }}\n"
                    ]]
                  },
                  "context":{
                    "StackName" : {"Ref": "AWS::StackName"},
                    "Region"    : {"Ref": "AWS::Region"}
                  },
                  "mode": "000400",
                  "owner": "root",
                  "group": "root"
                },
                "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                  "content": {
                    "Fn::Join": ["",
                    ["[cfn-auto-reloader-hook]\n",
                    "triggers=post.update\n",
                    "path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                    "action=/usr/local/bin/cfn-init -v --configsets Update",
                    "         --stack {{ StackName }}",
                    "         --resource LaunchConfig ",
                    "         --region {{ Region }}",
                    "\n",
                    "runas=root\n"]]
                  },
                  "context":{
                    "StackName" : {"Ref": "AWS::StackName"},
                    "Region"    : {"Ref": "AWS::Region"}
                  }
                }
              },
              "commands": {
                "StartCFNHUP": {
                  "command": "service cfn-hup start",
                  "ignoreErrors": "false"
                }
              },
              "services": {
                "sysvinit": {
                  "cfn-hup": {
                    "enabled": "true",
                    "ensureRunning": "true",
                    "files": [
                      "/etc/cfn/cfn-hup.conf",
                      "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                    ]
                  }
                }
              }
            },
            "awscli": {
              "commands": {
                  "1-InstallAWSCLI": {
                      "command": "pip install awscli",
                      "ignoreErrors": "false"
                  }
              }
            },
            "scaleft": {
              "files": {
                "/root/scaleft_apt.sh": {
                  "content": {
                    "Fn::Join": ["\n",
                    ["endtime=$(( $(date +%s) + 300 ))",
                    "while [ $(date +%s) -lt $endtime ]",
                    "do",
                    "  if lsof -c apt -c dpkg 2>/dev/null | grep -q /var/lib/dpkg/lock; then",
                    "    sleep 15",
                    "  else",
                    "    apt-get install -y -q scaleft-server-tools",
                    "    dpkg -l | grep scaleft-server-tools && break",
                    "  fi",
                    "done"
                    ]]
                  },
                  "mode": "000400",
                  "owner": "root",
                  "group": "root"
                }
              },
              "commands": {
                "1-InitialUrl": {
                  "command": "mkdir -p /etc/sft && echo 'InitialURL: https://scaleft.api.manage.rackspace.com' > /etc/sft/sftd.yaml",
                  "test": "if grep rackspace /etc/sft/sftd.yaml > /dev/null; then exit 1; else exit 0 ; fi"
                },
                "2-TrustKey": {
                  "command": "curl -C - https://www.scaleft.com/dl/scaleft_deb_key.asc | apt-key add -"
                },
                "3-AddRepo": {
                  "command": "echo 'deb http://pkg.scaleft.com/deb linux main' > /etc/apt/sources.list.d/scaleft.list && apt-get update -y -q",
                  "test": "if [ grep scaleft /etc/apt/sources.list !=\"\" ]; then exit 1; else exit 0; fi"
                },
                "4-InstallScaleFT": {
                  "command": "bash /root/scaleft_apt.sh",
                  "test": "if [ 'dpkg -s scaleft-server-tools | grep installed' != \"\" ]; then exit 0; else exit 1; fi"
                },
                "5-RemoveDisableAutoStartIfExist": {
                  "command": "rm /etc/sft/disable-autostart",
                  "test": "if [ ! -e /etc/sft/disable-autostart ] ; then exit 1 ; else exit 0 ; fi"
                },
                "6-StartScaleFTService": {
                  "command": "service sftd start",
                  "test": "if ps aux | grep [s]ftd ; then exit 1 ; else exit 0 ; fi"
                }
              }
            },
            "SSMInstall": {
              "commands": {
                "1-DownloadInstallSSM": {
                  "command": { "Fn::Join": [ "", ["curl https://amazon-ssm-",{ "Ref": "AWS::Region" },".s3.amazonaws.com/latest/debian_amd64/amazon-ssm-agent.deb -o /tmp/amazon-ssm-agent.deb && dpkg -i /tmp/amazon-ssm-agent.deb"]]},
                  "test": "if [ 'dpkg -s amazon-ssm-agent | grep installed' != \"\" ]; then true; else false; fi"
                },
                "2-StartSSMAgentService": {
                  "command": "service amazon-ssm-agent start",
                  "test": "if [ $(ps aux | grep amazon-ssm-agent | grep -v grep) !=\"\" ]; then true; else false; fi"
                }
              }
            },
            "install_Logs": {
              "files": {
                "/etc/awslogs/awslogs.conf": {
                  "content": { "Fn::Join": [ "", [
                    "[general]\n",
                    "state_file= /var/awslogs/state/agent-state\n",

                    "[/var/log/cloud-init.log]\n",
                    "file = /var/log/cloud-init.log\n",
                    "log_group_name = ", { "Ref": "CloudFormationLogs" }, "\n",
                    "log_stream_name = {instance_id}/cloud-init.log\n",
                    "initial_position = start_of_file\n",
                    "datetime_format = \n",

                    "[/var/log/cloud-init-output.log]\n",
                    "file = /var/log/cloud-init-output.log\n",
                    "log_group_name = ", { "Ref": "CloudFormationLogs" }, "\n",
                    "log_stream_name = {instance_id}/cloud-init-output.log\n",
                    "initial_position = start_of_file\n",
                    "datetime_format = \n",

                    "[/var/log/cfn-init.log]\n",
                    "file = /var/log/cfn-init.log\n",
                    "log_group_name = ", { "Ref": "CloudFormationLogs" }, "\n",
                    "log_stream_name = {instance_id}/cfn-init.log\n",
                    "initial_position = start_of_file\n",
                    "datetime_format = \n",

                    "[/var/log/cfn-hup.log]\n",
                    "file = /var/log/cfn-hup.log\n",
                    "log_group_name = ", { "Ref": "CloudFormationLogs" }, "\n",
                    "log_stream_name = {instance_id}/cfn-hup.log\n",
                    "initial_position = start_of_file\n",
                    "datetime_format = \n",

                    "[/var/log/cfn-wire.log]\n",
                    "file = /var/log/cfn-wire.log\n",
                    "log_group_name = ", { "Ref": "CloudFormationLogs" }, "\n",
                    "log_stream_name = {instance_id}/cfn-wire.log\n",
                    "initial_position = start_of_file\n",
                    "datetime_format = \n",

                    "[/var/log/apache2]\n",
                    "file = /var/log/apache2/access*\n",
                    "log_group_name = ", { "Fn::Join": [ "", [{ "Ref": "CloudFormationLogs"},"-ApplicationAccess" ]]}, "\n",
                    "log_stream_name = {instance_id}/apache2\n",
                    "initial_position = start_of_file\n",
                    "datetime_format = %d/%b/%Y:%H:%M:%S\n",

                    "[/var/log/apache2]\n",
                    "file = /var/log/apache2/error*\n",
                    "log_group_name = ", { "Fn::Join": [ "", [{ "Ref": "CloudFormationLogs"},"-ApplicationErrors" ]]}, "\n",
                    "log_stream_name = {instance_id}/apache2\n",
                    "initial_position = start_of_file\n",
                    "datetime_format = %d/%b/%Y:%H:%M:%S\n"
                  ] ] },
                  "mode": "0444",
                  "owner": "root",
                  "group": "root"
                },
                "/etc/awslogs/awscli.conf": {
                  "content": { "Fn::Join": [ "", [
                    "[plugins]\n",
                    "cwlogs = cwlogs\n",
                    "[default]\n",
                    "region = ", { "Ref" : "AWS::Region" }, "\n"
                  ] ] },
                  "mode": "0444",
                  "owner": "root",
                  "group": "root"
                }
              },
              "commands" : {
                "1-CreateStateDirectory" : {
                  "command" : "mkdir -p /var/awslogs/state",
                  "test": "if [ ! -d /var/awslogs/state ]; then false; else true; fi"
                },
                "1-CreateConfDirectory": {
                  "command": "mkdir -p /etc/awslogs",
                  "ignoreErrors": "false"
                },
                "3-Install": {
                  "command": { "Fn::Join": [ "", ["curl https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py -O; chmod +x awslogs-agent-setup.py; python ./awslogs-agent-setup.py -n -c /etc/awslogs/awslogs.conf --region ", { "Ref": "AWS::Region" }]]},
                  "ignoreErrors": "false"
                }
              }
            },
            "webInstall": {
              "packages": {
                "apt": {
                  "apache2": []
                }
              },
              "services": {
                "sysvinit": {
                  "apache2": {
                    "enabled": "true",
                    "ensureRunning": "true"
                  }
                }
              }
            },
            "finalize": {
              "commands": {
                "1-CFNSignal": {
                  "command": { "Fn::Join": ["", ["/usr/local/bin/cfn-signal -e 0 ", "--stack ", { "Ref": "AWS::StackName" }, " --resource AutoScaleGrp", " --region ", { "Ref": "AWS::Region" }]]},
                  "ignoreErrors": "true"
                }
              }
            }
          }
        }
    },
    "EC2ScaleUpPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": { "Ref": "AutoScaleGrp" },
        "Cooldown": { "Ref": "EC2ScaleUpCooldown" },
        "ScalingAdjustment": { "Ref": "EC2ScaleUpAdjustment" }
      }
    },
    "EC2ScaleDownPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": { "Ref": "AutoScaleGrp" },
        "Cooldown": { "Ref": "EC2ScaleDownCooldown" },
        "ScalingAdjustment": {"Fn::Join": [ "", ["-", { "Ref": "EC2ScaleDownAdjustment" }]]}
      }
    },
    "CPUAlarmHigh": {
     "Type": "AWS::CloudWatch::Alarm",
     "Properties": {
        "AlarmDescription": { "Fn::Join": [" ", ["Scale-up if CPU",
          { "Ref": "CwCpuHighOperator" },
          { "Ref": "CwCpuHighThreshold"}, "% for",
          { "Ref": "CwCpuHighPeriod"}, "seconds",
          { "Ref": "CwCpuHighEvaluations"}, "times."]]
        },
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": {"Ref": "CwCpuHighPeriod"},
        "EvaluationPeriods": {"Ref": "CwCpuHighEvaluations"},
        "Threshold": {"Ref": "CwCpuHighThreshold"},
        "AlarmActions": [ { "Ref": "EC2ScaleUpPolicy" } ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": { "Ref": "AutoScaleGrp" }
          }
        ],
        "ComparisonOperator": {"Ref": "CwCpuHighOperator"}
      }
    },
    "CPUAlarmLow": {
     "Type": "AWS::CloudWatch::Alarm",
     "Properties": {
        "AlarmDescription": { "Fn::Join": [" ", ["Scale-down if CPU",
          { "Ref": "CwCpuLowOperator" },
          { "Ref": "CwCpuLowThreshold"}, "% for",
          { "Ref": "CwCpuLowPeriod"}, "seconds",
          { "Ref": "CwCpuLowEvaluations"}, "times."]]
        },
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": {"Ref": "CwCpuLowPeriod"},
        "EvaluationPeriods": {"Ref": "CwCpuLowEvaluations"},
        "Threshold": {"Ref": "CwCpuLowThreshold"},
        "AlarmActions": [ { "Ref": "EC2ScaleDownPolicy" } ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": { "Ref": "AutoScaleGrp" }
          }
        ],
        "ComparisonOperator": {"Ref": "CwCpuLowOperator"}
      }
    },
    "UnHealthyHostCountAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Condition": "ELBEnabled",
      "Properties": {
        "AlarmDescription": "Unhealthy Host count is above threshold, creating ticket.",
        "MetricName": "UnHealthyHostCount",
        "Namespace": "AWS/ELB",
        "Statistic": "Average",
        "Period": "60",
        "EvaluationPeriods": "10",
        "Threshold": "1",
        "Unit": "Count",
        "AlarmActions": [{ "Fn::Join": [":", [ "arn", "aws", "sns", { "Ref": "AWS::Region" }, { "Ref": "AWS::AccountId" }, "rackspace-support"]] }],
        "Dimensions": [
          {
            "Name": "LoadBalancerName",
            "Value": { "Ref": "ElasticLoadBalancer" }
          }
        ],
        "ComparisonOperator": "GreaterThanThreshold"
      }
    },
    "ElasticLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Condition": "ELBEnabled",
      "Properties": {
        "LoadBalancerName": { "Ref": "APPGroupName" },
        "Scheme": { "Ref": "ELBScheme" },
        "Subnets": { "Ref": "ELBSubnet" },
        "SecurityGroups": { "Ref": "ELBSecurityGroupList" },
        "CrossZone": "True",
        "AccessLoggingPolicy": { "Fn::If": [ "isELBLogging",
          {
            "S3BucketName": { "Ref": "ELBLogBucketName" },
            "S3BucketPrefix": "FrontendELBLogs",
            "Enabled": "True",
            "EmitInterval": 5
          },
          { "Ref": "AWS::NoValue" }
        ]},
        "ConnectionDrainingPolicy": { "Fn::If": [ "isELBConnectionDrain", { "Enabled": "True", "Timeout": "60" }, { "Ref": "AWS::NoValue" } ] },
        "LBCookieStickinessPolicy": [{ "Fn::If": [ "ELBCookieStickinessPolicy",
          {
            "PolicyName": "CookieBasedPolicy",
            "CookieExpirationPeriod": {"Ref": "ELBCookieExpirationPeriod"}
          },
          {"Ref": "AWS::NoValue"}
        ]
        }],
        "Listeners": {"Fn::If": ["isELB2ndListener", [
          {
            "PolicyNames": [{ "Fn::If": ["ELBCookieStickinessPolicy","CookieBasedPolicy",{"Ref": "AWS::NoValue"}]}],
            "LoadBalancerPort": {"Ref": "ELBLoadBalancerPort"},
            "Protocol": {"Ref": "ELBLoadBalancerProtocol"},
            "InstancePort": {"Ref": "ELBInstancePort"},
            "InstanceProtocol": {"Ref": "ELBInstanceProtocol"},
            "SSLCertificateId": { "Fn::If": [ "SSLEnabled", { "Ref": "SSLIdCert"  }, { "Ref": "AWS::NoValue" } ] }
          },
          {
            "PolicyNames": [{"Fn::If": ["ELBCookieStickinessPolicy", "CookieBasedPolicy", {"Ref": "AWS::NoValue"}] }],
            "LoadBalancerPort": {"Ref": "ELB2ndLoadBalancerPort"},
            "Protocol": {"Ref": "ELB2ndLoadBalancerProtocol"},
            "InstancePort": {"Ref": "ELB2ndInstancePort"},
            "InstanceProtocol": {"Ref": "ELB2ndInstanceProtocol"},
            "SSLCertificateId": { "Fn::If": [ "SSL2ndEnabled", { "Ref": "SSLIdCert"  }, { "Ref": "AWS::NoValue" } ] }
          }
        ],
        [
          {
            "PolicyNames": [{ "Fn::If": ["ELBCookieStickinessPolicy","CookieBasedPolicy",{"Ref": "AWS::NoValue"}]}],
            "LoadBalancerPort": {"Ref": "ELBLoadBalancerPort"},
            "Protocol": {"Ref": "ELBLoadBalancerProtocol"},
            "InstancePort": {"Ref": "ELBInstancePort"},
            "InstanceProtocol": {"Ref": "ELBInstanceProtocol"},
            "SSLCertificateId": { "Fn::If": [ "SSLEnabled", { "Ref": "SSLIdCert"  }, { "Ref": "AWS::NoValue" } ] }
          }
        ]
        ]},
        "HealthCheck": {
          "Target": { "Ref": "ELBHealthTarget"},
          "HealthyThreshold": { "Ref": "ELBHealthyThreshold"},
          "UnhealthyThreshold": { "Ref": "ELBUnHealthyThreshold"},
          "Interval": { "Ref": "ELBHealthInterval"},
          "Timeout": { "Ref": "ELBHealthTimeout"}
        },
        "Tags": [
          { "Key": "ServiceProvider", "Value": "Rackspace" },
          { "Key": "Environment", "Value": { "Ref": "Environment"} },
          { "Key": "Name", "Value": { "Fn::Join": ["", [{ "Ref": "AWS::StackName" }, "AppGroupName"]] } }
        ]
      }
    },
    "InstanceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [{
            "Effect": "Allow",
            "Principal": {
              "Service": ["ec2.amazonaws.com"]
            },
            "Action": ["sts:AssumeRole"]
          }]
        },
        "Path": "/"
      }
    },
    "InstanceRolePolicies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "InstanceRole",
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "cloudformation:Describe*"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "ssm:DescribeAssociation",
                "ssm:CreateAssociation",
                "ssm:GetDocument",
                "ssm:ListAssociations",
                "ssm:UpdateAssociationStatus",
                "ssm:UpdateInstanceInformation"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "ec2messages:AcknowledgeMessage",
                "ec2messages:DeleteMessage",
                "ec2messages:FailMessage",
                "ec2messages:GetEndpoint",
                "ec2messages:GetMessages",
                "ec2messages:SendReply"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "cloudwatch:PutMetricData"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "ec2:DescribeInstanceStatus"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "ds:CreateComputer",
                "ds:DescribeDirectories"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:DescribeLogGroups",
                "logs:DescribeLogStreams",
                "logs:PutLogEvents"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:PutObject",
                "s3:GetObject",
                "s3:AbortMultipartUpload",
                "s3:ListMultipartUploadParts",
                "s3:ListBucketMultipartUploads"
              ],
              "Resource": "*"
            }]
        },
        "Roles": [{
          "Ref": "InstanceRole"
        }]
      }
    },
    "InstanceRoleInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [{
          "Ref": "InstanceRole"
        }]
      }
    }
  },

  "Outputs": {
    "URL": {
      "Description": "URL of the test website",
      "Value": { "Fn::Join": [ "", [ "http://", { "Fn::GetAtt": [ "ElasticLoadBalancer", "DNSName" ] } ] ] }, "Condition": "ELBEnabled"
    }
  }
}

{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Rackspace Hosting - Elastic Load Balancer version 1 (Classic) Template.",
  "Metadata": {
    "Version": "v1.0",
    "Comments": "Generated by Ansible",
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
      {
        "Label": { "default": "ELBv1 GENERAL CONFIGURATION:" },
        "Parameters": [
            "LoadBalancerName", "Scheme", "CrossZone", "Environment",
            "Subnets", "SecurityGroups", "ELBTimeOut"
        ]
      },
      {
        "Label": { "default": "TARGETS CONFIGURATION:" },
        "Parameters": [
            "ASGTargets", "Instances"
        ]
      },
      {
        "Label": { "default": "TARGET HEALTH MONITORING CONFIGURATION:" },
        "Parameters": [
          "ELBHealthTarget", "ELBHealthyThreshold", "ELBHealthTimeout",
          "ELBUnHealthyThreshold", "ELBHealthInterval", "ELBCookieExpirationPeriod",
          "ELBConnectionDrainingTimeout"
        ]
      },
      {
        "Label": { "default": "LISTENER 1 CONFIGURATION:" },
        "Parameters": [
          "ELBInstancePort", "ELBInstanceProtocol", "ELBLoadBalancerPort",
          "ELBLoadBalancerProtocol"
        ]
      },
      {
        "Label": { "default": "LISTENER 2 CONFIGURATION:" },
        "Parameters": [
          "ELBSecondaryListener", "ELB2ndInstancePort", "ELB2ndInstanceProtocol",
          "ELB2ndLoadBalancerPort", "ELB2ndLoadBalancerProtocol"
        ]
      },
      {
        "Label": { "default": "SSL CONFIGURATION:" },
        "Parameters": [
          "SSLIdCert"
        ]
      },
      {
        "Label": { "default": "S3 Logging Configuration (OPTIONAL)." },
        "Parameters": [
          "CreateLoggingBucket", "ELBS3BucketName", "ELBS3BucketPrefix",
          "ELBLogAccessControl"
        ]
      }
      ],
      "ParameterLabels": {
        "LoadBalancerName": { "default": "Load Balancer Name" },
        "ELBS3BucketName": { "default": "S3 Bucket Name" },
        "SecurityGroups": { "default": "Security Groups" },
        "ELBTimeOut": { "default": "Load Balancer Timeout" },
        "ASGTargets": { "default": "ELBv1 Targets Are ASG" },
        "CreateLoggingBucket": { "default": "New S3 Logging Bucket"},
        "ELBS3BucketPrefix": { "default": "S3 Bucket Prefix"},
        "ELBLogAccessControl": { "default": "S3 Log Access Control" },
        "ELBConnectionDrainingTimeout": { "default": "Draining Timeout" },
        "ELBInstancePort": { "default": "Instance Port" },
        "ELBInstanceProtocol": { "default": "Instance Protocol" },
        "ELBLoadBalancerProtocol": { "default": "Load Balancer Protocol" },
        "ELBLoadBalancerPort": { "default": "Load Balancer Port" },
        "ELBSecondaryListener": { "default": "Use Listener 2" },
        "ELB2ndLoadBalancerPort": { "default": "Load Balancer Port" },
        "ELB2ndLoadBalancerProtocol": { "default": "Load Balancer Protocol" },
        "ELB2ndInstancePort": { "default": "Instance Port" },
        "ELB2ndInstanceProtocol": { "default": "Instance Protocol" },
        "ELBHealthTarget": { "default": "Health Target" },
        "ELBHealthyThreshold": { "default": "Healthy Threshold" },
        "ELBUnHealthyThreshold": { "default": "UnHealthy Threshold" },
        "ELBHealthInterval": { "default": "Health Check Interval" },
        "ELBHealthTimeout": { "default": "Health Timeout" },
        "ELBCookieExpirationPeriod": { "default": "Cookie Expiration" },
        "SSLIdCert": { "default": "SSL Certificate ID" },
        "CrossZone": { "default": "Cross Zone" }
      }
    }
  },
  "Parameters": {
    "LoadBalancerName": {
      "Description": "This name must be unique within your set of load balancers for the region.",
      "Type": "String",
      "Default": "NewELBv1",
      "AllowedPattern": "^[^-][\\w-]+",
      "MaxLength": "32"
    },
    "ASGTargets": {
      "Description": "Are the targets part of an auto scaling group.",
      "Type": "String",
      "Default": "True",
      "AllowedValues": ["True", "False"]
    },
    "Instances": {
      "Description": "A list of EC2 instance IDs for the load balancer. Use when not assigned to auto scale group.",
      "Type": "CommaDelimitedList",
      "Default": ""
    },
    "CreateLoggingBucket": {
      "Description": "Create a new S3 logging bucket",
      "Type": "String",
      "Default": "false",
      "AllowedValues": ["true", "false"]
    },
    "ELBS3BucketPrefix": {
      "Description": "The prefix for the location in the S3 bucket. If you don't specify a prefix, the access logs are stored in the root of the bucket.",
      "Type": "String",
      "Default": "FrontendELBLogs"
    },
   "ELBS3BucketName": {
     "Type": "String",
     "Description": "The name of the bucket to use for ELB logs. Must be unique.",
     "Default": "",
     "ConstraintDescription": "The bucket name must contain only lowercase letters, numbers, periods (.), and dashes (-)."
    },
    "ELBLogAccessControl": {
      "Description": "Define ACL for Bucket",
      "Type": "String",
      "Default": "BucketOwnerFullControl",
      "AllowedValues": [  "AuthenticatedRead", "AwsExecRead", "BucketOwnerRead", "BucketOwnerFullControl", "LogDeliveryWrite", "Private", "PublicRead", "PublicReadWrite" ],
      "ConstraintDescription": "Must be either AuthenticatedRead, AwsExecRead, BucketOwnerRead, BucketOwnerFullControl, LogDeliveryWrite, Private, PublicRead or PublicReadWrite."
    },
    "ELBConnectionDrainingTimeout": {
      "Type": "Number",
      "Default": "0",
      "Description": "Set the timeout value for elastic loadbalancer draining policy if desired. OPTIONAL",
      "MinValue": "0",
      "MaxValue": "3600"
    },
    "Scheme": {
      "Type": "String",
      "Default": "internet-facing",
      "AllowedValues": ["internet-facing", "internal"],
      "Description": "Specifies whether to create an internal ELB or a public facing one."
    },
    "Subnets": {
      "Type": "List<AWS::EC2::Subnet::Id>",
      "Description": "A list of subnet IDs in your virtual private cloud (VPC) to attach to your load balancer."
    },
    "ELBInstancePort": {
      "Type": "String",
      "Default": "80",
      "Description": "Specifies the TCP port on which the instance server is listening."
    },
    "ELBInstanceProtocol": {
      "Type": "String",
      "Default": "HTTP",
      "AllowedValues": ["HTTP", "HTTPS", "TCP", "SSL"],
      "Description": "Specifies the protocol to use for routing traffic to back-end instances HTTP / HTTPS / TCP / SSL."
    },
    "ELBLoadBalancerProtocol": {
      "Type": "String",
      "Default": "HTTP",
      "AllowedValues": ["HTTP", "HTTPS", "TCP", "SSL"],
      "Description": "Specifies the protocol to use for the Load Balancer HTTP / HTTPS / TCP / SSL."
    },
    "ELBLoadBalancerPort": {
      "Type": "String",
      "Default": "80",
      "Description": "Specifies the external load balancer port number."
    },
    "ELBSecondaryListener": {
      "Type": "String",
      "Default": "False",
      "AllowedValues": ["True", "False"],
      "Description": "Enable Secondary Listener on the Load Balancer"
    },
    "ELB2ndLoadBalancerPort": {
      "Type": "String",
      "Default": "80",
      "Description": "Specifies the 2nd external load balancer port number."
    },
    "ELB2ndLoadBalancerProtocol": {
      "Type": "String",
      "Default": "HTTP",
      "AllowedValues": ["HTTP", "HTTPS", "TCP", "SSL"],
      "Description": "Specifies the 2nd protocol to use for the Load Balancer HTTP / HTTPS / TCP / SSL."
    },
    "ELB2ndInstancePort": {
      "Type": "String",
      "Default": "80",
      "Description": "Specifies the 2nd TCP port on which the instance server is listening."
    },
    "ELB2ndInstanceProtocol": {
      "Type": "String",
      "Default": "HTTP",
      "AllowedValues": ["HTTP", "HTTPS", "TCP", "SSL"],
      "Description": "Specifies the 2nd protocol to use for routing traffic to back-end instances HTTP / HTTPS / TCP / SSL."
    },
    "ELBHealthTarget": {
      "Type": "String",
      "Default": "HTTP:80/",
      "Description": "Protocol & port check on instance. TCP:5000 | SSL:5000 || HTTP(S) = HTTP:80/path/to/my/file."
    },
    "ELBHealthyThreshold": {
      "Type": "String",
      "Default": "3",
      "Description": "Consecutive successful checks before marking instance healthy."
    },
    "ELBUnHealthyThreshold": {
      "Type": "String",
      "Default": "3",
      "Description": "Consecutive failed checks before marking instance unhealthy."
    },
    "ELBHealthInterval": {
      "Type": "String",
      "Default": "30",
      "Description": "Seconds between health checks."
    },
    "ELBHealthTimeout": {
      "Type": "String",
      "Default": "5",
      "Description": "Number of seconds during which no response means a failed health probe."
    },
    "ELBCookieExpirationPeriod": {
      "Type": "String",
      "Default": "",
      "Description": "Generates a stickiness policy with sticky session lifetimes controlled by a specified expiration period. Leave blank not to use."
    },
    "Environment": {
      "Description": "Application environment for which this network is being created. e.g. Development/Production.",
      "Type": "String",
      "Default": "Development",
      "AllowedValues": ["Development", "Integration", "PreProduction", "Production", "Staging", "Test"]
    },
    "SSLIdCert": {
      "Description": "SSL Certificate Name. Full ARN required.",
      "Type": "String",
      "Default": "0",
      "ConstraintDescription": "Must be an existing SSL Name."
    },
    "SecurityGroups": {
      "Description": "A list of security groups assigned to your load balancer within your virtual private cloud (VPC).",
      "Type": "List<AWS::EC2::SecurityGroup::Id>"
    },
    "CrossZone": {
      "Description": "Whether cross-zone load balancing is enabled for the load balancer.",
      "Type": "String",
      "Default": "true",
      "AllowedValues": ["true", "false"]
    },
    "ELBTimeOut": {
      "Description": "The time (in seconds) that a connection to the load balancer can remain idle, which means no data is sent over the connection. After the specified time, the load balancer closes the connection.",
      "Type": "Number",
      "Default": "0",
      "MinValue": "0",
      "MaxValue": "3600"
    }
  },
  "Conditions": {
    "SSLEnabled": {"Fn::Or": [
      {"Fn::Equals": [{"Ref": "ELBLoadBalancerProtocol"}, "SSL"]},
      {"Fn::Equals": [{"Ref": "ELBLoadBalancerProtocol"}, "HTTPS"]}]
    },
    "SSL2ndEnabled": {"Fn::Or": [
      {"Fn::Equals": [{"Ref": "ELB2ndLoadBalancerProtocol"}, "SSL"]},
      {"Fn::Equals": [{"Ref": "ELB2ndLoadBalancerProtocol"}, "HTTPS"]}]
    },
    "isELB2ndListener": {"Fn::Equals": [{"Ref": "ELBSecondaryListener"}, "True"]},
    "ELBCookieStickinessPolicy": { "Fn::Not": [{"Fn::Equals": [{"Ref": "ELBCookieExpirationPeriod"}, ""]}] },
    "isELBLogging": { "Fn::Not": [ { "Fn::Equals": [ { "Ref": "ELBS3BucketName" }, "" ] } ] },
    "isELBConnectionDrain": { "Fn::Not": [ { "Fn::Equals": [ { "Ref": "ELBConnectionDrainingTimeout" }, "0" ] } ] },
    "NewS3Bucket": { "Fn::Equals": [ { "Ref": "CreateLoggingBucket" }, "true" ]},
    "ELBTimeOutTimeout": { "Fn::Not": [ { "Fn::Equals": [ { "Ref": "ELBTimeOut" }, "0" ] } ] },
    "isNotASG": { "Fn::Equals": [ { "Ref": "ASGTargets" }, "False" ]}
  },
  "Resources": {
    "S3BucketwithLogging": {
      "Type": "AWS::S3::Bucket",
      "Condition": "NewS3Bucket",
        "Properties": {
          "BucketName": { "Ref": "ELBS3BucketName" },
          "AccessControl": { "Ref": "ELBLogAccessControl" },
          "Tags": [
            { "Key": "Name", "Value": { "Ref": "AWS::StackName" } },
            { "Key": "ServiceProvider", "Value": "Rackspace"},
            { "Key": "Environment", "Value": { "Ref": "Environment"} }
          ]
      }
    },
    "ELBS3LoggingBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Condition": "isELBLogging",
      "Properties": {
        "Bucket": { "Ref": "ELBS3BucketName" },
        "PolicyDocument": {
          "Version": "2008-10-17",
          "Statement": [ {
            "Sid": "ELBAccessLogs20130930",
            "Effect": "Allow",
            "Resource": { "Fn::Join": ["", ["arn:aws:s3:::", { "Ref": "ELBS3BucketName" }, "/*"]]},
            "Principal": "*",
            "Action": [
              "s3:PutObject"
            ]
          }]
        }
      }
    },
    "UnHealthyHostCountAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Unhealthy Host count is above threshold, creating ticket.",
        "MetricName": "UnHealthyHostCount",
        "Namespace": "AWS/ELB",
        "Statistic": "Average",
        "Period": "60",
        "EvaluationPeriods": "10",
        "Threshold": "1",
        "Unit": "Count",
        "AlarmActions": [{ "Fn::Join": [":", [ "arn", "aws", "sns", { "Ref": "AWS::Region" }, { "Ref": "AWS::AccountId" }, "rackspace-support"]] }],
        "Dimensions": [
          {
            "Name": "LoadBalancerName",
            "Value": { "Ref": "ELBv1" }
          }
        ],
        "ComparisonOperator": "GreaterThanThreshold"
      }
    },
    "ELBv1": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "LoadBalancerName": { "Ref": "LoadBalancerName" },
        "Scheme": { "Ref": "Scheme" },
        "Subnets": { "Ref": "Subnets" },
        "SecurityGroups": { "Ref": "SecurityGroups" },
        "CrossZone": { "Ref": "CrossZone" },
        "Instances": {
          "Fn::If": [
            "isNotASG",
            { "Ref": "Instances" },
            { "Ref": "AWS::NoValue" }
          ]
        },
        "ConnectionSettings": {
          "Fn::If": [ "ELBTimeOutTimeout", { "IdleTimeout": { "Ref": "ELBTimeOut" } }, { "Ref": "AWS::NoValue" }]
        },
        "AccessLoggingPolicy": { "Fn::If": [ "isELBLogging",
          {
            "S3BucketName": { "Ref": "ELBS3BucketName" },
            "S3BucketPrefix": { "Ref": "ELBS3BucketPrefix" },
            "Enabled": "True",
            "EmitInterval": 5
          },
          { "Ref": "AWS::NoValue" }
          ]
        },
        "ConnectionDrainingPolicy": { "Fn::If": [ "isELBConnectionDrain", { "Enabled": "True", "Timeout": { "Ref": "ELBConnectionDrainingTimeout" } }, { "Ref": "AWS::NoValue" } ] },
        "LBCookieStickinessPolicy": [{ "Fn::If": [ "ELBCookieStickinessPolicy",
          {
            "PolicyName": "CookieBasedPolicy",
            "CookieExpirationPeriod": {"Ref": "ELBCookieExpirationPeriod"}
          },
          {"Ref": "AWS::NoValue"}
          ]
        }
        ],
        "Listeners": {"Fn::If": ["isELB2ndListener", [
          {
            "PolicyNames": [{ "Fn::If": ["ELBCookieStickinessPolicy","CookieBasedPolicy",{"Ref": "AWS::NoValue"}]}],
            "LoadBalancerPort": {"Ref": "ELBLoadBalancerPort"},
            "Protocol": {"Ref": "ELBLoadBalancerProtocol"},
            "InstancePort": {"Ref": "ELBInstancePort"},
            "InstanceProtocol": {"Ref": "ELBInstanceProtocol"},
            "SSLCertificateId": { "Fn::If": [ "SSLEnabled", { "Ref": "SSLIdCert"  }, { "Ref": "AWS::NoValue" } ] }
          },
          {
            "PolicyNames": [{"Fn::If": ["ELBCookieStickinessPolicy", "CookieBasedPolicy", {"Ref": "AWS::NoValue"}] }],
            "LoadBalancerPort": {"Ref": "ELB2ndLoadBalancerPort"},
            "Protocol": {"Ref": "ELB2ndLoadBalancerProtocol"},
            "InstancePort": {"Ref": "ELB2ndInstancePort"},
            "InstanceProtocol": {"Ref": "ELB2ndInstanceProtocol"},
            "SSLCertificateId": { "Fn::If": [ "SSL2ndEnabled", { "Ref": "SSLIdCert"  }, { "Ref": "AWS::NoValue" } ] }
          }
        ],
        [
          {
            "PolicyNames": [{ "Fn::If": ["ELBCookieStickinessPolicy","CookieBasedPolicy",{"Ref": "AWS::NoValue"}]}],
            "LoadBalancerPort": {"Ref": "ELBLoadBalancerPort"},
            "Protocol": {"Ref": "ELBLoadBalancerProtocol"},
            "InstancePort": {"Ref": "ELBInstancePort"},
            "InstanceProtocol": {"Ref": "ELBInstanceProtocol"},
            "SSLCertificateId": { "Fn::If": [ "SSLEnabled", { "Ref": "SSLIdCert"  }, { "Ref": "AWS::NoValue" } ] }
          }
        ]
        ]},
        "HealthCheck": {
          "Target": { "Ref": "ELBHealthTarget"},
          "HealthyThreshold": { "Ref": "ELBHealthyThreshold"},
          "UnhealthyThreshold": { "Ref": "ELBUnHealthyThreshold"},
          "Interval": { "Ref": "ELBHealthInterval"},
          "Timeout": { "Ref": "ELBHealthTimeout"}
        },
        "Tags": [
          { "Key": "ServiceProvider", "Value": "Rackspace" },
          { "Key": "Environment", "Value": { "Ref": "Environment"} },
          { "Key": "Name", "Value": { "Fn::Join": ["", [{ "Ref": "AWS::StackName" }, "ELB"]] } }
        ]
      }
    }
  },
  "Outputs": {
    "outputELBv1": {
      "Description": "Elastic load balancer ID.",
      "Value": { "Ref": "ELBv1" }
    },
    "outputUnHealthyHostCountAlarm": {
      "Description": "UnHealthy Host Count Alarm Name.",
      "Value": { "Ref": "UnHealthyHostCountAlarm" }
    },
    "outputS3BucketName": {
      "Description": "S3 Logging Bucket Name.",
      "Value": { "Ref": "S3BucketwithLogging" },
      "Condition": "NewS3Bucket"
    }
  }
}

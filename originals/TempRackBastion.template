{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Temporary single instance Rackspace Bastion Template. **WARNING** This template creates one or more Amazon EC2  instances and an Elastic Load Balancer. You will be billed for the AWS resources used if you create a stack from this template.",
  "Metadata": {
    "Version": "v0.2",
    "Comments": "Generated by Ansible"
  },
  "Parameters": {
    "VPCID" : {
      "Type" : "AWS::EC2::VPC::Id",
      "Description" : "Select Virtual Private Cloud ID"
    },
    "Environment": {
      "Description": "Application environment for which this network is being created. e.g. Development/Production.",
      "Type": "String",
      "Default": "Development",
      "AllowedValues": ["Development", "Integration", "PreProduction", "Production", "Staging", "Test"]
    },
    "BastionSubnet" : {
      "Type" : "AWS::EC2::Subnet::Id",
      "Description" : "Public Subnet Bastion is in."
    },
    "InstancesPublicIP" : {
      "Type" : "String",
      "Default" : "True",
      "AllowedValues" : ["False", "True"],
      "Description" : "Specifies whether to launch instances with public IP addresses in your VPC"
    },
    "SSHLocation" : {
      "Description" : "The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "^([0-9]+\\.){3}[0-9]+\\/[0-9]+$",
      "ConstraintDescription": "Must be a valid CIDR range of the form x.x.x.x/x."
    },
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription" : "Must be the name of an existing EC2 KeyPair."
    },
    "InstanceType" : {
      "Type" : "String",
      "Default" : "t2.micro",
      "AllowedValues": [ "t2.micro"],
      "ConstraintDescription": "Must be a valid EC2 instance type. Default is t2.micro",
      "Description" : "Select instance type"
    },
    "BastionName": {
      "Description": "EC2 Server Instance Name",
      "Type": "String",
      "Default": "RackBastion",
      "ConstraintDescription": "Must follow normal EC2 syntax conventions"
    },
    "EBSVolumeSize": {
      "Default": "0",
      "Description" : "Volume Size for EBS Volume",
      "Type": "Number",
      "MinValue": "0"
    },
    "EBSVolumeType": {
      "Default": "standard",
      "Description" : "Type of EBS Volume. If using IO1 you must make EBS Volume size 100 or more.",
      "Type": "String",
      "AllowedValues": ["io1", "standard", "gp2"]
    },
    "EBSVolumeIops": {
      "Default": "10",
      "Description" : "IOPS for EBSVolume. If using IO1 you must make EBS Volume size 100 or more.",
      "Type": "Number",
      "MinValue": "0"
    },
    "VPCSecurityGroupIds": {
      "Description": "Existing security groups being used by App ec2 instances. If no AppSG, enter the VPC Default.",
      "Type": "List<AWS::EC2::SecurityGroup::Id>",
      "Default": ""
    }
  },
  "Mappings": {
    "AWSInstanceType2Arch" : { "t2.micro"    : { "Arch" : "HVM64"  } },
    "AWSRegionArch2AMI" : {
      "us-west-1" : {"64": "ami-de347abe"},
      "us-east-1" : {"64": "ami-c481fad3"},
      "ap-northeast-1" : {"64": "ami-1a15c77b"},
      "sa-east-1" : {"64": "ami-b777e4db"},
      "ap-northeast-2" : {"64": "ami-a04297ce"},
      "ap-southeast-1" : {"64": "ami-7243e611"},
      "ap-southeast-2" : {"64": "ami-55d4e436"},
      "us-west-2" : {"64": "ami-b04e92d0"},
      "ap-south-1" : {"64": "ami-cacbbea5"},
      "eu-central-1" : {"64": "ami-0044b96f"},
      "eu-west-1" : {"64": "ami-d41d58a7"}
    }
  },
  "Conditions": {
    "UseEBSVolume": {"Fn::Not": [{"Fn::Equals" : [{"Ref" : "EBSVolumeSize"}, "0"]}]},
    "DefineIOPS":   {"Fn::Equals": [{"Ref": "EBSVolumeType"},"io1"]}
  },
  "Resources": {
    "BastionServer": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "KeyName": { "Ref": "KeyName" },
        "NetworkInterfaces": [
          {
            "AssociatePublicIpAddress": {"Ref": "InstancesPublicIP"},
            "DeviceIndex": "0",
            "SubnetId": { "Ref" : "BastionSubnet" },
            "GroupSet": {"Ref" : "VPCSecurityGroupIds"}
          }
        ],
        "ImageId": { "Fn::FindInMap": [ "AWSRegionArch2AMI", { "Ref": "AWS::Region" }, "64" ] },
        "InstanceType": { "Ref": "InstanceType" },
        "UserData": { "Fn::Base64" : { "Fn::Join" : ["", [
             "#!/bin/bash -xe\n",
             "yum update -y aws-cfn-bootstrap\n",

             "/opt/aws/bin/cfn-init -v ",
             "         --stack ", { "Ref" : "AWS::StackName" },
             "         --resource BastionServer ",
             "         --region ", { "Ref" : "AWS::Region" }, "\n"
           ]]}},
        "Tags" : [
          { "Key": "Name", "Value": { "Ref" : "BastionName" } },
          { "Key": "ServiceProvider", "Value": "Rackspace"},
          { "Key": "Environment", "Value": { "Ref": "Environment"} }
        ]
      },
      "Metadata" : {
        "Comment" : "Setup Instance and install RackKeys",
        "AWS::CloudFormation::Init" : {
          "config" : {
            "commands": {
              "1-InitialUrl": {
                  "command": "mkdir -p /etc/sft && echo 'InitialURL: https://scaleft.api.manage.rackspace.com' > /etc/sft/sftd.yaml",
                  "test": "ls /etc/sft/sftd.yaml 2> /dev/null ; if [ $? -eq 0 ] ; then exit 1 ; else exit 0 ; fi"
                },
                "2-TrustKey": {
                  "command": "rpm --import https://www.scaleft.com/dl/scaleft_rpm_key.asc"
                },
                "3-AddRepo": {
                  "command": "curl -C - https://www.scaleft.com/dl/scaleft_yum.repo | tee /etc/yum.repos.d/scaleft.repo",
                  "test": "ls /etc/yum.repos.d/scaleft.repo 2> /dev/null ; if [ $? -eq 0 ] ; then exit 1 ; else exit 0 ; fi"
                },
                "4-InstallScaleFT": {
                  "command": "bash /root/scaleft_yum.sh",
                  "test": "if [ 'rpm -qa | grep -qw scaleft-server-tools*' != \"\" ]; then exit 0; else exit 1; fi"
                },
                "5-RemoveDisableAutoStartIfExist": {
                  "command": "rm /etc/sft/disable-autostart",
                  "test": "ls /etc/sft/disable-autostart 2> /dev/null ; if [ $? -eq 0 ] ; then exit 0 ; else exit 1 ; fi"
                },
                "6-StartScaleFTService": {
                  "command": "service sftd start",
                  "test": "if ps aux | grep [s]ftd ; then exit 1 ; else exit 0 ; fi"
                },
                "7-DownloadSSMAgent":{
                  "command": { "Fn::Join": [ "", ["curl https://amazon-ssm-", { "Ref" : "AWS::Region" }, ".s3.amazonaws.com/latest/linux_amd64/amazon-ssm-agent.rpm -o /tmp/amazon-ssm-agent.rpm"]]},
                  "test": "ls /tmp/amazon-ssm-agent.rpm 2> /dev/null ; if [ $? -eq 0 ] ; then exit 1 ; else exit 0 ; fi"
                },
                "8-InstallSSMAgent":{
                  "command": "yum install -y /tmp/amazon-ssm-agent.rpm",
                  "test": "if [ 'rpm -qa | grep -qw amazon-ssm-agent*' != \"\" ]; then exit 0; else exit 1; fi"
                },
                "9-StartSSMAgentService": {
                  "command": "service amazon-ssm-agent start",
                  "test": "status amazon-ssm-agent | grep stop > /dev/null && [ $? -eq 0 ]"
                }
            }
          }
        }
      }
    },
    "Volume" : {
       "Condition" : "UseEBSVolume",
       "Type" : "AWS::EC2::Volume",
       "Properties" : {
         "Size" : { "Ref" : "EBSVolumeSize" },
         "VolumeType" : { "Ref" : "EBSVolumeType" },
         "Iops" : { "Fn::If": [ "DefineIOPS", { "Ref": "EBSVolumeIops" }, { "Ref" : "AWS::NoValue" } ]},
         "AvailabilityZone" : { "Fn::GetAtt" : [ "BastionServer", "AvailabilityZone" ] },
         "Tags" : [
           { "Key": "Name", "Value": { "Ref" : "AWS::StackName" } },
           { "Key": "ServiceProvider", "Value": "Rackspace"},
           { "Key": "Environment", "Value": { "Ref": "Environment"} }
         ]
       }
    },
    "MountPoint" : {
       "Condition" : "UseEBSVolume",
       "Type" : "AWS::EC2::VolumeAttachment",
       "Properties" : {
          "InstanceId" : { "Ref" : "BastionServer" },
          "VolumeId"  : { "Ref" : "Volume" },
          "Device" : "/dev/sdh"
       }
    }
  },

  "Outputs" : {
    "InstanceId" : {
      "Description" : "InstanceId of the newly created EC2 RAXBastionServer",
      "Value" : { "Ref" : "BastionServer" }
    },
    "AZ" : {
      "Description" : "Availability Zone of the newly created EC2 instance",
      "Value" : { "Fn::GetAtt" : [ "BastionServer", "AvailabilityZone" ] }
    },
    "PublicDNS" : {
      "Description" : "Public DNSName of the newly created EC2 instance",
      "Value" : { "Fn::GetAtt" : [ "BastionServer", "PublicDnsName" ] }
    },
    "PublicIP" : {
      "Description" : "Public IP address of the newly created EC2 instance",
      "Value" : { "Fn::GetAtt" : [ "BastionServer", "PublicIp" ] }
    }
  }
}

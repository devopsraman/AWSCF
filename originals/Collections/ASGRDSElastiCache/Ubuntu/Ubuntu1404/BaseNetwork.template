{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Rackspace Hosting - Base VPC, Network, and NAT gateways. Please be aware that this template will create resources for which you will be charged.",
  "Metadata": {
    "Version": {
      "Version": "v1.1.0"
    },
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [{"Parameters": ["AvailabilityZoneCount", "PublicSubnetAZ1", "PublicSubnetAZ2", "PublicSubnetAZ3", "PrivateSubnetAZ1", "PrivateSubnetAZ2", "PrivateSubnetAZ3"], "Label": {"default": "Network Configuration"}}, {"Parameters": ["InstanceTenancy"], "Label": {"default": "EC2 Configuration"}}],
      "ParameterLabels": {
        "CIDRRange": {
          "default": "What should VPC CIDR Range be?"
        }
      }
    },
    "Comments": {
      "Comments": "Generated by Ansible"
    }
  },
  "Parameters": {
    "InstanceTenancy": {
      "Default": "default",
      "ConstraintDescription": "Must be either 'default' for multi-tenant hypervisor or 'dedicated' for single tenant hypervisor.",
      "Type": "String",
      "Description": "VPC default for single tenant (dedicated) vs multi-tenant (default) hypervisor. Overrides instance level tenancy option.",
      "AllowedValues": ["default", "dedicated"]
    },
    "AvailabilityZoneCount": {
      "Default": "2 AZs :: 4 Subnets",
      "ConstraintDescription": "Must be either 2 or 3.",
      "Type": "String",
      "Description": "Number of Availability Zones (3 AZs needs a use case)",
      "AllowedValues": ["2 AZs :: 4 Subnets", "3 AZs :: 6 Subnets"]
    },
    "PrivateSubnetAZ1": {
      "ConstraintDescription": "Must be a valid CIDR range of the form x.x.x.x/x.",
      "Description": "Private IP subnet used for AZ1.  Default \"172.18.32.0/21\"",
      "Default": "172.18.32.0/21",
      "MinLength": "9",
      "AllowedPattern": "^([0-9]+\\.){3}[0-9]+\\/[0-9]+$",
      "MaxLength": "18",
      "Type": "String"
    },
    "PrivateSubnetAZ3": {
      "ConstraintDescription": "Must be a valid CIDR range of the form x.x.x.x/x.",
      "Description": "(Conditional) Private IP subnet used for AZ3.  Default \"172.18.48.0/21\"",
      "Default": "172.18.48.0/21",
      "MinLength": "9",
      "AllowedPattern": "^([0-9]+\\.){3}[0-9]+\\/[0-9]+$",
      "MaxLength": "18",
      "Type": "String"
    },
    "PrivateSubnetAZ2": {
      "ConstraintDescription": "Must be a valid CIDR range of the form x.x.x.x/x.",
      "Description": "Private IP subnet used for AZ2.  Default \"172.18.40.0/21\"",
      "Default": "172.18.40.0/21",
      "MinLength": "9",
      "AllowedPattern": "^([0-9]+\\.){3}[0-9]+\\/[0-9]+$",
      "MaxLength": "18",
      "Type": "String"
    },
    "Environment": {
      "Default": "Development",
      "Type": "String",
      "Description": "Application environment for which this network is being created. e.g. Development/Production",
      "AllowedValues": ["Development", "Integration", "PreProduction", "Production", "Staging", "Test"]
    },
    "PublicSubnetAZ1": {
      "ConstraintDescription": "Must be a valid CIDR range of the form x.x.x.x/x.",
      "Description": "Public IP subnet used for AZ1.  Default \"172.18.0.0/22\"",
      "Default": "172.18.0.0/22",
      "MinLength": "9",
      "AllowedPattern": "^([0-9]+\\.){3}[0-9]+\\/[0-9]+$",
      "MaxLength": "18",
      "Type": "String"
    },
    "PublicSubnetAZ2": {
      "ConstraintDescription": "Must be a valid CIDR range of the form x.x.x.x/x.",
      "Description": "Public IP subnet used for AZ2.  Default \"172.18.4.0/22\"",
      "Default": "172.18.4.0/22",
      "MinLength": "9",
      "AllowedPattern": "^([0-9]+\\.){3}[0-9]+\\/[0-9]+$",
      "MaxLength": "18",
      "Type": "String"
    },
    "PublicSubnetAZ3": {
      "ConstraintDescription": "Must be a valid CIDR range of the form x.x.x.x/x.",
      "Description": "(Conditional) Public IP subnet used for AZ3.  Default \"172.18.8.0/22\"",
      "Default": "172.18.8.0/22",
      "MinLength": "9",
      "AllowedPattern": "^([0-9]+\\.){3}[0-9]+\\/[0-9]+$",
      "MaxLength": "18",
      "Type": "String"
    },
    "CIDRRange": {
      "ConstraintDescription": "Must be a valid CIDR range of the form x.x.x.x/x.",
      "Description": "The IP address space to be used for this VPC, in CIDR notation",
      "Default": "172.18.0.0/16",
      "MinLength": "9",
      "AllowedPattern": "^([0-9]+\\.){3}[0-9]+\\/[0-9]+$",
      "MaxLength": "18",
      "Type": "String"
    },
    "VPNGateway": {
      "Default": "False",
      "Type": "String",
      "Description": "Creates a virtual private gateway. A virtual private gateway is the VPC-side endpoint for your VPN connection.",
      "AllowedValues": ["False", "True"]
    }
  },
  "Mappings": {

  },
  "Conditions": {
    "Create3AZs": {
      "Fn::Equals": [{"Ref": "AvailabilityZoneCount"}, "3 AZs :: 6 Subnets"]
    },
    "CreateVPNGateway": {
      "Fn::Equals": [{"Ref": "VPNGateway"}, "True"]
    }
  },
  "Resources": {
    "EIPNATAZ3": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc"
      },
      "Condition": "Create3AZs"
    },
    "VPCBase": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "InstanceTenancy": {
          "Ref": "InstanceTenancy"
        },
        "EnableDnsSupport": "True",
        "CidrBlock": {
          "Ref": "CIDRRange"
        },
        "EnableDnsHostnames": "True",
        "Tags": [
          {"Value": "Rackspace", "Key": "ServiceProvider"},
          {"Value": {"Fn::Join": ["", [{"Ref": "AWS::StackName"}, "VPC"]]}, "Key": "Name"},
          {"Value": {"Ref": "Environment"}, "Key": "Environment"}
        ]
      }
    },
    "EIPNATAZ1": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc"
      }
    },
    "VGAIGWBase": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "VPCBase"
        },
        "InternetGatewayId": {
          "Ref": "IGWBase"
        }
      }
    },
    "NATAZ3": {
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicNetAZ3"
        },
        "AllocationId": {
          "Fn::GetAtt": ["EIPNATAZ3", "AllocationId"]
        }
      },
      "Condition": "Create3AZs",
      "DependsOn": "VGAIGWBase"
    },
    "NATAZ1": {
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicNetAZ1"
        },
        "AllocationId": {
          "Fn::GetAtt": ["EIPNATAZ1", "AllocationId"]
        }
      },
      "DependsOn": "VGAIGWBase"
    },
    "PrivateNetAZ1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPCBase"
        },
        "AvailabilityZone": {
          "Fn::Select": ["0", {"Fn::GetAZs": {"Ref": "AWS::Region"}}]
        },
        "CidrBlock": {
          "Ref": "PrivateSubnetAZ1"
        },
        "MapPublicIpOnLaunch": "False",
        "Tags": [
          {"Value": "Rackspace", "Key": "ServiceProvider"},
          {"Value": {"Fn::Join": ["", [{"Ref": "AWS::StackName"}, "PrivateAZ1"]]}, "Key": "Name"},
          {"Value": {"Ref": "Environment"}, "Key": "Environment"},
          {"Value": "private", "Key": "network"}
        ]
      }
    },
    "PrivateNetAZ2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPCBase"
        },
        "AvailabilityZone": {
          "Fn::Select": ["1", {"Fn::GetAZs": {"Ref": "AWS::Region"}}]
        },
        "CidrBlock": {
          "Ref": "PrivateSubnetAZ2"
        },
        "MapPublicIpOnLaunch": "False",
        "Tags": [
          {"Value": "Rackspace", "Key": "ServiceProvider"},
          {"Value": {"Fn::Join": ["", [{"Ref": "AWS::StackName"}, "PrivateAZ2"]]}, "Key": "Name"},
          {"Value": {"Ref": "Environment"}, "Key": "Environment"},
          {"Value": "private", "Key": "network"}
        ]
      }
    },
    "PrivateNetAZ3": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPCBase"
        },
        "AvailabilityZone": {
          "Fn::Select": ["2", {"Fn::GetAZs": {"Ref": "AWS::Region"}}]
        },
        "CidrBlock": {
          "Ref": "PrivateSubnetAZ3"
        },
        "MapPublicIpOnLaunch": "False",
        "Tags": [
          {"Value": "Rackspace", "Key": "ServiceProvider"},
          {"Value": {"Fn::Join": ["", [{"Ref": "AWS::StackName"}, "PrivateAZ3"]]}, "Key": "Name"},
          {"Value": {"Ref": "Environment"}, "Key": "Environment"},
          {"Value": "private", "Key": "network"}
        ]
      },
      "Condition": "Create3AZs"
    },
    "RouteAssociationPrivateAZ3Default": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateNetAZ3"
        },
        "RouteTableId": {
          "Ref": "RouteTablePrivateAZ3"
        }
      },
      "Condition": "Create3AZs"
    },
    "RoutePublicDefault": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "GatewayId": {
          "Ref": "IGWBase"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "RouteTableId": {
          "Ref": "RouteTablePublic"
        }
      },
      "DependsOn": "VGAIGWBase"
    },
    "IGWBase": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {"Value": "Rackspace", "Key": "ServiceProvider"},
          {"Value": {"Fn::Join": ["", [{"Ref": "AWS::StackName"}, "IGW"]]}, "Key": "Name"},
          {"Value": {"Ref": "Environment"}, "Key": "Environment"}
        ]
      }
    },
    "RouteTablePrivateAZ1": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPCBase"
        },
        "Tags": [
          {"Value": "Rackspace", "Key": "ServiceProvider"},
          {"Value": {"Fn::Join": ["", [{"Ref": "AWS::StackName"}, "PrivateAZ1RT"]]}, "Key": "Name"},
          {"Value": {"Ref": "Environment"}, "Key": "Environment"}
        ]
      }
    },
    "RouteTablePrivateAZ3": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPCBase"
        },
        "Tags": [
          {"Value": "Rackspace", "Key": "ServiceProvider"},
          {"Value": {"Fn::Join": ["", [{"Ref": "AWS::StackName"}, "PrivateAZ3RT"]]}, "Key": "Name"},
          {"Value": {"Ref": "Environment"}, "Key": "Environment"}
        ]
      },
      "Condition": "Create3AZs"
    },
    "RouteTablePrivateAZ2": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPCBase"
        },
        "Tags": [
          {"Value": "Rackspace", "Key": "ServiceProvider"},
          {"Value": {"Fn::Join": ["", [{"Ref": "AWS::StackName"}, "PrivateAZ2RT"]]}, "Key": "Name"},
          {"Value": {"Ref": "Environment"}, "Key": "Environment"}
        ]
      }
    },
    "RouteAssociationPublicAZ1Default": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicNetAZ1"
        },
        "RouteTableId": {
          "Ref": "RouteTablePublic"
        }
      }
    },
    "PublicNetAZ3": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPCBase"
        },
        "AvailabilityZone": {
          "Fn::Select": ["2", {"Fn::GetAZs": {"Ref": "AWS::Region"}}]
        },
        "CidrBlock": {
          "Ref": "PublicSubnetAZ3"
        },
        "MapPublicIpOnLaunch": "True",
        "Tags": [
          {"Value": "Rackspace", "Key": "ServiceProvider"},
          {"Value": {"Fn::Join": ["", [{"Ref": "AWS::StackName"}, "PublicAZ3"]]}, "Key": "Name"},
          {"Value": {"Ref": "Environment"}, "Key": "Environment"}
        ]
      },
      "Condition": "Create3AZs"
    },
    "PublicNetAZ2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPCBase"
        },
        "AvailabilityZone": {
          "Fn::Select": ["1", {"Fn::GetAZs": {"Ref": "AWS::Region"}}]
        },
        "CidrBlock": {
          "Ref": "PublicSubnetAZ2"
        },
        "MapPublicIpOnLaunch": "True",
        "Tags": [
          {"Value": "Rackspace", "Key": "ServiceProvider"},
          {"Value": {"Fn::Join": ["", [{"Ref": "AWS::StackName"}, "PublicAZ2"]]}, "Key": "Name"},
          {"Value": {"Ref": "Environment"}, "Key": "Environment"}
        ]
      }
    },
    "PublicNetAZ1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPCBase"
        },
        "AvailabilityZone": {
          "Fn::Select": ["0", {"Fn::GetAZs": {"Ref": "AWS::Region"}}]
        },
        "CidrBlock": {
          "Ref": "PublicSubnetAZ1"
        },
        "MapPublicIpOnLaunch": "True",
        "Tags": [
          {"Value": "Rackspace", "Key": "ServiceProvider"},
          {"Value": {"Fn::Join": ["", [{"Ref": "AWS::StackName"}, "PublicAZ1"]]}, "Key": "Name"},
          {"Value": {"Ref": "Environment"}, "Key": "Environment"}
        ]
      }
    },
    "VPNGatewayResource": {
      "Type": "AWS::EC2::VPNGateway",
      "Properties": {
        "Type": "ipsec.1",
        "Tags": [
          {"Value": "Rackspace", "Key": "ServiceProvider"},
          {"Value": {"Fn::Join": ["", [{"Ref": "AWS::StackName"}, "VPNGateway"]]}, "Key": "Name"},
          {"Value": {"Ref": "Environment"}, "Key": "Environment"}
        ]
      },
      "Condition": "CreateVPNGateway"
    },
    "NATAZ1Route": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "RouteTableId": {
          "Ref": "RouteTablePrivateAZ1"
        },
        "NatGatewayId": {
          "Ref": "NATAZ1"
        }
      }
    },
    "RouteTablePublic": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPCBase"
        },
        "Tags": [
          {"Value": "Rackspace", "Key": "ServiceProvider"},
          {"Value": {"Fn::Join": ["", [{"Ref": "AWS::StackName"}, "PublicRT"]]}, "Key": "Name"},
          {"Value": {"Ref": "Environment"}, "Key": "Environment"}
        ]
      }
    },
    "EIPNATAZ2": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc"
      }
    },
    "RouteAssociationPrivateAZ2Default": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateNetAZ2"
        },
        "RouteTableId": {
          "Ref": "RouteTablePrivateAZ2"
        }
      }
    },
    "RouteAssociationPublicAZ3Default": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicNetAZ3"
        },
        "RouteTableId": {
          "Ref": "RouteTablePublic"
        }
      },
      "Condition": "Create3AZs"
    },
    "NATAZ2Route": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "RouteTableId": {
          "Ref": "RouteTablePrivateAZ2"
        },
        "NatGatewayId": {
          "Ref": "NATAZ2"
        }
      }
    },
    "NATAZ3Route": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "RouteTableId": {
          "Ref": "RouteTablePrivateAZ3"
        },
        "NatGatewayId": {
          "Ref": "NATAZ3"
        }
      },
      "Condition": "Create3AZs"
    },
    "NATAZ2": {
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicNetAZ2"
        },
        "AllocationId": {
          "Fn::GetAtt": ["EIPNATAZ2", "AllocationId"]
        }
      },
      "DependsOn": "VGAIGWBase"
    },
    "RouteAssociationPrivateAZ1Default": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateNetAZ1"
        },
        "RouteTableId": {
          "Ref": "RouteTablePrivateAZ1"
        }
      }
    },
    "RouteAssociationPublicAZ2Default": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicNetAZ2"
        },
        "RouteTableId": {
          "Ref": "RouteTablePublic"
        }
      }
    }
  },
  "Outputs": {
    "outputSubnetPrivateAZ3": {
      "Condition": "Create3AZs",
      "Value": {
        "Ref": "PrivateNetAZ3"
      }
    },
    "outputVPCID": {
      "Value": {
        "Ref": "VPCBase"
      }
    },
    "outputDefaultSG": {
      "Value": {
        "Fn::GetAtt": [
          "VPCBase",
          "DefaultSecurityGroup"
        ]
      }
    },
    "outputRouteTablePublic": {
      "Value": {
        "Ref": "RouteTablePublic"
      }
    },
    "outputPublicSubnets": {
      "Value": {
        "Fn::Join": [
          ",",
          [{"Ref": "PublicNetAZ1"}, {"Ref": "PublicNetAZ2"}, {"Fn::If": ["Create3AZs", {"Ref": "PublicNetAZ3"}, {"Ref": "AWS::NoValue"}]}]
        ]
      }
    },
    "outputElasticIP1": {
      "Value": {
        "Ref": "EIPNATAZ1"
      }
    },
    "outputSubnetPrivateAZ2": {
      "Value": {
        "Ref": "PrivateNetAZ2"
      }
    },
    "outputElasticIP3": {
      "Condition": "Create3AZs",
      "Value": {
        "Ref": "EIPNATAZ3"
      }
    },
    "outputElasticIP2": {
      "Value": {
        "Ref": "EIPNATAZ2"
      }
    },
    "outputPrivateSubnets": {
      "Value": {
        "Fn::Join": [
          ",",
          [{"Ref": "PrivateNetAZ1"}, {"Ref": "PrivateNetAZ2"}, {"Fn::If": ["Create3AZs", {"Ref": "PrivateNetAZ3"}, {"Ref": "AWS::NoValue"}]}]
        ]
      }
    },
    "outputVPNGateway": {
      "Condition": "CreateVPNGateway",
      "Value": {
        "Ref": "VPNGatewayResource"
      }
    },
    "outputEnvironment": {
      "Value": {
        "Ref": "Environment"
      }
    },
    "outputSubnetPublicAZ3": {
      "Condition": "Create3AZs",
      "Value": {
        "Ref": "PublicNetAZ3"
      }
    },
    "outputSubnetPublicAZ2": {
      "Value": {
        "Ref": "PublicNetAZ2"
      }
    },
    "outputSubnetPublicAZ1": {
      "Value": {
        "Ref": "PublicNetAZ1"
      }
    },
    "outputSubnetPrivateAZ1": {
      "Value": {
        "Ref": "PrivateNetAZ1"
      }
    },
    "outputRouteTablePrivateAZ1": {
      "Value": {
        "Ref": "RouteTablePrivateAZ1"
      }
    },
    "outputRouteTablePrivateAZ2": {
      "Value": {
        "Ref": "RouteTablePrivateAZ2"
      }
    },
    "outputRouteTablePrivateAZ3": {
      "Condition": "Create3AZs",
      "Value": {
        "Ref": "RouteTablePrivateAZ3"
      }
    }
  }
}
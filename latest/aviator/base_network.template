{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "base_network.template - Base VPC, Network, and NAT gateways. Please be aware that this template will create resources for which you will be charged.",
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Parameters": [
            "InstanceTenancy"
          ],
          "Label": {
            "default": [
              "EC2 Configuration"
            ]
          }
        },
        {
          "Parameters": [
            "AvailabilityZoneCount",
            "PublicSubnetAZ1",
            "PrivateSubnetAZ1",
            "PrivateSubnetAZ3",
            "PrivateSubnetAZ2",
            "CustomAZList",
            "SecondaryCIDRRange",
            "PublicSubnetAZ2",
            "CIDRRange",
            "PublicSubnetAZ3"
          ],
          "Label": {
            "default": [
              "Network Configuration"
            ]
          }
        },
        {
          "Parameters": [
            "CustomDNSList",
            "CustomDomainName"
          ],
          "Label": {
            "default": "DHCP Option Set parameters"
          }
        }
      ],
      "ParameterLabels": {
        "CustomAZList": {
          "default": "Custom AZ List"
        },
        "SecondaryCIDRRange": {
          "default": "Secondary VPC CIDR Range"
        },
        "CIDRRange": {
          "default": "What should VPC CIDR Range be?"
        }
      }
    }
  },
  "Parameters": {
    "CustomAZList": {
      "Default": "",
      "Type": "CommaDelimitedList",
      "Description": "Ordered list of Availability Zones to use for the VPC.  If not provided, the full AZ list for the region is used. (OPTIONAL)"
    },
    "InstanceTenancy": {
      "Default": "default",
      "Type": "String",
      "ConstraintDescription": "Must be either 'default' for multi-tenant hypervisor or 'dedicated' for single tenant hypervisor.",
      "Description": "VPC default for single tenant (dedicated) vs multi-tenant (default) hypervisor. Overrides instance level tenancy option.",
      "AllowedValues": [
        "default",
        "dedicated"
      ]
    },
    "AvailabilityZoneCount": {
      "Default": "2 AZs :: 4 Subnets",
      "ConstraintDescription": "Must be either 2 or 3.",
      "Type": "String",
      "Description": "Number of Availability Zones (3 AZs needs a use case)",
      "AllowedValues": [
        "1 AZ :: 2 Subnets",
        "2 AZs :: 4 Subnets",
        "3 AZs :: 6 Subnets"
      ]
    },
    "SecondaryCIDRRange": {
      "Description": "The secondary IP address space to be used for this VPC, in CIDR notation.  (OPTIONAL)",
      "Default": "",
      "Type": "String",
      "AllowedPattern": "^([0-9]+\\.){3}[0-9]+\\/(1[6-9]|2[0-8])$||^$",
      "MaxLength": "18",
      "ConstraintDescription": "Must be a valid CIDR range of the form x.x.x.x/x between /16 and /28"
    },
    "PrivateSubnetAZ1": {
      "ConstraintDescription": "Must be a valid CIDR range of the form x.x.x.x/x",
      "Description": "Private IP subnet used for AZ1.  Default \"172.18.0.0/21\"",
      "Default": "172.18.0.0/21",
      "MinLength": "9",
      "AllowedPattern": "^([0-9]+\\.){3}[0-9]+\\/[0-9]+$",
      "MaxLength": "18",
      "Type": "String"
    },
    "PrivateSubnetAZ3": {
      "ConstraintDescription": "Must be a valid CIDR range of the form x.x.x.x/x",
      "Description": "(Conditional) Private IP subnet used for AZ3.  Default \"172.18.16.0/21\"",
      "Default": "172.18.16.0/21",
      "MinLength": "9",
      "AllowedPattern": "^([0-9]+\\.){3}[0-9]+\\/[0-9]+$",
      "MaxLength": "18",
      "Type": "String"
    },
    "PrivateSubnetAZ2": {
      "ConstraintDescription": "Must be a valid CIDR range of the form x.x.x.x/x",
      "Description": "Private IP subnet used for AZ2.  Default \"172.18.8.0/21\"",
      "Default": "172.18.8.0/21",
      "MinLength": "9",
      "AllowedPattern": "^([0-9]+\\.){3}[0-9]+\\/[0-9]+$",
      "MaxLength": "18",
      "Type": "String"
    },
    "Environment": {
      "Default": "Development",
      "Type": "String",
      "Description": "Application environment for which this network is being created. e.g. Development/Production.",
      "AllowedValues": [
        "Development",
        "Integration",
        "PreProduction",
        "Production",
        "Staging",
        "Test"
      ]
    },
    "PublicSubnetAZ1": {
      "ConstraintDescription": "Must be a valid CIDR range of the form x.x.x.x/x",
      "Description": "Public IP subnet used for AZ1.  Default \"172.18.168.0/22\"",
      "Default": "172.18.168.0/22",
      "MinLength": "9",
      "AllowedPattern": "^([0-9]+\\.){3}[0-9]+\\/[0-9]+$",
      "MaxLength": "18",
      "Type": "String"
    },
    "PublicSubnetAZ2": {
      "ConstraintDescription": "Must be a valid CIDR range of the form x.x.x.x/x",
      "Description": "Public IP subnet used for AZ2.  Default \"172.18.172.0/22\"",
      "Default": "172.18.172.0/22",
      "MinLength": "9",
      "AllowedPattern": "^([0-9]+\\.){3}[0-9]+\\/[0-9]+$",
      "MaxLength": "18",
      "Type": "String"
    },
    "CustomDNSList": {
      "Default": "AmazonProvidedDNS",
      "Type": "CommaDelimitedList",
      "Description": "List of DNS Servers to use for the VPC.  'AmazonProvidedDNS' can be used to reference the AWS provided DNS servers. (OPTIONAL)"
    },
    "CIDRRange": {
      "ConstraintDescription": "Must be a valid CIDR range of the form x.x.x.x/x",
      "Description": "The IP address space to be used for this VPC, in CIDR notation",
      "Default": "172.18.0.0/16",
      "MinLength": "9",
      "AllowedPattern": "^([0-9]+\\.){3}[0-9]+\\/[0-9]+$",
      "MaxLength": "18",
      "Type": "String"
    },
    "PublicSubnetAZ3": {
      "ConstraintDescription": "Must be a valid CIDR range of the form x.x.x.x/x",
      "Description": "(Conditional) Public IP subnet used for AZ3.  Default \"172.18.176.0/22\"",
      "Default": "172.18.176.0/22",
      "MinLength": "9",
      "AllowedPattern": "^([0-9]+\\.){3}[0-9]+\\/[0-9]+$",
      "MaxLength": "18",
      "Type": "String"
    },
    "VPNGateway": {
      "Default": "False",
      "Type": "String",
      "Description": "Creates a virtual private gateway. A virtual private gateway is the VPC-side endpoint for your VPN connection.",
      "AllowedValues": [
        "True",
        "False"
      ]
    },
    "CustomDomainName": {
      "Default": "",
      "Type": "String",
      "Description": "The custom Domain name to use for the VPC.  Leave blank to use the default generated domain name.  (OPTIONAL)"
    }
  },
  "Conditions": {
    "Create2AZs": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "AvailabilityZoneCount"
            },
            "1 AZ :: 2 Subnets"
          ]
        }
      ]
    },
    "SetCustomDNS": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Fn::Select": [
                "0",
                {
                  "Ref": "CustomDNSList"
                }
              ]
            },
            ""
          ]
        }
      ]
    },
    "InUsEast1": {
      "Fn::Equals": [
        {
          "Ref": "AWS::Region"
        },
        "us-east-1"
      ]
    },
    "SetSecondaryCIDR": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "SecondaryCIDRRange"
            },
            ""
          ]
        }
      ]
    },
    "CreateVPNGateway": {
      "Fn::Equals": [
        {
          "Ref": "VPNGateway"
        },
        "True"
      ]
    },
    "SetCustomDomainName": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "CustomDomainName"
            },
            ""
          ]
        }
      ]
    },
    "Create3AZs": {
      "Fn::Equals": [
        {
          "Ref": "AvailabilityZoneCount"
        },
        "3 AZs :: 6 Subnets"
      ]
    },
    "SetCustomAZ": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Fn::Select": [
                "0",
                {
                  "Ref": "CustomAZList"
                }
              ]
            },
            ""
          ]
        }
      ]
    }
  },
  "Resources": {
    "DhcpOptions": {
      "Type": "AWS::EC2::DHCPOptions",
      "Properties": {
        "DomainName": {
          "Fn::If": [
            "SetCustomDomainName",
            {
              "Ref": "CustomDomainName"
            },
            {
              "Fn::If": [
                "InUsEast1",
                "ec2.internal",
                {
                  "Fn::Sub": "${AWS::Region}.compute.internal"
                }
              ]
            }
          ]
        },
        "DomainNameServers": {
          "Fn::If": [
            "SetCustomDNS",
            {
              "Ref": "CustomDNSList"
            },
            [
              "AmazonProvidedDNS"
            ]
          ]
        },
        "Tags": [
          {
            "Key": "Environment",
            "Value": {
              "Ref": "Environment"
            }
          },
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName}DHCPOptionSet"
            }
          },
          {
            "Key": "ServiceProvider",
            "Value": "Rackspace"
          }
        ]
      }
    },
    "EIPNATAZ3": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc"
      },
      "Condition": "Create3AZs"
    },
    "VPCBase": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": {
          "Ref": "CIDRRange"
        },
        "EnableDnsSupport": "true",
        "InstanceTenancy": {
          "Ref": "InstanceTenancy"
        },
        "EnableDnsHostnames": "true",
        "Tags": [
          {
            "Key": "Environment",
            "Value": {
              "Ref": "Environment"
            }
          },
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName}VPC"
            }
          },
          {
            "Key": "ServiceProvider",
            "Value": "Rackspace"
          }
        ]
      }
    },
    "EIPNATAZ1": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc"
      }
    },
    "VGAIGWBase": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "VPCBase"
        },
        "InternetGatewayId": {
          "Ref": "IGWBase"
        }
      }
    },
    "NATAZ3": {
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicNetAZ3"
        },
        "AllocationId": {
          "Fn::GetAtt": [
            "EIPNATAZ3",
            "AllocationId"
          ]
        }
      },
      "Condition": "Create3AZs",
      "DependsOn": "VGAIGWBase"
    },
    "NATAZ1": {
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicNetAZ1"
        },
        "AllocationId": {
          "Fn::GetAtt": [
            "EIPNATAZ1",
            "AllocationId"
          ]
        }
      },
      "DependsOn": "VGAIGWBase"
    },
    "PrivateNetAZ1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "Tags": [
          {
            "Key": "Environment",
            "Value": {
              "Ref": "Environment"
            }
          },
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName}PrivateAZ1"
            }
          },
          {
            "Key": "ServiceProvider",
            "Value": "Rackspace"
          },
          {
            "Key": "network",
            "Value": "private"
          }
        ],
        "VpcId": {
          "Ref": "VPCBase"
        },
        "CidrBlock": {
          "Ref": "PrivateSubnetAZ1"
        },
        "MapPublicIpOnLaunch": "false",
        "AvailabilityZone": {
          "Fn::Select": [
            "0",
            {
              "Fn::If": [
                "SetCustomAZ",
                {
                  "Ref": "CustomAZList"
                },
                {
                  "Fn::GetAZs": {
                    "Ref": "AWS::Region"
                  }
                }
              ]
            }
          ]
        }
      }
    },
    "PrivateNetAZ2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "Tags": [
          {
            "Key": "Environment",
            "Value": {
              "Ref": "Environment"
            }
          },
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Fn::If": [
                      "Create2AZs",
                      {
                        "Ref": "AWS::NoValue"
                      },
                      "DONOTUSE-"
                    ]
                  },
                  {
                    "Ref": "AWS::StackName"
                  },
                  "PrivateAZ2"
                ]
              ]
            }
          },
          {
            "Key": "ServiceProvider",
            "Value": "Rackspace"
          },
          {
            "Key": "network",
            "Value": "private"
          }
        ],
        "VpcId": {
          "Ref": "VPCBase"
        },
        "CidrBlock": {
          "Ref": "PrivateSubnetAZ2"
        },
        "MapPublicIpOnLaunch": "false",
        "AvailabilityZone": {
          "Fn::Select": [
            "1",
            {
              "Fn::If": [
                "SetCustomAZ",
                {
                  "Ref": "CustomAZList"
                },
                {
                  "Fn::GetAZs": {
                    "Ref": "AWS::Region"
                  }
                }
              ]
            }
          ]
        }
      }
    },
    "PrivateNetAZ3": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "Tags": [
          {
            "Key": "Environment",
            "Value": {
              "Ref": "Environment"
            }
          },
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName}PrivateAZ3"
            }
          },
          {
            "Key": "ServiceProvider",
            "Value": "Rackspace"
          },
          {
            "Key": "network",
            "Value": "private"
          }
        ],
        "VpcId": {
          "Ref": "VPCBase"
        },
        "CidrBlock": {
          "Ref": "PrivateSubnetAZ3"
        },
        "MapPublicIpOnLaunch": "false",
        "AvailabilityZone": {
          "Fn::Select": [
            "2",
            {
              "Fn::If": [
                "SetCustomAZ",
                {
                  "Ref": "CustomAZList"
                },
                {
                  "Fn::GetAZs": {
                    "Ref": "AWS::Region"
                  }
                }
              ]
            }
          ]
        }
      },
      "Condition": "Create3AZs"
    },
    "RouteAssociationPrivateAZ3Default": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateNetAZ3"
        },
        "RouteTableId": {
          "Ref": "RouteTablePrivateAZ3"
        }
      },
      "Condition": "Create3AZs"
    },
    "RoutePublicDefault": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "GatewayId": {
          "Ref": "IGWBase"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "RouteTableId": {
          "Ref": "RouteTablePublic"
        }
      },
      "DependsOn": "VGAIGWBase"
    },
    "NATAZ1Route": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "NATAZ1"
        },
        "RouteTableId": {
          "Ref": "RouteTablePrivateAZ1"
        }
      }
    },
    "RouteTablePrivateAZ1": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPCBase"
        },
        "Tags": [
          {
            "Key": "Environment",
            "Value": {
              "Ref": "Environment"
            }
          },
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName}PrivateAZ1RT"
            }
          },
          {
            "Key": "ServiceProvider",
            "Value": "Rackspace"
          }
        ]
      }
    },
    "SecondaryVPCCidrBlock": {
      "Type": "AWS::EC2::VPCCidrBlock",
      "Properties": {
        "VpcId": {
          "Ref": "VPCBase"
        },
        "CidrBlock": {
          "Ref": "SecondaryCIDRRange"
        }
      },
      "Condition": "SetSecondaryCIDR"
    },
    "RouteTablePrivateAZ3": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPCBase"
        },
        "Tags": [
          {
            "Key": "Environment",
            "Value": {
              "Ref": "Environment"
            }
          },
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName}PrivateAZ3RT"
            }
          },
          {
            "Key": "ServiceProvider",
            "Value": "Rackspace"
          }
        ]
      },
      "Condition": "Create3AZs"
    },
    "RouteTablePrivateAZ2": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPCBase"
        },
        "Tags": [
          {
            "Key": "Environment",
            "Value": {
              "Ref": "Environment"
            }
          },
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName}PrivateAZ2RT"
            }
          },
          {
            "Key": "ServiceProvider",
            "Value": "Rackspace"
          }
        ]
      }
    },
    "VGAVPNGatewayResource": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "VPCBase"
        },
        "VpnGatewayId": {
          "Ref": "VPNGatewayResource"
        }
      },
      "Condition": "CreateVPNGateway"
    },
    "VPCDHCPOptionsAssociation": {
      "Type": "AWS::EC2::VPCDHCPOptionsAssociation",
      "Properties": {
        "VpcId": {
          "Ref": "VPCBase"
        },
        "DhcpOptionsId": {
          "Ref": "DhcpOptions"
        }
      }
    },
    "RouteAssociationPublicAZ1Default": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicNetAZ1"
        },
        "RouteTableId": {
          "Ref": "RouteTablePublic"
        }
      }
    },
    "PublicNetAZ3": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "Tags": [
          {
            "Key": "Environment",
            "Value": {
              "Ref": "Environment"
            }
          },
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName}PublicAZ3"
            }
          },
          {
            "Key": "ServiceProvider",
            "Value": "Rackspace"
          }
        ],
        "VpcId": {
          "Ref": "VPCBase"
        },
        "CidrBlock": {
          "Ref": "PublicSubnetAZ3"
        },
        "MapPublicIpOnLaunch": "true",
        "AvailabilityZone": {
          "Fn::Select": [
            "2",
            {
              "Fn::If": [
                "SetCustomAZ",
                {
                  "Ref": "CustomAZList"
                },
                {
                  "Fn::GetAZs": {
                    "Ref": "AWS::Region"
                  }
                }
              ]
            }
          ]
        }
      },
      "Condition": "Create3AZs"
    },
    "PublicNetAZ2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "Tags": [
          {
            "Key": "Environment",
            "Value": {
              "Ref": "Environment"
            }
          },
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Fn::If": [
                      "Create2AZs",
                      {
                        "Ref": "AWS::NoValue"
                      },
                      "DONOTUSE-"
                    ]
                  },
                  {
                    "Ref": "AWS::StackName"
                  },
                  "PublicAZ2"
                ]
              ]
            }
          },
          {
            "Key": "ServiceProvider",
            "Value": "Rackspace"
          }
        ],
        "VpcId": {
          "Ref": "VPCBase"
        },
        "CidrBlock": {
          "Ref": "PublicSubnetAZ2"
        },
        "MapPublicIpOnLaunch": "true",
        "AvailabilityZone": {
          "Fn::Select": [
            "1",
            {
              "Fn::If": [
                "SetCustomAZ",
                {
                  "Ref": "CustomAZList"
                },
                {
                  "Fn::GetAZs": {
                    "Ref": "AWS::Region"
                  }
                }
              ]
            }
          ]
        }
      }
    },
    "PublicNetAZ1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "Tags": [
          {
            "Key": "Environment",
            "Value": {
              "Ref": "Environment"
            }
          },
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName}PublicAZ1"
            }
          },
          {
            "Key": "ServiceProvider",
            "Value": "Rackspace"
          }
        ],
        "VpcId": {
          "Ref": "VPCBase"
        },
        "CidrBlock": {
          "Ref": "PublicSubnetAZ1"
        },
        "MapPublicIpOnLaunch": "true",
        "AvailabilityZone": {
          "Fn::Select": [
            "0",
            {
              "Fn::If": [
                "SetCustomAZ",
                {
                  "Ref": "CustomAZList"
                },
                {
                  "Fn::GetAZs": {
                    "Ref": "AWS::Region"
                  }
                }
              ]
            }
          ]
        }
      }
    },
    "VPNGatewayResource": {
      "Type": "AWS::EC2::VPNGateway",
      "Properties": {
        "Type": "ipsec.1",
        "Tags": [
          {
            "Key": "Environment",
            "Value": {
              "Ref": "Environment"
            }
          },
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName}VPNGateway"
            }
          },
          {
            "Key": "ServiceProvider",
            "Value": "Rackspace"
          }
        ]
      },
      "Condition": "CreateVPNGateway"
    },
    "IGWBase": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Environment",
            "Value": {
              "Ref": "Environment"
            }
          },
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName}IGW"
            }
          },
          {
            "Key": "ServiceProvider",
            "Value": "Rackspace"
          }
        ]
      }
    },
    "RouteTablePublic": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPCBase"
        },
        "Tags": [
          {
            "Key": "Environment",
            "Value": {
              "Ref": "Environment"
            }
          },
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName}PublicRT"
            }
          },
          {
            "Key": "ServiceProvider",
            "Value": "Rackspace"
          }
        ]
      }
    },
    "EIPNATAZ2": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc"
      },
      "Condition": "Create2AZs"
    },
    "RouteAssociationPrivateAZ2Default": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateNetAZ2"
        },
        "RouteTableId": {
          "Ref": "RouteTablePrivateAZ2"
        }
      }
    },
    "RouteAssociationPublicAZ3Default": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicNetAZ3"
        },
        "RouteTableId": {
          "Ref": "RouteTablePublic"
        }
      },
      "Condition": "Create3AZs"
    },
    "NATAZ2Route": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "NATAZ2"
        },
        "RouteTableId": {
          "Ref": "RouteTablePrivateAZ2"
        }
      },
      "Condition": "Create2AZs"
    },
    "NATAZ3Route": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "NATAZ3"
        },
        "RouteTableId": {
          "Ref": "RouteTablePrivateAZ3"
        }
      },
      "Condition": "Create3AZs"
    },
    "VPNRoutePropagation": {
      "Type": "AWS::EC2::VPNGatewayRoutePropagation",
      "Properties": {
        "RouteTableIds": [
          {
            "Ref": "RouteTablePublic"
          },
          {
            "Ref": "RouteTablePrivateAZ1"
          },
          {
            "Ref": "RouteTablePrivateAZ2"
          },
          {
            "Fn::If": [
              "Create3AZs",
              {
                "Ref": "RouteTablePrivateAZ3"
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          }
        ],
        "VpnGatewayId": {
          "Ref": "VPNGatewayResource"
        }
      },
      "Condition": "CreateVPNGateway",
      "DependsOn": "VGAVPNGatewayResource"
    },
    "NATAZ2": {
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicNetAZ2"
        },
        "AllocationId": {
          "Fn::GetAtt": [
            "EIPNATAZ2",
            "AllocationId"
          ]
        }
      },
      "Condition": "Create2AZs",
      "DependsOn": "VGAIGWBase"
    },
    "RouteAssociationPrivateAZ1Default": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateNetAZ1"
        },
        "RouteTableId": {
          "Ref": "RouteTablePrivateAZ1"
        }
      }
    },
    "RouteAssociationPublicAZ2Default": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicNetAZ2"
        },
        "RouteTableId": {
          "Ref": "RouteTablePublic"
        }
      }
    }
  },
  "Outputs": {
    "VPCID": {
      "Value": {
        "Ref": "VPCBase"
      }
    },
    "SubnetPrivateAZ3": {
      "Condition": "Create3AZs",
      "Value": {
        "Ref": "PrivateNetAZ3"
      }
    },
    "SubnetPrivateAZ2": {
      "Value": {
        "Ref": "PrivateNetAZ2"
      }
    },
    "SubnetPrivateAZ1": {
      "Value": {
        "Ref": "PrivateNetAZ1"
      }
    },
    "SubnetPublicAZ3": {
      "Condition": "Create3AZs",
      "Value": {
        "Ref": "PublicNetAZ3"
      }
    },
    "PrivateSubnets": {
      "Value": {
        "Fn::Join": [
          ",",
          [
            {
              "Ref": "PrivateNetAZ1"
            },
            {
              "Ref": "PrivateNetAZ2"
            },
            {
              "Fn::If": [
                "Create3AZs",
                {
                  "Ref": "PrivateNetAZ3"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          ]
        ]
      }
    },
    "Environment": {
      "Value": {
        "Ref": "Environment"
      }
    },
    "CIDRRange": {
      "Value": {
        "Ref": "CIDRRange"
      }
    },
    "SubnetPublicAZ1": {
      "Value": {
        "Ref": "PublicNetAZ1"
      }
    },
    "SubnetPublicAZ2": {
      "Value": {
        "Ref": "PublicNetAZ2"
      }
    },
    "PublicSubnets": {
      "Value": {
        "Fn::Join": [
          ",",
          [
            {
              "Ref": "PublicNetAZ1"
            },
            {
              "Ref": "PublicNetAZ2"
            },
            {
              "Fn::If": [
                "Create3AZs",
                {
                  "Ref": "PublicNetAZ3"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          ]
        ]
      }
    },
    "DefaultSG": {
      "Value": {
        "Fn::GetAtt": [
          "VPCBase",
          "DefaultSecurityGroup"
        ]
      }
    },
    "VPNGateway": {
      "Value": {
        "Ref": "VPNGatewayResource"
      },
      "Condition": "CreateVPNGateway"
    },
    "RouteTablePrivateAZ1": {
      "Value": {
        "Ref": "RouteTablePrivateAZ1"
      }
    },
    "RouteTablePrivateAZ3": {
      "Condition": "Create3AZs",
      "Value": {
        "Ref": "RouteTablePrivateAZ3"
      }
    },
    "RouteTablePrivateAZ2": {
      "Value": {
        "Ref": "RouteTablePrivateAZ2"
      }
    },
    "ElasticIP1": {
      "Value": {
        "Ref": "EIPNATAZ1"
      }
    },
    "ElasticIP2": {
      "Condition": "Create2AZs",
      "Value": {
        "Ref": "EIPNATAZ2"
      }
    },
    "ElasticIP3": {
      "Condition": "Create3AZs",
      "Value": {
        "Ref": "EIPNATAZ3"
      }
    },
    "RouteTablePublic": {
      "Value": {
        "Ref": "RouteTablePublic"
      }
    },
    "CidrBlockAssociations": {
      "Value": {
        "Fn::Join": [
          ",",
          {
            "Fn::GetAtt": [
              "VPCBase",
              "CidrBlockAssociations"
            ]
          }
        ]
      },
      "Condition": "SetSecondaryCIDR"
    },
    "RouteTables": {
      "Value": {
        "Fn::Join": [
          ",",
          [
            {
              "Ref": "RouteTablePublic"
            },
            {
              "Ref": "RouteTablePrivateAZ1"
            },
            {
              "Ref": "RouteTablePrivateAZ2"
            },
            {
              "Fn::If": [
                "Create3AZs",
                {
                  "Ref": "RouteTablePrivateAZ3"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          ]
        ]
      }
    }
  }
}
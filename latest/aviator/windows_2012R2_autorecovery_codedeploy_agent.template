{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "windows_2012R2_autorecovery_codedeploy_agent.template - AutoRecovery EC2 Instance. **WARNING** You will be billed for the AWS resources used if you create a stack from this template.",
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Parameters": [
            "SSMInventoryTag",
            "ARInstanceName",
            "Ebs2VolumeSize",
            "IopsVolume2",
            "Iops",
            "PlacementTenancy",
            "SnapshotId",
            "Ebs2VolumeType",
            "EbsVolumeSize",
            "EnableEphemeral",
            "PatchingGroupTag",
            "EBSOptimized",
            "DetailedMonitoring",
            "EbsVolumeType",
            "DisableApiTermination",
            "EncryptEBSVolume"
          ],
          "Label": {
            "default": "EC2 Instances Configuration"
          }
        },
        {
          "Parameters": [
            "AppSubnet",
            "ARInstanceSecurityGroupList"
          ],
          "Label": {
            "default": "Network Configuration"
          }
        }
      ],
      "ParameterLabels": {
        "PatchingGroupTag": {
          "default": "SSM Patching Group"
        },
        "SSMInventoryTag": {
          "default": "Perform SSM Inventory?"
        }
      }
    }
  },
  "Parameters": {
    "InternalRecordName": {
      "Default": "",
      "Type": "String",
      "Description": "Record Name for the new Resource Record in the Internal Hosted Zone"
    },
    "ARInstanceSecurityGroupList": {
      "Type": "List<AWS::EC2::SecurityGroup::Id>",
      "Description": "A list that contains the EC2 security groups to assign to the Amazon EC2 instance"
    },
    "ARInstanceName": {
      "Type": "String",
      "ConstraintDescription": "Must follow normal syntax conventions.",
      "Description": "EC2 Server Instance Name"
    },
    "Environment": {
      "Default": "Development",
      "Type": "String",
      "Description": "Application environment for which this network is being created. e.g. Development/Production.",
      "AllowedValues": [
        "Development",
        "Integration",
        "PreProduction",
        "Production",
        "Staging",
        "Test"
      ]
    },
    "CwCpuHighOperator": {
      "Default": "GreaterThanThreshold",
      "Type": "String",
      "Description": "Math operator used by CloudWatch for alarms and triggers.",
      "AllowedValues": [
        "GreaterThanOrEqualToThreshold",
        "GreaterThanThreshold",
        "LessThanThreshold",
        "LessThanOrEqualToThreshold"
      ]
    },
    "CwCpuHighThreshold": {
      "AllowedPattern": "([0-9]+)",
      "Default": "90",
      "Type": "String",
      "Description": "The value against which the specified statistic is compared.",
      "ConstraintDescription": "Must be a valid integer."
    },
    "CWLogRetention": {
      "Default": "30",
      "Type": "String",
      "ConstraintDescription": "Must be a valid integer.",
      "Description": "The number of days to retain Cloudwatch Logs for this instance.",
      "AllowedValues": [
        "1",
        "3",
        "5",
        "7",
        "14",
        "30",
        "60",
        "90",
        "120",
        "150",
        "180",
        "365",
        "400",
        "545",
        "731",
        "1827",
        "3653"
      ]
    },
    "Ebs2VolumeSize": {
      "Default": "",
      "Type": "String",
      "Description": "Select Second EBS Volume Size in GB."
    },
    "ImageId": {
      "Default": "",
      "Type": "String",
      "Description": "The image ID to be used to build the EC2 Instance. OPTIONAL"
    },
    "IopsVolume2": {
      "Default": "0",
      "Type": "Number",
      "Description": "IOPS value required for use with io1 on secondary EBS volumes. This value should be 3 times the secondary EBS volume size"
    },
    "EBSOptimized": {
      "Default": "False",
      "Type": "String",
      "Description": "Use EBS Optimized.",
      "AllowedValues": [
        "False",
        "True"
      ]
    },
    "AppSubnet": {
      "Type": "AWS::EC2::Subnet::Id",
      "Description": "Subnets for Application"
    },
    "InternalZoneName": {
      "Default": "",
      "Type": "String",
      "Description": "TLD for Internal Hosted Zone"
    },
    "KeyName": {
      "ConstraintDescription": "Must be the name of an existing EC2 KeyPair.",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances."
    },
    "EIPAllocationId": {
      "Default": "",
      "Type": "String",
      "Description": "The AllocationId of the EIP you want to associate with the instance (optional)."
    },
    "CwCpuHighPeriod": {
      "AllowedPattern": "([0-9]+)",
      "Default": "60",
      "Type": "String",
      "Description": "Time the specified statistic is applied. Must be in seconds that is also a multiple of 60.",
      "ConstraintDescription": "Must be a valid integer."
    },
    "SnapshotId": {
      "Default": "",
      "Type": "String",
      "Description": "The Snapshot ID to be used to build the 2nd EBS volume. OPTIONAL"
    },
    "BackupsEnabled": {
      "Default": "False",
      "Type": "String",
      "Description": "Value of the 'Backup' tag, used to assign the EBSSnapper configuration."
    },
    "InstanceType": {
      "Default": "t2.micro",
      "Type": "String",
      "ConstraintDescription": "Must be a valid EC2 instance type. Default is t2.micro",
      "Description": "Select instance type",
      "AllowedValues": [
        "t2.nano",
        "t2.micro",
        "t2.small",
        "t2.medium",
        "t2.large",
        "t2.xlarge",
        "t2.2xlarge",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10xlarge",
        "m4.16xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge",
        "r4.large",
        "r4.xlarge",
        "r4.2xlarge",
        "r4.4xlarge",
        "r4.8xlarge",
        "r4.16xlarge",
        "x1.16xlarge",
        "x1.32xlarge",
        "i2.xlarge",
        "i2.2xlarge",
        "i2.4xlarge",
        "i2.8xlarge",
        "i3.large",
        "i3.xlarge",
        "i3.2xlarge",
        "i3.4xlarge",
        "i3.8xlarge",
        "i3.16xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "g2.2xlarge",
        "g2.8xlarge",
        "g3.4xlarge",
        "g3.8xlarge",
        "g3.16xlarge",
        "p2.xlarge",
        "p2.8xlarge",
        "p2.16xlarge",
        "d2.xlarge",
        "d2.2xlarge",
        "d2.4xlarge",
        "d2.8xlarge",
        "f1.2xlarge",
        "f1.16xlarge"
      ]
    },
    "Ebs2VolumeType": {
      "Default": "gp2",
      "Type": "String",
      "Description": "Select EBS Volume Type.",
      "AllowedValues": [
        "io1",
        "standard",
        "gp2"
      ]
    },
    "EbsVolumeSize": {
      "Default": "60",
      "Type": "String",
      "Description": "Select EBS Volume Size in GB."
    },
    "PlacementTenancy": {
      "Default": "default",
      "Type": "String",
      "Description": "The placement tenancy for EC2 devices",
      "AllowedValues": [
        "dedicated",
        "default",
        "host"
      ]
    },
    "EnableEphemeral": {
      "Default": "False",
      "Type": "String",
      "Description": "Specifies whether to enable ephemeral volumes.",
      "AllowedValues": [
        "False",
        "True"
      ]
    },
    "NotificationTopic": {
      "Default": "",
      "Type": "String",
      "Description": "SNS Topic ARN to notify if there are any alarms. OPTIONAL"
    },
    "InstanceRoleManagedPolicyArns": {
      "Default": "",
      "Type": "String",
      "Description": "A comma delimited list of IAM policy ARNs for the InstanceRole IAM role.  IAM ARNs can be found within the Policies section of the AWS IAM console."
    },
    "PatchingGroupTag": {
      "Default": "",
      "Type": "String",
      "Description": "Group ID to be used by System Manager for Patching (OPTIONAL)"
    },
    "SSMInventoryTag": {
      "Default": "True",
      "Type": "String",
      "Description": "Determines whether Instance is tracked via System Manager Inventory.",
      "AllowedValues": [
        "False",
        "True"
      ]
    },
    "CreationPolicyTimeOut": {
      "Default": "20M",
      "ConstraintDescription": "#H#M#S where each # is the number of hours or minutes or seconds",
      "Type": "String",
      "Description": "Time to wait for the number of signals for the creation policy. H/M/S Hours/Minutes/Seconds"
    },
    "Iops": {
      "Default": "0",
      "Type": "Number",
      "Description": "Iops value required for use with io1 EBS volumes. This value should be 3 times the EBS volume size"
    },
    "DetailedMonitoring": {
      "Default": "True",
      "Type": "String",
      "Description": "Enable Detailed Monitoring.",
      "AllowedValues": [
        "False",
        "True"
      ]
    },
    "CwCpuHighEvaluations": {
      "AllowedPattern": "([0-9]+)",
      "Default": "15",
      "Type": "String",
      "Description": "The number of periods over which data is compared to the specified threshold.",
      "ConstraintDescription": "Must be a valid integer."
    },
    "EbsVolumeType": {
      "Default": "gp2",
      "Type": "String",
      "Description": "Select EBS Volume Type.",
      "AllowedValues": [
        "io1",
        "standard",
        "gp2"
      ]
    },
    "DisableApiTermination": {
      "Default": "False",
      "Type": "String",
      "Description": "Specifies whether the instance can be terminated through the API.",
      "AllowedValues": [
        "False",
        "True"
      ]
    },
    "InternalZoneId": {
      "Default": "",
      "Type": "String",
      "Description": "The Route53 Internal Hosted Zone ID"
    },
    "EncryptEBSVolume": {
      "Default": "False",
      "Type": "String",
      "Description": "Specifies whether to encrypt the EBS volume.",
      "AllowedValues": [
        "False",
        "True"
      ]
    }
  },
  "Conditions": {
    "is2ndEBSVolume": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "Ebs2VolumeSize"
            },
            ""
          ]
        }
      ]
    },
    "isInternalHostedZoneIdProvided": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "InternalZoneId"
            },
            ""
          ]
        }
      ]
    },
    "UseEphemeral": {
      "Fn::Equals": [
        {
          "Ref": "EnableEphemeral"
        },
        "True"
      ]
    },
    "AttachEIP": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "EIPAllocationId"
            },
            ""
          ]
        }
      ]
    },
    "isEBSEncrypted": {
      "Fn::Equals": [
        {
          "Ref": "EncryptEBSVolume"
        },
        "True"
      ]
    },
    "InstanceRolePoliciesSet": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "InstanceRoleManagedPolicyArns"
            },
            ""
          ]
        }
      ]
    },
    "IopsEnabled2": {
      "Fn::Equals": [
        {
          "Ref": "Ebs2VolumeType"
        },
        "io1"
      ]
    },
    "IopsEnabled": {
      "Fn::Equals": [
        {
          "Ref": "EbsVolumeType"
        },
        "io1"
      ]
    },
    "isNotification": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "NotificationTopic"
            },
            ""
          ]
        }
      ]
    },
    "DetailedMonitoring": {
      "Fn::Equals": [
        {
          "Ref": "DetailedMonitoring"
        },
        "True"
      ]
    },
    "isSnapshotId": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "SnapshotId"
            },
            ""
          ]
        }
      ]
    },
    "isImageId": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "ImageId"
            },
            ""
          ]
        }
      ]
    }
  },
  "Mappings": {
    "AWSRegionArch2AMI": {
      "us-east-1": {
        "64": "ami-f6529b8c"
      },
      "us-west-1": {
        "64": "ami-955c6ef5"
      },
      "ap-northeast-2": {
        "64": "ami-82fe5bec"
      },
      "ap-northeast-1": {
        "64": "ami-4d34eb2b"
      },
      "sa-east-1": {
        "64": "ami-5d512f31"
      },
      "ap-southeast-1": {
        "64": "ami-0e13686d"
      },
      "ca-central-1": {
        "64": "ami-8bff47ef"
      },
      "ap-southeast-2": {
        "64": "ami-2013f142"
      },
      "us-west-2": {
        "64": "ami-f318de8b"
      },
      "us-east-2": {
        "64": "ami-80765ae5"
      },
      "ap-south-1": {
        "64": "ami-27286b48"
      },
      "eu-central-1": {
        "64": "ami-e8843b87"
      },
      "eu-west-1": {
        "64": "ami-1ecc1e67"
      },
      "eu-west-2": {
        "64": "ami-4cbba928"
      }
    }
  },
  "Resources": {
    "EIP": {
      "Type": "AWS::EC2::EIPAssociation",
      "Properties": {
        "InstanceId": {
          "Ref": "ARInstance"
        },
        "AllocationId": {
          "Ref": "EIPAllocationId"
        }
      },
      "Condition": "AttachEIP"
    },
    "StatusCheckFailedInstanceAlarmTicket": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "EvaluationPeriods": "10",
        "Dimensions": [
          {
            "Name": "InstanceId",
            "Value": {
              "Ref": "ARInstance"
            }
          }
        ],
        "AlarmActions": [
          {
            "Fn::Sub": "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:rackspace-support-emergency"
          }
        ],
        "AlarmDescription": "Status checks have failed, generating ticket.",
        "Namespace": "AWS/EC2",
        "Period": "60",
        "ComparisonOperator": "GreaterThanThreshold",
        "Statistic": "Minimum",
        "Threshold": "0",
        "OKActions": [
          {
            "Fn::Sub": "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:rackspace-support-emergency"
          }
        ],
        "Unit": "Count",
        "MetricName": "StatusCheckFailed_Instance"
      }
    },
    "InternalRecordSet": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "Comment": {
          "Fn::Sub": "Internal Record Set for ${InternalRecordName}"
        },
        "Name": {
          "Fn::Sub": "${InternalRecordName}.${InternalZoneName}."
        },
        "ResourceRecords": [
          {
            "Fn::GetAtt": [
              "ARInstance",
              "PrivateIp"
            ]
          }
        ],
        "TTL": "300",
        "HostedZoneId": {
          "Ref": "InternalZoneId"
        },
        "Type": "A"
      },
      "Condition": "isInternalHostedZoneIdProvided"
    },
    "InstanceRoleInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "InstanceRole"
          }
        ]
      }
    },
    "InstanceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/",
        "ManagedPolicyArns": {
          "Fn::Split": [
            ",",
            {
              "Fn::Join": [
                ",",
                [
                  "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM",
                  {
                    "Fn::If": [
                      "InstanceRolePoliciesSet",
                      {
                        "Ref": "InstanceRoleManagedPolicyArns"
                      },
                      {
                        "Ref": "AWS::NoValue"
                      }
                    ]
                  }
                ]
              ]
            }
          ]
        },
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": "ec2.amazonaws.com"
              }
            }
          ]
        }
      }
    },
    "ARInstance": {
      "CreationPolicy": {
        "ResourceSignal": {
          "Count": 1,
          "Timeout": {
            "Fn::Sub": "PT${CreationPolicyTimeOut}"
          }
        }
      },
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "<powershell>\n",
                "cfn-init.exe -v --configsets Init --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                " --resource ARInstance --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "</powershell>\n"
              ]
            ]
          }
        },
        "DisableApiTermination": {
          "Ref": "DisableApiTermination"
        },
        "Monitoring": {
          "Ref": "DetailedMonitoring"
        },
        "Tags": [
          {
            "Key": "Backup",
            "Value": {
              "Ref": "BackupsEnabled"
            }
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "Environment"
            }
          },
          {
            "Key": "Name",
            "Value": {
              "Ref": "ARInstanceName"
            }
          },
          {
            "Key": "PatchingGroup",
            "Value": {
              "Ref": "PatchingGroupTag"
            }
          },
          {
            "Key": "SSMInventory",
            "Value": {
              "Ref": "SSMInventoryTag"
            }
          },
          {
            "Key": "ServiceProvider",
            "Value": "Rackspace"
          }
        ],
        "Tenancy": {
          "Ref": "PlacementTenancy"
        },
        "ImageId": {
          "Fn::If": [
            "isImageId",
            {
              "Ref": "ImageId"
            },
            {
              "Fn::FindInMap": [
                "AWSRegionArch2AMI",
                {
                  "Ref": "AWS::Region"
                },
                "64"
              ]
            }
          ]
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "BlockDeviceMappings": {
          "Fn::If": [
            "UseEphemeral",
            [
              {
                "DeviceName": "/dev/sda1",
                "Ebs": {
                  "DeleteOnTermination": "true",
                  "Iops": {
                    "Fn::If": [
                      "IopsEnabled",
                      {
                        "Ref": "Iops"
                      },
                      {
                        "Ref": "AWS::NoValue"
                      }
                    ]
                  },
                  "VolumeType": {
                    "Ref": "EbsVolumeType"
                  },
                  "VolumeSize": {
                    "Ref": "EbsVolumeSize"
                  }
                }
              }
            ],
            [
              {
                "DeviceName": "/dev/sda1",
                "Ebs": {
                  "DeleteOnTermination": "true",
                  "Iops": {
                    "Fn::If": [
                      "IopsEnabled",
                      {
                        "Ref": "Iops"
                      },
                      {
                        "Ref": "AWS::NoValue"
                      }
                    ]
                  },
                  "VolumeType": {
                    "Ref": "EbsVolumeType"
                  },
                  "VolumeSize": {
                    "Ref": "EbsVolumeSize"
                  }
                }
              },
              {
                "DeviceName": "xvdca",
                "NoDevice": {}
              },
              {
                "DeviceName": "xvdcb",
                "NoDevice": {}
              },
              {
                "DeviceName": "xvdcc",
                "NoDevice": {}
              },
              {
                "DeviceName": "xvdcd",
                "NoDevice": {}
              },
              {
                "DeviceName": "xvdce",
                "NoDevice": {}
              },
              {
                "DeviceName": "xvdcf",
                "NoDevice": {}
              },
              {
                "DeviceName": "xvdcg",
                "NoDevice": {}
              },
              {
                "DeviceName": "xvdch",
                "NoDevice": {}
              },
              {
                "DeviceName": "xvdci",
                "NoDevice": {}
              },
              {
                "DeviceName": "xvdcj",
                "NoDevice": {}
              },
              {
                "DeviceName": "xvdck",
                "NoDevice": {}
              },
              {
                "DeviceName": "xvdcl",
                "NoDevice": {}
              },
              {
                "DeviceName": "xvdcm",
                "NoDevice": {}
              },
              {
                "DeviceName": "xvdcn",
                "NoDevice": {}
              },
              {
                "DeviceName": "xvdco",
                "NoDevice": {}
              },
              {
                "DeviceName": "xvdcp",
                "NoDevice": {}
              },
              {
                "DeviceName": "xvdcq",
                "NoDevice": {}
              },
              {
                "DeviceName": "xvdcr",
                "NoDevice": {}
              },
              {
                "DeviceName": "xvdcs",
                "NoDevice": {}
              },
              {
                "DeviceName": "xvdct",
                "NoDevice": {}
              },
              {
                "DeviceName": "xvdcu",
                "NoDevice": {}
              },
              {
                "DeviceName": "xvdcv",
                "NoDevice": {}
              },
              {
                "DeviceName": "xvdcw",
                "NoDevice": {}
              },
              {
                "DeviceName": "xvdcx",
                "NoDevice": {}
              },
              {
                "DeviceName": "xvdcy",
                "NoDevice": {}
              },
              {
                "DeviceName": "xvdcz",
                "NoDevice": {}
              }
            ]
          ]
        },
        "EbsOptimized": {
          "Ref": "EBSOptimized"
        },
        "SsmAssociations": [
          {
            "DocumentName": {
              "Ref": "SSMDocument"
            }
          }
        ],
        "SecurityGroupIds": {
          "Ref": "ARInstanceSecurityGroupList"
        },
        "SubnetId": {
          "Ref": "AppSubnet"
        },
        "IamInstanceProfile": {
          "Ref": "InstanceRoleInstanceProfile"
        },
        "InstanceType": {
          "Ref": "InstanceType"
        }
      },
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "cfnConfig": {
            "services": {
              "windows": {
                "cfn-hup": {
                  "files": [
                    "c:\\cfn\\cfn-hup.conf",
                    "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                  ],
                  "ensureRunning": "true",
                  "enabled": "true"
                }
              }
            },
            "files": {
              "c:\\cfn\\cfn-hup.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[main]\n",
                      "stack={{ StackName }}\n",
                      "region={{ Region }}\n",
                      "interval=1\n"
                    ]
                  ]
                },
                "context": {
                  "StackName": {
                    "Ref": "AWS::StackName"
                  },
                  "Region": {
                    "Ref": "AWS::Region"
                  }
                }
              },
              "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[cfn-auto-reloader-hook]\n",
                      "triggers=post.update\n",
                      "path=Resources.ARInstance.Metadata.AWS::CloudFormation::Init\n",
                      "action=cfn-init.exe --configsets Update --stack {{ StackName }} --resource ARInstance --region {{ Region }}\n",
                      "\n",
                      "[cfn-ebs-hook]\n",
                      "triggers=post.update,post.add\n",
                      "path=Resources.Ebs2VolumeAttachment.PhysicalResourceId\n",
                      "action=cfn-init.exe --configsets Ebsformat --stack {{ StackName }} --resource ARInstance --region {{ Region }}\n"
                    ]
                  ]
                },
                "context": {
                  "StackName": {
                    "Ref": "AWS::StackName"
                  },
                  "Region": {
                    "Ref": "AWS::Region"
                  }
                }
              }
            }
          },
          "webInstall": {
            "commands": {
              "1-Install-IIS": {
                "command": "powershell.exe add-windowsfeature web-webserver -includeallsubfeature",
                "waitAfterCompletion": "0"
              },
              "2-Install-IISTools": {
                "command": "powershell.exe add-windowsfeature web-mgmt-tools -includeallsubfeature",
                "waitAfterCompletion": "0"
              }
            }
          },
          "finalize": {
            "commands": {
              "1-signal-success": {
                "ignoreErrors": "true",
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "cfn-signal.exe -e 0 ",
                      "--stack ",
                      {
                        "Ref": "AWS::StackName"
                      },
                      " --resource ARInstance --region ",
                      {
                        "Ref": "AWS::Region"
                      }
                    ]
                  ]
                },
                "waitAfterCompletion": "0"
              }
            }
          },
          "scaleft": {
            "services": {
              "windows": {
                "scaleft-server-tools": {
                  "ensureRunning": "true",
                  "packages": {
                    "msi": "scaleft-server-tools"
                  },
                  "enabled": "true",
                  "commands": [
                    "1-ConfigureScaleFT"
                  ]
                }
              }
            },
            "files": {
              "C:\\Windows\\System32\\config\\systemprofile\\AppData\\Local\\ScaleFT\\sftd.yaml": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "InitialURL: https://scaleft.api.manage.rackspace.com\n",
                      "LogLevel: WARN\n"
                    ]
                  ]
                }
              },
              "c:\\cfn\\ConfigureScaleFT.ps1": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "$StateDirectory='{{ StateDirectory }}'\n",
                      "$ConfigFile='{{ ConfigFile }}'\n",
                      "$ServiceName='{{ ServiceName }}'\n",
                      "if([bool](Get-Service | ? name -eq $ServiceName)){ Get-Service -Name $ServiceName | Stop-Service }\n",
                      "if (-not (Test-Path $StateDirectory)){\n",
                      "  New-Item -ItemType Directory -Path $StateDirectory\n",
                      "  Set-Content  -Path $(Join-path $StateDirectory $ConfigFile) -Value 'InitialURL: https://scaleft.api.manage.rackspace.com' -Force\n",
                      "  Add-Content -Path $(Join-path $StateDirectory $ConfigFile) -Value 'LogLevel: WARN' -Force\n",
                      "}\n"
                    ]
                  ]
                },
                "context": {
                  "ConfigFile": "sftd.yaml",
                  "ServiceName": "scaleft-server-tools",
                  "StateDirectory": "C:\\Windows\\System32\\config\\systemprofile\\AppData\\Local\\ScaleFT",
                  "installer_url": "https://dist.scaleft.com/server-tools/windows/latest/ScaleFT-Server-Tools-latest.msi"
                }
              }
            },
            "commands": {
              "1-ConfigureScaleFT": {
                "command": "powershell.exe -ExecutionPolicy Bypass -File c:\\cfn\\ConfigureScaleFT.ps1"
              }
            },
            "packages": {
              "msi": {
                "ScaleFT Server Tools": "https://dist.scaleft.com/server-tools/windows/latest/ScaleFT-Server-Tools-latest.msi"
              }
            }
          },
          "codedeploy_agent_install": {
            "packages": {
              "msi": {
                "CodeDeploy Agent Install": {
                  "Fn::Join": [
                    "",
                    [
                      "https://aws-codedeploy-",
                      {
                        "Ref": "AWS::Region"
                      },
                      ".s3.amazonaws.com/latest/codedeploy-agent.msi"
                    ]
                  ]
                }
              }
            }
          },
          "mountEBS": {
            "files": {
              "c:\\cfn\\format-volume.ps1": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "$disks = @()\n",
                      "$disks += get-disk | Where-Object {$_.partitionStyle -eq \"RAW\" -and $_.IsSystem -eq $false}\n",
                      "$disks.foreach({\n",
                      "   set-disk $_.number -isOffline $false\n",
                      "   Initialize-Disk $_.number\n",
                      "   $part = New-Partition -DiskNumber $_.number -UseMaximumSize -AssignDriveLetter\n",
                      "   start-sleep -Seconds 5\n",
                      "   Format-Volume -FileSystem NTFS -Confirm:$false -DriveLetter $part.DriveLetter\n",
                      "})\n"
                    ]
                  ]
                }
              }
            },
            "commands": {
              "1-MountVolume": {
                "command": "powershell.exe -ExecutionPolicy Bypass -File c:\\cfn\\format-volume.ps1"
              }
            }
          },
          "configSets": {
            "Init": [
              "cfnConfig",
              "scaleft",
              "codedeploy_agent_install",
              "finalize"
            ],
            "Ebsformat": [
              "mountEBS"
            ],
            "Update": [
              "cfnConfig",
              "finalize"
            ]
          }
        }
      }
    },
    "InstanceRolePolicies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "InstanceRole",
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "cloudformation:Describe*"
              ],
              "Resource": "*",
              "Effect": "Allow"
            },
            {
              "Action": [
                "ssm:CreateAssociation"
              ],
              "Resource": "*",
              "Effect": "Allow"
            },
            {
              "Action": [
                "cloudwatch:PutMetricData",
                "cloudwatch:GetMetricStatistics",
                "cloudwatch:ListMetrics"
              ],
              "Resource": "*",
              "Effect": "Allow"
            },
            {
              "Action": [
                "ec2:DescribeTags"
              ],
              "Resource": "*",
              "Effect": "Allow"
            }
          ]
        },
        "Roles": [
          {
            "Ref": "InstanceRole"
          }
        ]
      }
    },
    "ApplicationErrorLogs": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "RetentionInDays": {
          "Ref": "CWLogRetention"
        }
      }
    },
    "Ebs2Volume": {
      "Type": "AWS::EC2::Volume",
      "Properties": {
        "AvailabilityZone": {
          "Fn::GetAtt": [
            "ARInstance",
            "AvailabilityZone"
          ]
        },
        "Encrypted": {
          "Fn::If": [
            "isEBSEncrypted",
            "true",
            {
              "Ref": "AWS::NoValue"
            }
          ]
        },
        "VolumeType": {
          "Ref": "Ebs2VolumeType"
        },
        "Iops": {
          "Fn::If": [
            "IopsEnabled2",
            {
              "Ref": "IopsVolume2"
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        },
        "SnapshotId": {
          "Fn::If": [
            "isSnapshotId",
            {
              "Ref": "SnapshotId"
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        },
        "Size": {
          "Ref": "Ebs2VolumeSize"
        }
      },
      "Condition": "is2ndEBSVolume"
    },
    "StatusCheckFailedSystemAlarmTicket": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "EvaluationPeriods": "5",
        "Dimensions": [
          {
            "Name": "InstanceId",
            "Value": {
              "Ref": "ARInstance"
            }
          }
        ],
        "AlarmActions": [
          {
            "Fn::Sub": "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:rackspace-support-emergency"
          }
        ],
        "AlarmDescription": "Status checks have failed for system, generating ticket.",
        "Namespace": "AWS/EC2",
        "Period": "60",
        "ComparisonOperator": "GreaterThanThreshold",
        "Statistic": "Minimum",
        "Threshold": "0",
        "OKActions": [
          {
            "Fn::Sub": "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:rackspace-support-emergency"
          }
        ],
        "Unit": "Count",
        "MetricName": "StatusCheckFailed_System"
      }
    },
    "ApplicationAccessLogs": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "RetentionInDays": {
          "Ref": "CWLogRetention"
        }
      }
    },
    "CloudFormationLogs": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "RetentionInDays": {
          "Ref": "CWLogRetention"
        }
      }
    },
    "StatusCheckFailedInstanceAlarmReboot": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "EvaluationPeriods": "5",
        "Dimensions": [
          {
            "Name": "InstanceId",
            "Value": {
              "Ref": "ARInstance"
            }
          }
        ],
        "AlarmActions": [
          {
            "Fn::Sub": "arn:aws:swf:${AWS::Region}:${AWS::AccountId}:action/actions/AWS_EC2.InstanceId.Reboot/1.0"
          }
        ],
        "AlarmDescription": "Status checks have failed, rebooting system.",
        "Namespace": "AWS/EC2",
        "Period": "60",
        "ComparisonOperator": "GreaterThanThreshold",
        "Statistic": "Minimum",
        "Threshold": "0",
        "Unit": "Count",
        "MetricName": "StatusCheckFailed_Instance"
      }
    },
    "CPUAlarmHigh": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "EvaluationPeriods": {
          "Ref": "CwCpuHighEvaluations"
        },
        "Dimensions": [
          {
            "Name": "InstanceId",
            "Value": {
              "Ref": "ARInstance"
            }
          }
        ],
        "AlarmActions": [
          {
            "Fn::If": [
              "isNotification",
              {
                "Ref": "NotificationTopic"
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          }
        ],
        "AlarmDescription": {
          "Fn::Sub": "CPU Alarm ${CwCpuHighOperator} ${CwCpuHighThreshold}% for ${CwCpuHighPeriod} seconds ${CwCpuHighEvaluations} times."
        },
        "Namespace": "AWS/EC2",
        "Period": {
          "Ref": "CwCpuHighPeriod"
        },
        "ComparisonOperator": {
          "Ref": "CwCpuHighOperator"
        },
        "Statistic": "Average",
        "Threshold": {
          "Ref": "CwCpuHighThreshold"
        },
        "OKActions": [],
        "MetricName": "CPUUtilization"
      }
    },
    "Ebs2VolumeAttachment": {
      "Type": "AWS::EC2::VolumeAttachment",
      "Properties": {
        "InstanceId": {
          "Ref": "ARInstance"
        },
        "Device": "/dev/sdb",
        "VolumeId": {
          "Ref": "Ebs2Volume"
        }
      },
      "Condition": "is2ndEBSVolume"
    },
    "SSMDocument": {
      "Type": "AWS::SSM::Document",
      "Properties": {
        "Content": {
          "schemaVersion": "1.2",
          "runtimeConfig": {
            "aws:cloudWatch": {
              "properties": {
                "EngineConfiguration": {
                  "PollInterval": "00:00:15",
                  "Components": [
                    {
                      "FullName": "AWS.EC2.Windows.CloudWatch.EventLog.EventLogInputComponent,AWS.EC2.Windows.CloudWatch",
                      "Id": "ApplicationEventLog",
                      "Parameters": {
                        "Levels": "1",
                        "LogName": "Application"
                      }
                    },
                    {
                      "FullName": "AWS.EC2.Windows.CloudWatch.EventLog.EventLogInputComponent,AWS.EC2.Windows.CloudWatch",
                      "Id": "SystemEventLog",
                      "Parameters": {
                        "Levels": "7",
                        "LogName": "System"
                      }
                    },
                    {
                      "FullName": "AWS.EC2.Windows.CloudWatch.EventLog.EventLogInputComponent,AWS.EC2.Windows.CloudWatch",
                      "Id": "SecurityEventLog",
                      "Parameters": {
                        "Levels": "7",
                        "LogName": "Security"
                      }
                    },
                    {
                      "FullName": "AWS.EC2.Windows.CloudWatch.EventLog.EventLogInputComponent,AWS.EC2.Windows.CloudWatch",
                      "Id": "ETW",
                      "Parameters": {
                        "Levels": "7",
                        "LogName": "Microsoft-Windows-WinINet/Analytic"
                      }
                    },
                    {
                      "FullName": "AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch",
                      "Id": "IISLogs",
                      "Parameters": {
                        "Encoding": "UTF-8",
                        "CultureName": "en-US",
                        "TimestampFormat": "yyyy-MM-dd HH:mm:ss",
                        "TimeZoneKind": "UTC",
                        "Filter": "",
                        "LineCount": "3",
                        "LogDirectoryPath": "C:\\inetpub\\logs\\LogFiles\\W3SVC1"
                      }
                    },
                    {
                      "FullName": "AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch",
                      "Id": "CustomLogs",
                      "Parameters": {
                        "Encoding": "UTF-8",
                        "CultureName": "en-US",
                        "TimestampFormat": "MM/dd/yyyy HH:mm:ss",
                        "TimeZoneKind": "Local",
                        "Filter": "",
                        "LogDirectoryPath": "C:\\CustomLogs\\"
                      }
                    },
                    {
                      "FullName": "AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch",
                      "Id": "CfnInit",
                      "Parameters": {
                        "Encoding": "UTF-8",
                        "CultureName": "en-US",
                        "TimestampFormat": "yyyy-MM-dd HH:mm:ss,fff",
                        "TimeZoneKind": "Local",
                        "Filter": "cfn-init.log",
                        "LogDirectoryPath": "C:\\cfn\\log"
                      }
                    },
                    {
                      "FullName": "AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch",
                      "Id": "CfnInitCmd",
                      "Parameters": {
                        "Encoding": "UTF-8",
                        "CultureName": "en-US",
                        "TimestampFormat": "yyyy-MM-dd HH:mm:ss,fff",
                        "TimeZoneKind": "Local",
                        "Filter": "cfn-init-cmd.log",
                        "LogDirectoryPath": "C:\\cfn\\log"
                      }
                    },
                    {
                      "FullName": "AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch",
                      "Id": "CfnHup",
                      "Parameters": {
                        "Encoding": "UTF-8",
                        "CultureName": "en-US",
                        "TimestampFormat": "yyyy-MM-dd HH:mm:ss,fff",
                        "TimeZoneKind": "Local",
                        "Filter": "cfn-hup.log",
                        "LogDirectoryPath": "C:\\cfn\\log"
                      }
                    },
                    {
                      "FullName": "AWS.EC2.Windows.CloudWatch.PerformanceCounterComponent.PerformanceCounterInputComponent,AWS.EC2.Windows.CloudWatch",
                      "Id": "PerformanceCounterMemory",
                      "Parameters": {
                        "CategoryName": "Memory",
                        "DimensionName": "InstanceId",
                        "CounterName": "Available MBytes",
                        "DimensionValue": "{instance_id}",
                        "InstanceName": "",
                        "Unit": "Megabytes",
                        "MetricName": "Memory"
                      }
                    },
                    {
                      "FullName": "AWS.EC2.Windows.CloudWatch.PerformanceCounterComponent.PerformanceCounterInputComponent,AWS.EC2.Windows.CloudWatch",
                      "Id": "PerformanceCounterDisk",
                      "Parameters": {
                        "CategoryName": "LogicalDisk",
                        "DimensionName": "InstanceId",
                        "CounterName": "Free Megabytes",
                        "DimensionValue": "{instance_id}",
                        "InstanceName": "C:",
                        "Unit": "Megabytes",
                        "MetricName": "FreeDisk"
                      }
                    },
                    {
                      "FullName": "AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch",
                      "Id": "SQLErrorLogs",
                      "Parameters": {
                        "Encoding": "UTF-16",
                        "CultureName": "en-US",
                        "TimestampFormat": "yyyy-MM-dd HH:mm:ss.ff",
                        "TimeZoneKind": "Local",
                        "Filter": "ERRORLOG*",
                        "LogDirectoryPath": "C:\\Program Files\\Microsoft SQL Server\\MSSQL12.MSSQLSERVER\\MSSQL\\Log"
                      }
                    },
                    {
                      "FullName": "AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch",
                      "Id": "CloudWatchLogsSystem",
                      "Parameters": {
                        "SecretKey": "",
                        "AccessKey": "",
                        "LogGroup": {
                          "Ref": "CloudFormationLogs"
                        },
                        "Region": {
                          "Ref": "AWS::Region"
                        },
                        "LogStream": "{instance_id}/System"
                      }
                    },
                    {
                      "FullName": "AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch",
                      "Id": "CloudWatchLogsApplication",
                      "Parameters": {
                        "SecretKey": "",
                        "AccessKey": "",
                        "LogGroup": {
                          "Ref": "CloudFormationLogs"
                        },
                        "Region": {
                          "Ref": "AWS::Region"
                        },
                        "LogStream": "{instance_id}/Application"
                      }
                    },
                    {
                      "FullName": "AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch",
                      "Id": "CloudWatchLogsSecurity",
                      "Parameters": {
                        "SecretKey": "",
                        "AccessKey": "",
                        "LogGroup": {
                          "Ref": "CloudFormationLogs"
                        },
                        "Region": {
                          "Ref": "AWS::Region"
                        },
                        "LogStream": "{instance_id}/Security"
                      }
                    },
                    {
                      "FullName": "AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch",
                      "Id": "CloudWatchLogsIIS",
                      "Parameters": {
                        "SecretKey": "",
                        "AccessKey": "",
                        "LogGroup": {
                          "Ref": "CloudFormationLogs"
                        },
                        "Region": {
                          "Ref": "AWS::Region"
                        },
                        "LogStream": "{instance_id}/IISLogs"
                      }
                    },
                    {
                      "FullName": "AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch",
                      "Id": "CloudWatchLogsCfnInit",
                      "Parameters": {
                        "SecretKey": "",
                        "AccessKey": "",
                        "LogGroup": {
                          "Ref": "CloudFormationLogs"
                        },
                        "Region": {
                          "Ref": "AWS::Region"
                        },
                        "LogStream": "{instance_id}/cfn-init.log"
                      }
                    },
                    {
                      "FullName": "AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch",
                      "Id": "CloudWatchLogsCfnInitCmd",
                      "Parameters": {
                        "SecretKey": "",
                        "AccessKey": "",
                        "LogGroup": {
                          "Ref": "CloudFormationLogs"
                        },
                        "Region": {
                          "Ref": "AWS::Region"
                        },
                        "LogStream": "{instance_id}/cfn-init-cmd.log"
                      }
                    },
                    {
                      "FullName": "AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch",
                      "Id": "CloudWatchLogsCfnHup",
                      "Parameters": {
                        "SecretKey": "",
                        "AccessKey": "",
                        "LogGroup": {
                          "Ref": "CloudFormationLogs"
                        },
                        "Region": {
                          "Ref": "AWS::Region"
                        },
                        "LogStream": "{instance_id}/cfn-hup.log"
                      }
                    },
                    {
                      "FullName": "AWS.EC2.Windows.CloudWatch.CloudWatch.CloudWatchOutputComponent,AWS.EC2.Windows.CloudWatch",
                      "Id": "CloudWatch",
                      "Parameters": {
                        "SecretKey": "",
                        "AccessKey": "",
                        "NameSpace": "Windows/Default",
                        "Region": {
                          "Ref": "AWS::Region"
                        }
                      }
                    }
                  ],
                  "Flows": {
                    "Flows": [
                      "ApplicationEventLog,CloudWatchLogsApplication",
                      "SystemEventLog,CloudWatchLogsSystem",
                      "SecurityEventLog,CloudWatchLogsSecurity",
                      "IISLogs,CloudWatchLogsIIS",
                      "CfnInit,CloudWatchLogsCfnInit",
                      "CfnInitCmd,CloudWatchLogsCfnInitCmd",
                      "CfnHup,CloudWatchLogsCfnHup",
                      "(PerformanceCounterMemory,PerformanceCounterDisk),CloudWatch"
                    ]
                  }
                }
              },
              "settings": {
                "startType": "Enabled"
              }
            }
          },
          "description": "Enable event log shipping to CloudWatchLogs."
        }
      }
    },
    "StatusCheckFailedSystemAlarmRecover": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "EvaluationPeriods": "2",
        "Dimensions": [
          {
            "Name": "InstanceId",
            "Value": {
              "Ref": "ARInstance"
            }
          }
        ],
        "AlarmActions": [
          {
            "Fn::Sub": "arn:aws:automate:${AWS::Region}:ec2:recover"
          }
        ],
        "AlarmDescription": "Status checks have failed for system, recovering instance",
        "Namespace": "AWS/EC2",
        "Period": "60",
        "ComparisonOperator": "GreaterThanThreshold",
        "Statistic": "Minimum",
        "Threshold": "0",
        "Unit": "Count",
        "MetricName": "StatusCheckFailed_System"
      }
    }
  }
}
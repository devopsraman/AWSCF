{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "centos_6_asg.template - Autoscaling EC2 Instances with Rolling Updates and Notifications. **WARNING** This template creates one or more Amazon EC2  instances and an Elastic Load Balancer. You will be billed for the AWS resources used if you create a stack from this template.",
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Parameters": [
            "CwLowOperator",
            "CwScalingMetric",
            "CwHighPeriod",
            "CwLowPeriod",
            "CwHighOperator",
            "CwHighThreshold",
            "CwLowThreshold",
            "CwLowEvaluations",
            "CwHighEvaluations"
          ],
          "Label": {
            "default": "CloudWatch AutoScaling Alarm Configuration"
          }
        },
        {
          "Parameters": [
            "LoadBalancerNames",
            "TargetGroupARNs"
          ],
          "Label": {
            "default": "ELASTIC LOAD BALANCER CONFIGURATION (OPTIONAL):"
          }
        },
        {
          "Parameters": [
            "Ebs2MountPoint",
            "EBSOptimized",
            "Ebs2VolumeSize",
            "IopsVolume2",
            "ImageId",
            "KeyName",
            "PlacementTenancy",
            "SnapshotId",
            "InstanceType",
            "Ebs2VolumeType",
            "EbsVolumeSize",
            "PatchingGroupTag",
            "SSMInventoryTag",
            "APPGroupName",
            "Iops",
            "DetailedMonitoring",
            "EbsVolumeType",
            "EncryptEBSVolume"
          ],
          "Label": {
            "default": "EC2 Instances Configuration"
          }
        },
        {
          "Parameters": [
            "ASGSecurityGroupList",
            "AppSubnet"
          ],
          "Label": {
            "default": "Network Configuration"
          }
        },
        {
          "Parameters": [
            "ScalingCreateTimeOut",
            "ScalingUpdateTimeOut",
            "ScalingMin",
            "ScalingTermination",
            "EC2ScaleDownCooldown",
            "HealthCheckGracePeriod",
            "HealthCheckType",
            "EC2ScaleUpAdjustment",
            "ScalingNotificationTopic",
            "EC2ScaleDownAdjustment",
            "DesiredCapacity",
            "MinInstancesInService",
            "TerminatedInstances",
            "ScalingMax",
            "EC2ScaleUpCooldown"
          ],
          "Label": {
            "default": "AutoScaling Configuration"
          }
        }
      ],
      "ParameterLabels": {
        "ScalingCreateTimeOut": {
          "default": "Create Signal Timeout"
        },
        "LoadBalancerNames": {
          "default": "ELBv1 (Classic) ELB List"
        },
        "ASGSecurityGroupList": {
          "default": "Security Groups"
        },
        "ScalingUpdateTimeOut": {
          "default": "Update Signal Timeout"
        },
        "EBSOptimized": {
          "default": "EBS Optimized?"
        },
        "ScalingMin": {
          "default": "Mininum Instances"
        },
        "AppSubnet": {
          "default": "App Subnet"
        },
        "ImageId": {
          "default": "Image Id"
        },
        "ScalingTermination": {
          "default": "Termination Count"
        },
        "KeyName": {
          "default": "SSH Key Name"
        },
        "HealthCheckGracePeriod": {
          "default": "Health Check Period"
        },
        "InstanceType": {
          "default": "Instance Type"
        },
        "EbsVolumeSize": {
          "default": "EBS Volume Size"
        },
        "HealthCheckType": {
          "default": "Health Check Type"
        },
        "ScalingNotificationTopic": {
          "default": "Scale Notification Topic"
        },
        "PatchingGroupTag": {
          "default": "SSM Patching Group"
        },
        "TargetGroupARNs": {
          "default": "Target Group ARNs"
        },
        "DesiredCapacity": {
          "default": "Desired Capacity"
        },
        "MinInstancesInService": {
          "default": "Min Instance in Service"
        },
        "SSMInventoryTag": {
          "default": "Perform SSM Inventory?"
        },
        "TerminatedInstances": {
          "default": "Number of Terminated Instances"
        },
        "APPGroupName": {
          "default": "App Group Name"
        },
        "Iops": {
          "default": "IOPS Value"
        },
        "DetailedMonitoring": {
          "default": "Detailed Monitoring?"
        },
        "EbsVolumeType": {
          "default": "EBS Volume Type"
        },
        "ScalingMax": {
          "default": "Maximum Instances"
        },
        "EncryptEBSVolume": {
          "default": "Encrypt EBS?"
        }
      }
    }
  },
  "Parameters": {
    "ScalingCreateTimeOut": {
      "Default": "20M",
      "Type": "String",
      "ConstraintDescription": "#H#M#S where each # is the number of hours or minutes or seconds",
      "Description": "Time to wait for the number of signals equal to ScalingMin. H/M/S Hours/Minutes/Seconds"
    },
    "LoadBalancerNames": {
      "Default": "",
      "Type": "CommaDelimitedList",
      "Description": "A list of Classic load balancers associated with this Auto Scaling group."
    },
    "CwLowOperator": {
      "Default": "LessThanThreshold",
      "Type": "String",
      "Description": "Math operator used by CloudWatch for alarms and triggers.",
      "AllowedValues": [
        "GreaterThanOrEqualToThreshold",
        "GreaterThanThreshold",
        "LessThanThreshold",
        "LessThanOrEqualToThreshold"
      ]
    },
    "ASGSecurityGroupList": {
      "Type": "List<AWS::EC2::SecurityGroup::Id>",
      "Description": "A list that contains the EC2 security groups to assign to the Amazon EC2 instances in the Auto Scaling group."
    },
    "Ebs2MountPoint": {
      "Default": "",
      "Type": "String",
      "Description": "Filesystem Mount point for 2nd EBS volume. Omit to prevent changes to 2nd volume."
    },
    "Environment": {
      "Default": "Development",
      "Type": "String",
      "Description": "Application environment for which this network is being created. e.g. Development/Production.",
      "AllowedValues": [
        "Development",
        "Integration",
        "PreProduction",
        "Production",
        "Staging",
        "Test"
      ]
    },
    "ScalingUpdateTimeOut": {
      "Default": "20M",
      "Type": "String",
      "ConstraintDescription": "#H#M#S where each # is the number of hours or minutes or seconds",
      "Description": "Post update pause before additional Auto Scale resource changes. H/M/S Hours/Minutes/Seconds"
    },
    "CwScalingMetric": {
      "Default": "CPUUtilization",
      "Type": "String",
      "Description": "Select the metric to be used for scaling.",
      "AllowedValues": [
        "CPUUtilization",
        "NetworkIn",
        "NetworkOut"
      ]
    },
    "EBSOptimized": {
      "Default": "False",
      "Type": "String",
      "Description": "Use EBS Optimized.",
      "AllowedValues": [
        "False",
        "True"
      ]
    },
    "ScalingMin": {
      "Default": "1",
      "AllowedPattern": "([0-9]+)",
      "Type": "String",
      "Description": "The minimum size of the Auto Scaling group.",
      "ConstraintDescription": "Must be a valid integer."
    },
    "CWLogRetention": {
      "Default": "30",
      "Type": "String",
      "ConstraintDescription": "Must be a valid integer.",
      "Description": "The number of days to retain Cloudwatch Logs for this Autoscaling Group.",
      "AllowedValues": [
        "1",
        "3",
        "5",
        "7",
        "14",
        "30",
        "60",
        "90",
        "120",
        "150",
        "180",
        "365",
        "400",
        "545",
        "731",
        "1827",
        "3653"
      ]
    },
    "Ebs2VolumeSize": {
      "Default": "",
      "Type": "String",
      "Description": "Select Second EBS Volume Size in GB."
    },
    "EnableRackspaceTicket": {
      "Default": "False",
      "Type": "String",
      "Description": "Specifies whether alarms will generate Rackspace tickets",
      "AllowedValues": [
        "False",
        "True"
      ]
    },
    "CwHighPeriod": {
      "Default": "60",
      "AllowedPattern": "([0-9]+)",
      "Type": "String",
      "Description": "Time the specified statistic is applied. Must be in seconds that is also a multiple of 60.",
      "ConstraintDescription": "Must be a valid integer."
    },
    "IopsVolume2": {
      "Default": "0",
      "Type": "Number",
      "Description": "Iops value required for use with io1 on secondary EBS volumes. This value should be 3 times the secondary EBS volume size"
    },
    "EC2ScaleDownAdjustment": {
      "Default": "1",
      "AllowedPattern": "([0-9]+)",
      "Type": "String",
      "Description": "Number of EC2 instances to scale down by at a time.",
      "ConstraintDescription": "Must be a valid integer."
    },
    "CwLowThreshold": {
      "Default": "30",
      "AllowedPattern": "([0-9]+)",
      "Type": "String",
      "Description": "The value against which the specified statistic is compared.",
      "ConstraintDescription": "Must be a valid integer."
    },
    "AppSubnet": {
      "Type": "List<AWS::EC2::Subnet::Id>",
      "Description": "Subnets for Application"
    },
    "CwLowPeriod": {
      "Default": "300",
      "AllowedPattern": "([0-9]+)",
      "Type": "String",
      "Description": "Time the specified statistic is applied. Must be in seconds that is also a multiple of 60.",
      "ConstraintDescription": "Must be a valid integer."
    },
    "ScalingTermination": {
      "Default": "1",
      "AllowedPattern": "([0-9]+)",
      "Type": "String",
      "Description": "The maximum number of instances that are terminated at a given time.",
      "ConstraintDescription": "Must be a valid integer."
    },
    "KeyName": {
      "ConstraintDescription": "Must be the name of an existing EC2 KeyPair.",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances."
    },
    "APPGroupName": {
      "ConstraintDescription": "Must follow normal syntax conventions.",
      "Type": "String",
      "Description": "EC2 Server Instance Name"
    },
    "PlacementTenancy": {
      "Default": "default",
      "Type": "String",
      "Description": "The placement tenancy for EC2 devices",
      "AllowedValues": [
        "dedicated",
        "default",
        "host"
      ]
    },
    "SnapshotId": {
      "Default": "",
      "Type": "String",
      "Description": "The Snapshot ID to be used to build the 2nd EBS volume. OPTIONAL"
    },
    "BackupsEnabled": {
      "Default": "False",
      "Type": "String",
      "Description": "Value of the 'Backup' tag, used to assign the EBSSnapper configuration."
    },
    "EC2ScaleDownCooldown": {
      "Default": "60",
      "AllowedPattern": "([0-9]+)",
      "Type": "String",
      "Description": "Time in seconds before any further trigger-related scaling can occur.",
      "ConstraintDescription": "Must be a valid integer."
    },
    "InstanceType": {
      "Default": "t2.micro",
      "Type": "String",
      "ConstraintDescription": "Must be a valid EC2 instance type. Default is t2.micro",
      "Description": "Select instance type",
      "AllowedValues": [
        "t2.nano",
        "t2.micro",
        "t2.small",
        "t2.medium",
        "t2.large",
        "t2.xlarge",
        "t2.2xlarge",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10xlarge",
        "m4.16xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge",
        "r4.large",
        "r4.xlarge",
        "r4.2xlarge",
        "r4.4xlarge",
        "r4.8xlarge",
        "r4.16xlarge",
        "x1.16xlarge",
        "x1.32xlarge",
        "i2.xlarge",
        "i2.2xlarge",
        "i2.4xlarge",
        "i2.8xlarge",
        "i3.large",
        "i3.xlarge",
        "i3.2xlarge",
        "i3.4xlarge",
        "i3.8xlarge",
        "i3.16xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "g2.2xlarge",
        "g2.8xlarge",
        "g3.4xlarge",
        "g3.8xlarge",
        "g3.16xlarge",
        "p2.xlarge",
        "p2.8xlarge",
        "p2.16xlarge",
        "d2.xlarge",
        "d2.2xlarge",
        "d2.4xlarge",
        "d2.8xlarge",
        "f1.2xlarge",
        "f1.16xlarge"
      ]
    },
    "ImageId": {
      "Default": "",
      "Type": "String",
      "Description": "The image ID to be used to build the Auto Scale group. OPTIONAL"
    },
    "Ebs2VolumeType": {
      "Default": "gp2",
      "Type": "String",
      "Description": "Select EBS Volume Type.",
      "AllowedValues": [
        "io1",
        "standard",
        "gp2"
      ]
    },
    "TargetGroupARNs": {
      "Default": "",
      "Type": "CommaDelimitedList",
      "Description": "A list of Amazon Resource Names (ARN) of target groups to associate with the Auto Scaling group."
    },
    "EbsVolumeSize": {
      "Default": "60",
      "Type": "String",
      "Description": "Select EBS Volume Size in GB."
    },
    "EC2ScaleUpAdjustment": {
      "Default": "1",
      "AllowedPattern": "([0-9]+)",
      "Type": "String",
      "Description": "Number of EC2 instances to scale up by at a time.",
      "ConstraintDescription": "Must be a valid integer."
    },
    "CwHighThreshold": {
      "Default": "60",
      "AllowedPattern": "([0-9]+)",
      "Type": "String",
      "Description": "The value against which the specified statistic is compared.",
      "ConstraintDescription": "Must be a valid integer."
    },
    "ScalingNotificationTopic": {
      "Default": "",
      "Type": "String",
      "Description": "SNS Topic ARN to notify if there are any scaling operations. OPTIONAL"
    },
    "InstanceRoleManagedPolicyArns": {
      "Default": "",
      "Type": "String",
      "Description": "A comma delimited list of IAM policy ARNs for the InstanceRole IAM role.  IAM ARNs can be found within the Policies section of the AWS IAM console."
    },
    "EC2ScaleUpCooldown": {
      "Default": "60",
      "AllowedPattern": "([0-9]+)",
      "Type": "String",
      "Description": "Time in seconds before any further trigger-related scaling can occur.",
      "ConstraintDescription": "Must be a valid integer."
    },
    "PatchingGroupTag": {
      "Default": "",
      "Type": "String",
      "Description": "Group ID to be used by System Manager for Patching (OPTIONAL)"
    },
    "HealthCheckGracePeriod": {
      "Default": "300",
      "AllowedPattern": "([0-9]+)",
      "Type": "String",
      "Description": "Number of seconds grace during which no autoscaling actions will be taken.",
      "ConstraintDescription": "Must be a valid integer."
    },
    "DesiredCapacity": {
      "Default": "2",
      "AllowedPattern": "([0-9]+)",
      "Type": "String",
      "Description": "Specifies the desired capacity for the Auto Scaling group.",
      "ConstraintDescription": "Must be a valid integer."
    },
    "MinInstancesInService": {
      "Default": "0",
      "Type": "Number",
      "Description": "Specifies the minimum number of instances that must be in service within the Auto Scaling group while AWS CloudFormation updates old instances."
    },
    "SSMInventoryTag": {
      "Default": "True",
      "Type": "String",
      "Description": "Determines whether Instance is tracked via System Manager Inventory.",
      "AllowedValues": [
        "False",
        "True"
      ]
    },
    "TerminatedInstances": {
      "Default": "30",
      "Type": "Number",
      "Description": "Specifies the maximum number of instances that can be terminated in a six hour period without generating a Cloudwatch Alarm."
    },
    "HealthCheckType": {
      "Default": "EC2",
      "Type": "String",
      "Description": "Define the type of healthcheck for the AutoScaling group.",
      "AllowedValues": [
        "EC2",
        "ELB"
      ]
    },
    "CwLowEvaluations": {
      "Default": "3",
      "AllowedPattern": "([0-9]+)",
      "Type": "String",
      "Description": "The number of periods over which data is compared to the specified threshold.",
      "ConstraintDescription": "Must be a valid integer."
    },
    "CwHighEvaluations": {
      "Default": "3",
      "AllowedPattern": "([0-9]+)",
      "Type": "String",
      "Description": "The number of periods over which data is compared to the specified threshold.",
      "ConstraintDescription": "Must be a valid integer."
    },
    "Iops": {
      "Default": "0",
      "Type": "Number",
      "Description": "Iops value required for use with io1 EBS volumes. This value should be 3 times the EBS volume size"
    },
    "DetailedMonitoring": {
      "Default": "True",
      "Type": "String",
      "Description": "Enable Detailed Monitoring.",
      "AllowedValues": [
        "False",
        "True"
      ]
    },
    "EbsVolumeType": {
      "Default": "gp2",
      "Type": "String",
      "Description": "Select EBS Volume Type.",
      "AllowedValues": [
        "io1",
        "standard",
        "gp2"
      ]
    },
    "ScalingMax": {
      "Default": "2",
      "AllowedPattern": "([0-9]+)",
      "Type": "String",
      "Description": "The maximum size of the Auto Scaling group.",
      "ConstraintDescription": "Must be a valid integer."
    },
    "CwHighOperator": {
      "Default": "GreaterThanThreshold",
      "Type": "String",
      "Description": "Math operator used by CloudWatch for alarms and triggers.",
      "AllowedValues": [
        "GreaterThanOrEqualToThreshold",
        "GreaterThanThreshold",
        "LessThanThreshold",
        "LessThanOrEqualToThreshold"
      ]
    },
    "EncryptEBSVolume": {
      "Default": "False",
      "Type": "String",
      "Description": "Specifies whether to encrypt the EBS volume.",
      "AllowedValues": [
        "False",
        "True"
      ]
    }
  },
  "Conditions": {
    "is2ndEBSVolume": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "Ebs2VolumeSize"
            },
            ""
          ]
        }
      ]
    },
    "isEBSEncrypted": {
      "Fn::Equals": [
        {
          "Ref": "EncryptEBSVolume"
        },
        "True"
      ]
    },
    "RackspaceAlarmsEnabled": {
      "Fn::Equals": [
        {
          "Ref": "EnableRackspaceTicket"
        },
        "True"
      ]
    },
    "isMinInstance": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "MinInstancesInService"
            },
            "0"
          ]
        }
      ]
    },
    "InstanceRolePoliciesSet": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "InstanceRoleManagedPolicyArns"
            },
            ""
          ]
        }
      ]
    },
    "IopsEnabled2": {
      "Fn::Equals": [
        {
          "Ref": "Ebs2VolumeType"
        },
        "io1"
      ]
    },
    "IopsEnabled": {
      "Fn::Equals": [
        {
          "Ref": "EbsVolumeType"
        },
        "io1"
      ]
    },
    "DetailedMonitoring": {
      "Fn::Equals": [
        {
          "Ref": "DetailedMonitoring"
        },
        "True"
      ]
    },
    "isSnapshotId": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "SnapshotId"
            },
            ""
          ]
        }
      ]
    },
    "isELBv2": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Fn::Select": [
                "0",
                {
                  "Ref": "TargetGroupARNs"
                }
              ]
            },
            ""
          ]
        }
      ]
    },
    "isImageId": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "ImageId"
            },
            ""
          ]
        }
      ]
    },
    "isELBv1": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Fn::Select": [
                "0",
                {
                  "Ref": "LoadBalancerNames"
                }
              ]
            },
            ""
          ]
        }
      ]
    },
    "isScalingNotification": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "ScalingNotificationTopic"
            },
            ""
          ]
        }
      ]
    }
  },
  "Mappings": {
    "AWSRegionArch2AMI": {
      "us-east-1": {
        "64": "ami-82cfb894"
      },
      "us-west-1": {
        "64": "ami-64d7f104"
      },
      "ap-northeast-2": {
        "64": "ami-03ee336d"
      },
      "ap-northeast-1": {
        "64": "ami-d4d0e2b3"
      },
      "sa-east-1": {
        "64": "ami-d31c73bf"
      },
      "ap-southeast-1": {
        "64": "ami-1429ac77"
      },
      "ca-central-1": {
        "64": "ami-ae7cc0ca"
      },
      "ap-southeast-2": {
        "64": "ami-d5111bb6"
      },
      "us-west-2": {
        "64": "ami-e9503589"
      },
      "us-east-2": {
        "64": "ami-19f8df7c"
      },
      "ap-south-1": {
        "64": "ami-e7097488"
      },
      "eu-central-1": {
        "64": "ami-322af45d"
      },
      "eu-west-1": {
        "64": "ami-051b1563"
      },
      "eu-west-2": {
        "64": "ami-37594e53"
      }
    }
  },
  "Resources": {
    "GroupTerminatingInstances": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "EvaluationPeriods": "1",
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "AutoScaleGrp"
            }
          }
        ],
        "AlarmActions": [
          {
            "Fn::If": [
              "RackspaceAlarmsEnabled",
              {
                "Fn::Sub": "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:rackspace-support-emergency"
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          }
        ],
        "AlarmDescription": {
          "Fn::Sub": "Over ${TerminatedInstances} instances terminated in last 6 hours, generating ticket to investigate."
        },
        "Namespace": "AWS/AutoScaling",
        "Period": "21600",
        "ComparisonOperator": "GreaterThanThreshold",
        "Statistic": "Sum",
        "Threshold": {
          "Ref": "TerminatedInstances"
        },
        "OKActions": [
          {
            "Fn::If": [
              "RackspaceAlarmsEnabled",
              {
                "Fn::Sub": "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:rackspace-support-emergency"
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          }
        ],
        "Unit": "Count",
        "MetricName": "GroupTerminatingInstances"
      }
    },
    "EC2ScaleUpPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "ScalingAdjustment": {
          "Ref": "EC2ScaleUpAdjustment"
        },
        "AutoScalingGroupName": {
          "Ref": "AutoScaleGrp"
        },
        "Cooldown": {
          "Ref": "EC2ScaleUpCooldown"
        },
        "AdjustmentType": "ChangeInCapacity"
      }
    },
    "LaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -xe\n",
                "exec 1> >(logger -s -t $(basename $0)) 2>&1\n",
                "\n",
                "# Helper function\n",
                "function exit_cfn_signal {\n",
                "  exit_status=$?\n",
                "  if [ -e /opt/aws/bin/cfn-signal ]; then\n",
                "    /opt/aws/bin/cfn-signal -e $exit_status --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                " --resource AutoScaleGrp --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "  fi\n",
                "  exit $exit_status\n",
                "}\n",
                "trap exit_cfn_signal TERM EXIT\n",
                "\n",
                "mkdir -p /opt/aws/bin\n",
                "cd /opt/aws\n",
                "curl https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm -o /tmp/epel-release-latest-6.noarch.rpm\n",
                "rpm -qa | grep -q epel-release || yum install -y /tmp/epel-release-latest-6.noarch.rpm\n",
                "yum install -y python-pip python34\n",
                "pip install --upgrade awscli pystache argparse python-daemon requests\n",
                "curl https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz -o /opt/aws/aws-cfn-bootstrap-latest.tar.gz\n",
                "tar -xvpf aws-cfn-bootstrap-latest.tar.gz && cd aws-cfn-bootstrap-*/ && python setup.py build && python setup.py install\n",
                "ln -sf /usr/init/redhat/cfn-hup /etc/init.d/cfn-hup\n",
                "chmod 775 /usr/init/redhat/cfn-hup\n",
                "ln -sf /usr/bin/cfn-hup /opt/aws/bin/cfn-hup\n",
                "ln -sf /usr/bin/cfn-init /opt/aws/bin/cfn-init\n",
                "ln -sf /usr/bin/cfn-signal /opt/aws/bin/cfn-signal\n",
                "ln -sf /usr/bin/cfn-get-metadata /opt/aws/bin/cfn-get-metadata\n",
                "ln -sf /usr/bin/cfn-send-cmd-event /opt/aws/bin/cfn-send-cmd-event\n",
                "ln -sf /usr/bin/cfn-send-cmd-result /opt/aws/bin/cfn-send-cmd-result\n",
                "/opt/aws/bin/cfn-init -v --configsets Init --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                " --resource LaunchConfig --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n"
              ]
            ]
          }
        },
        "InstanceMonitoring": {
          "Ref": "DetailedMonitoring"
        },
        "ImageId": {
          "Fn::If": [
            "isImageId",
            {
              "Ref": "ImageId"
            },
            {
              "Fn::FindInMap": [
                "AWSRegionArch2AMI",
                {
                  "Ref": "AWS::Region"
                },
                "64"
              ]
            }
          ]
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "BlockDeviceMappings": {
          "Fn::If": [
            "is2ndEBSVolume",
            [
              {
                "DeviceName": "/dev/sda1",
                "Ebs": {
                  "DeleteOnTermination": "true",
                  "Iops": {
                    "Fn::If": [
                      "IopsEnabled",
                      {
                        "Ref": "Iops"
                      },
                      {
                        "Ref": "AWS::NoValue"
                      }
                    ]
                  },
                  "VolumeType": {
                    "Ref": "EbsVolumeType"
                  },
                  "VolumeSize": {
                    "Ref": "EbsVolumeSize"
                  }
                }
              },
              {
                "DeviceName": "/dev/sdb",
                "Ebs": {
                  "VolumeSize": {
                    "Ref": "Ebs2VolumeSize"
                  },
                  "Encrypted": {
                    "Fn::If": [
                      "isEBSEncrypted",
                      "true",
                      {
                        "Ref": "AWS::NoValue"
                      }
                    ]
                  },
                  "VolumeType": {
                    "Ref": "Ebs2VolumeType"
                  },
                  "DeleteOnTermination": "true",
                  "SnapshotId": {
                    "Fn::If": [
                      "isSnapshotId",
                      {
                        "Ref": "SnapshotId"
                      },
                      {
                        "Ref": "AWS::NoValue"
                      }
                    ]
                  },
                  "Iops": {
                    "Fn::If": [
                      "IopsEnabled2",
                      {
                        "Ref": "IopsVolume2"
                      },
                      {
                        "Ref": "AWS::NoValue"
                      }
                    ]
                  }
                }
              }
            ],
            [
              {
                "DeviceName": "/dev/sda1",
                "Ebs": {
                  "DeleteOnTermination": "true",
                  "Iops": {
                    "Fn::If": [
                      "IopsEnabled",
                      {
                        "Ref": "Iops"
                      },
                      {
                        "Ref": "AWS::NoValue"
                      }
                    ]
                  },
                  "VolumeType": {
                    "Ref": "EbsVolumeType"
                  },
                  "VolumeSize": {
                    "Ref": "EbsVolumeSize"
                  }
                }
              }
            ]
          ]
        },
        "EbsOptimized": {
          "Ref": "EBSOptimized"
        },
        "SecurityGroups": {
          "Ref": "ASGSecurityGroupList"
        },
        "PlacementTenancy": {
          "Ref": "PlacementTenancy"
        },
        "IamInstanceProfile": {
          "Ref": "InstanceRoleInstanceProfile"
        },
        "InstanceType": {
          "Ref": "InstanceType"
        }
      },
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "cfnConfig": {
            "services": {
              "sysvinit": {
                "cfn-hup": {
                  "files": [
                    "/etc/cfn/cfn-hup.conf",
                    "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                  ],
                  "ensureRunning": "true",
                  "enabled": "true"
                }
              }
            },
            "files": {
              "/etc/cfn/cfn-hup.conf": {
                "owner": "root",
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[main]\n",
                      "stack={{ StackName }}\n",
                      "region={{ Region }}\n",
                      "interval=1\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000400",
                "context": {
                  "StackName": {
                    "Ref": "AWS::StackName"
                  },
                  "Region": {
                    "Ref": "AWS::Region"
                  }
                }
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[cfn-auto-reloader-hook]\n",
                      "triggers=post.update\n",
                      "path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                      "action=/opt/aws/bin/cfn-init -v --configsets Update --stack {{ StackName }} --resource LaunchConfig --region {{ Region }}\n",
                      "runas=root\n"
                    ]
                  ]
                },
                "context": {
                  "StackName": {
                    "Ref": "AWS::StackName"
                  },
                  "Region": {
                    "Ref": "AWS::Region"
                  }
                }
              }
            }
          },
          "diagnosticTools": {
            "packages": {
              "yum": {
                "ltrace": [],
                "strace": [],
                "tcpdump": [],
                "sysstat": [],
                "iotop": [],
                "iptraf-ng": [],
                "lsof": []
              }
            }
          },
          "scaleft": {
            "files": {
              "/etc/logrotate.d/sftd": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "/var/log/sftd.log {\n",
                      "    missingok\n",
                      "    weekly\n",
                      "    copytruncate\n",
                      "    rotate 4\n",
                      "    compress\n",
                      "    postrotate\n",
                      "      service sftd restart\n",
                      "    endscript\n",
                      "}\n"
                    ]
                  ]
                },
                "owner": "root",
                "group": "root",
                "mode": "0644"
              },
              "/root/scaleft_yum.sh": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "n=0\n",
                      "while :\n",
                      "do\n",
                      "  yum install -y -q scaleft-server-tools\n",
                      "  [[ $? = 0 ]] && break || ((n++))\n",
                      "  (( n >= 5 )) && break\n",
                      "done\n"
                    ]
                  ]
                },
                "owner": "root",
                "group": "root",
                "mode": "000400"
              }
            },
            "commands": {
              "7-ClearLogrotateFileBackup": {
                "test": "[ -e /etc/logrotate.d/sftd.bak ]",
                "command": "/bin/rm /etc/logrotate.d/sftd.bak"
              },
              "2-TrustKey": {
                "command": "rpm --import https://dist.scaleft.com/pki/scaleft_rpm_key.asc"
              },
              "3-AddRepo": {
                "test": "[ ! -e /etc/yum.repos.d/scaleft.repo ]",
                "command": "curl -C - https://pkg.scaleft.com/scaleft_yum.repo | tee /etc/yum.repos.d/scaleft.repo"
              },
              "4-InstallScaleFT": {
                "test": "! rpm -qa | grep -q scaleft-server-tools",
                "command": "bash /root/scaleft_yum.sh"
              },
              "1-InitialUrl": {
                "test": "[ ! -e /etc/sft/sftd.yaml ]",
                "command": "mkdir -p /etc/sft && echo -e 'InitialURL: https://scaleft.api.manage.rackspace.com\nLogLevel: WARN' > /etc/sft/sftd.yaml"
              },
              "5-RemoveDisableAutoStartIfExist": {
                "test": "[ -e /etc/sftd/disable-autostart ]",
                "command": "rm /etc/sftd/disable-autostart"
              },
              "6-StartScaleFTService": {
                "test": "! ps aux | grep [s]ftd",
                "command": "service sftd start"
              }
            }
          },
          "mountEBS": {
            "commands": {
              "3-MountVolume": {
                "test": {
                  "Fn::Join": [
                    "",
                    [
                      "[ -n '",
                      {
                        "Ref": "Ebs2MountPoint"
                      },
                      "' ] && ! cat /etc/fstab | grep '",
                      {
                        "Ref": "Ebs2MountPoint"
                      },
                      "' && file -sL ",
                      "/dev/xvdb | grep filesystem\n"
                    ]
                  ]
                },
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "echo \"",
                      "/dev/xvdb ",
                      {
                        "Ref": "Ebs2MountPoint"
                      },
                      "  ext4    defaults    0   0\" >> /etc/fstab \n",
                      "mount -a\n"
                    ]
                  ]
                }
              },
              "4-MountPartitionVolume": {
                "test": {
                  "Fn::Join": [
                    "",
                    [
                      "[ -n '",
                      {
                        "Ref": "Ebs2MountPoint"
                      },
                      "' ] && ! cat /etc/fstab | grep '",
                      {
                        "Ref": "Ebs2MountPoint"
                      },
                      "' && file -sL ",
                      "/dev/xvdb1 | grep filesystem\n"
                    ]
                  ]
                },
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "echo \"",
                      "/dev/xvdb1 ",
                      {
                        "Ref": "Ebs2MountPoint"
                      },
                      "  ext4    defaults,noatime    0   0\" >> /etc/fstab \n",
                      "mount -a\n"
                    ]
                  ]
                }
              },
              "2-MkfsVolume": {
                "test": {
                  "Fn::Join": [
                    "",
                    [
                      "[ -n '",
                      {
                        "Ref": "Ebs2MountPoint"
                      },
                      "' ] && ! file -sL ",
                      "/dev/xvdb | grep -E filesystem && ! fdisk -l ",
                      "/dev/xvdb | grep '",
                      "/dev/xvdb1'\n"
                    ]
                  ]
                },
                "command": "mkfs -t ext4  /dev/xvdb"
              },
              "1-CreateMountPoint": {
                "test": {
                  "Fn::Join": [
                    "",
                    [
                      "[ -n '",
                      {
                        "Ref": "Ebs2MountPoint"
                      },
                      "' ]\n"
                    ]
                  ]
                },
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "mkdir -p ",
                      {
                        "Ref": "Ebs2MountPoint"
                      },
                      "\n"
                    ]
                  ]
                }
              }
            }
          },
          "configSets": {
            "Init": [
              "SSMInstall",
              "SetPermissiveSELinux",
              "cfnConfig",
              "install_Logs",
              "scaleft",
              "diagnosticTools",
              "mountEBS",
              "DisableIpTables"
            ],
            "Update": [
              "cfnConfig",
              "install_Logs"
            ]
          },
          "install_Logs": {
            "files": {
              "/etc/awslogs/awslogs.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[general]\n",
                      "state_file= /var/awslogs/state/agent-state\n",
                      "\n",
                      "[/var/log/cloud-init.log]\n",
                      "file = /var/log/cloud-init.log\n",
                      "log_group_name = ",
                      {
                        "Ref": "CloudFormationLogs"
                      },
                      "\n",
                      "log_stream_name = {instance_id}/cloud-init.log\n",
                      "initial_position = start_of_file\n",
                      "datetime_format =\n",
                      "\n",
                      "[/var/log/cloud-init-output.log]\n",
                      "file = /var/log/cloud-init-output.log\n",
                      "log_group_name = ",
                      {
                        "Ref": "CloudFormationLogs"
                      },
                      "\n",
                      "log_stream_name = {instance_id}/cloud-init-output.log\n",
                      "initial_position = start_of_file\n",
                      "datetime_format =\n",
                      "\n",
                      "[/var/log/cfn-init.log]\n",
                      "file = /var/log/cfn-init.log\n",
                      "log_group_name = ",
                      {
                        "Ref": "CloudFormationLogs"
                      },
                      "\n",
                      "log_stream_name = {instance_id}/cfn-init.log\n",
                      "initial_position = start_of_file\n",
                      "datetime_format =\n",
                      "\n",
                      "[/var/log/cfn-hup.log]\n",
                      "file = /var/log/cfn-hup.log\n",
                      "log_group_name = ",
                      {
                        "Ref": "CloudFormationLogs"
                      },
                      "\n",
                      "log_stream_name = {instance_id}/cfn-hup.log\n",
                      "initial_position = start_of_file\n",
                      "datetime_format =\n",
                      "\n",
                      "[/var/log/cfn-wire.log]\n",
                      "file = /var/log/cfn-wire.log\n",
                      "log_group_name = ",
                      {
                        "Ref": "CloudFormationLogs"
                      },
                      "\n",
                      "log_stream_name = {instance_id}/cfn-wire.log\n",
                      "initial_position = start_of_file\n",
                      "datetime_format =\n",
                      "\n",
                      "[/var/log/httpd/access]\n",
                      "file = /var/log/httpd/access*\n",
                      "log_group_name = ",
                      {
                        "Ref": "ApplicationAccessLogs"
                      },
                      "\n",
                      "log_stream_name = {instance_id}/httpd-access\n",
                      "initial_position = start_of_file\n",
                      "datetime_format = %d/%b/%Y:%H:%M:%S\n",
                      "\n",
                      "[/var/log/httpd/error]\n",
                      "file = /var/log/httpd/error*\n",
                      "log_group_name = ",
                      {
                        "Ref": "ApplicationErrorLogs"
                      },
                      "\n",
                      "log_stream_name = {instance_id}/httpd-error\n",
                      "initial_position = start_of_file\n",
                      "datetime_format = %d/%b/%Y:%H:%M:%S\n"
                    ]
                  ]
                },
                "owner": "root",
                "group": "root",
                "mode": "0444"
              },
              "/etc/awslogs/awscli.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[plugins]\n",
                      "cwlogs = cwlogs\n",
                      "[default]\n",
                      "region = ",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n"
                    ]
                  ]
                },
                "owner": "root",
                "group": "root",
                "mode": "0444"
              }
            },
            "commands": {
              "1-CreateStateDirectory": {
                "test": "if [ ! -d /var/awslogs/state ]; then exit 0 ; else exit 1; fi",
                "command": "mkdir -p /var/awslogs/state"
              },
              "2-CreateConfDirectory": {
                "ignoreErrors": "false",
                "command": "mkdir -p /etc/awslogs"
              },
              "3-Install": {
                "ignoreErrors": "false",
                "command": {
                  "Fn::Sub": "curl https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py -O; chmod +x awslogs-agent-setup.py; python3 ./awslogs-agent-setup.py -n -c /etc/awslogs/awslogs.conf --python /usr/bin/python3 --region ${AWS::Region}"
                }
              }
            }
          },
          "DisableIpTables": {
            "commands": {
              "1-stopIpTables": {
                "test": "service iptables status",
                "command": "service iptables stop"
              },
              "2-DisableIpTables": {
                "test": "test ! -f /bin/systemcl && chkconfig iptables",
                "command": "chkconfig iptables off"
              },
              "4-DisableIp6Tables": {
                "test": "test ! -f /bin/systemctl && chkconfig ip6tables",
                "command": "chkconfig ip6tables off"
              },
              "3-stopIp6tables": {
                "test": "service ip6tables status",
                "command": "service ip6tables stop"
              }
            }
          },
          "SetPermissiveSELinux": {
            "commands": {
              "3-SetSysConfigPermissive": {
                "test": "grep -q 'SELINUX=enforcing' /etc/sysconfig/selinux",
                "command": "sed -i 's/SELINUX=enforcing/SELINUX=permissive/' /etc/sysconfig/selinux"
              },
              "1-SetEnforce": {
                "test": "getenforce | grep -q Enforcing",
                "command": "setenforce 0"
              },
              "2-SetSELinuxConfigPermissive": {
                "test": "grep -q 'SELINUX=enforcing' /etc/selinux/config",
                "command": "sed -i 's/SELINUX=enforcing/SELINUX=permissive/' /etc/selinux/config"
              }
            }
          },
          "SSMInstall": {
            "commands": {
              "2-InstallSSMAgent": {
                "test": "! rpm -qa | grep -q amazon-ssm-agent",
                "command": "yum install -y /opt/aws/amazon-ssm-agent.rpm"
              },
              "3-StartSSMAgentService": {
                "test": "status amazon-ssm-agent | grep -q stop",
                "command": "service amazon-ssm-agent start"
              },
              "1-DownloadSSMAgent": {
                "test": "[ ! -e /opt/aws/amazon-ssm-agent.rpm ]",
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "curl https://amazon-ssm-",
                      {
                        "Ref": "AWS::Region"
                      },
                      ".s3.amazonaws.com/latest/linux_amd64/amazon-ssm-agent.rpm -o /opt/aws/amazon-ssm-agent.rpm\n"
                    ]
                  ]
                }
              }
            }
          },
          "webInstall": {
            "services": {
              "sysvinit": {
                "httpd": {
                  "ensureRunning": "true",
                  "enabled": "true"
                }
              }
            },
            "packages": {
              "yum": {
                "httpd": []
              }
            }
          }
        }
      }
    },
    "InstanceRoleInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "InstanceRole"
          }
        ]
      }
    },
    "InstanceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/",
        "ManagedPolicyArns": {
          "Fn::Split": [
            ",",
            {
              "Fn::Join": [
                ",",
                [
                  "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM",
                  {
                    "Fn::If": [
                      "InstanceRolePoliciesSet",
                      {
                        "Ref": "InstanceRoleManagedPolicyArns"
                      },
                      {
                        "Ref": "AWS::NoValue"
                      }
                    ]
                  }
                ]
              ]
            }
          ]
        },
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": "ec2.amazonaws.com"
              }
            }
          ]
        }
      }
    },
    "AutoScaleGrp": {
      "CreationPolicy": {
        "ResourceSignal": {
          "Count": {
            "Ref": "ScalingMin"
          },
          "Timeout": {
            "Fn::Sub": "PT${ScalingCreateTimeOut}"
          }
        }
      },
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "PauseTime": {
            "Fn::Sub": "PT${ScalingUpdateTimeOut}"
          },
          "WaitOnResourceSignals": "true",
          "SuspendProcesses": [
            "ScheduledActions",
            "ReplaceUnhealthy",
            "AlarmNotification",
            "AZRebalance"
          ],
          "MaxBatchSize": {
            "Ref": "ScalingTermination"
          },
          "MinInstancesInService": {
            "Fn::If": [
              "isMinInstance",
              {
                "Ref": "MinInstancesInService"
              },
              {
                "Ref": "ScalingMin"
              }
            ]
          }
        }
      },
      "Properties": {
        "TargetGroupARNs": {
          "Fn::If": [
            "isELBv2",
            {
              "Ref": "TargetGroupARNs"
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        },
        "DesiredCapacity": {
          "Ref": "DesiredCapacity"
        },
        "NotificationConfigurations": [
          {
            "Fn::If": [
              "isScalingNotification",
              {
                "NotificationTypes": [
                  "autoscaling:EC2_INSTANCE_LAUNCH",
                  "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
                  "autoscaling:EC2_INSTANCE_TERMINATE",
                  "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"
                ],
                "TopicARN": {
                  "Ref": "ScalingNotificationTopic"
                }
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          },
          {
            "NotificationTypes": [
              "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
              "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"
            ],
            "TopicARN": {
              "Fn::Sub": "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:rackspace-support-emergency"
            }
          }
        ],
        "Tags": [
          {
            "PropagateAtLaunch": "true",
            "Value": {
              "Ref": "BackupsEnabled"
            },
            "Key": "Backup"
          },
          {
            "PropagateAtLaunch": "true",
            "Value": {
              "Ref": "Environment"
            },
            "Key": "Environment"
          },
          {
            "PropagateAtLaunch": "true",
            "Value": {
              "Ref": "APPGroupName"
            },
            "Key": "Name"
          },
          {
            "PropagateAtLaunch": "true",
            "Value": {
              "Ref": "PatchingGroupTag"
            },
            "Key": "PatchingGroup"
          },
          {
            "PropagateAtLaunch": "true",
            "Value": {
              "Ref": "SSMInventoryTag"
            },
            "Key": "SSMInventory"
          },
          {
            "PropagateAtLaunch": "true",
            "Value": "Rackspace",
            "Key": "ServiceProvider"
          }
        ],
        "LaunchConfigurationName": {
          "Ref": "LaunchConfig"
        },
        "MinSize": {
          "Ref": "ScalingMin"
        },
        "MaxSize": {
          "Ref": "ScalingMax"
        },
        "VPCZoneIdentifier": {
          "Ref": "AppSubnet"
        },
        "LoadBalancerNames": {
          "Fn::If": [
            "isELBv1",
            {
              "Ref": "LoadBalancerNames"
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        },
        "MetricsCollection": [
          {
            "Granularity": "1Minute"
          }
        ],
        "HealthCheckGracePeriod": {
          "Ref": "HealthCheckGracePeriod"
        },
        "HealthCheckType": {
          "Ref": "HealthCheckType"
        }
      }
    },
    "InstanceRolePolicies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "InstanceRole",
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "cloudformation:Describe*"
              ],
              "Resource": "*",
              "Effect": "Allow"
            },
            {
              "Action": [
                "ssm:CreateAssociation"
              ],
              "Resource": "*",
              "Effect": "Allow"
            },
            {
              "Action": [
                "cloudwatch:PutMetricData",
                "cloudwatch:GetMetricStatistics",
                "cloudwatch:ListMetrics"
              ],
              "Resource": "*",
              "Effect": "Allow"
            },
            {
              "Action": [
                "ec2:DescribeTags"
              ],
              "Resource": "*",
              "Effect": "Allow"
            }
          ]
        },
        "Roles": [
          {
            "Ref": "InstanceRole"
          }
        ]
      }
    },
    "ApplicationErrorLogs": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "RetentionInDays": {
          "Ref": "CWLogRetention"
        }
      }
    },
    "ScaleAlarmHigh": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "EvaluationPeriods": {
          "Ref": "CwHighEvaluations"
        },
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "AutoScaleGrp"
            }
          }
        ],
        "AlarmActions": [
          {
            "Ref": "EC2ScaleUpPolicy"
          }
        ],
        "AlarmDescription": {
          "Fn::Sub": "Scale-up if ${CwScalingMetric} ${CwHighOperator} ${CwHighThreshold}% for ${CwHighPeriod} seconds ${CwHighEvaluations} times."
        },
        "Namespace": "AWS/EC2",
        "Period": {
          "Ref": "CwHighPeriod"
        },
        "ComparisonOperator": {
          "Ref": "CwHighOperator"
        },
        "Statistic": "Average",
        "Threshold": {
          "Ref": "CwHighThreshold"
        },
        "MetricName": {
          "Ref": "CwScalingMetric"
        }
      }
    },
    "EC2ScaleDownPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "ScalingAdjustment": {
          "Fn::Sub": "-${EC2ScaleDownAdjustment}"
        },
        "AutoScalingGroupName": {
          "Ref": "AutoScaleGrp"
        },
        "Cooldown": {
          "Ref": "EC2ScaleDownCooldown"
        },
        "AdjustmentType": "ChangeInCapacity"
      }
    },
    "CloudFormationLogs": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "RetentionInDays": {
          "Ref": "CWLogRetention"
        }
      }
    },
    "ScaleAlarmLow": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "EvaluationPeriods": {
          "Ref": "CwLowEvaluations"
        },
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "AutoScaleGrp"
            }
          }
        ],
        "AlarmActions": [
          {
            "Ref": "EC2ScaleDownPolicy"
          }
        ],
        "AlarmDescription": {
          "Fn::Sub": "Scale-down if ${CwScalingMetric} ${CwLowOperator} ${CwLowThreshold}% for ${CwLowPeriod} seconds ${CwLowEvaluations} times."
        },
        "Namespace": "AWS/EC2",
        "Period": {
          "Ref": "CwLowPeriod"
        },
        "ComparisonOperator": {
          "Ref": "CwLowOperator"
        },
        "Statistic": "Average",
        "Threshold": {
          "Ref": "CwLowThreshold"
        },
        "MetricName": {
          "Ref": "CwScalingMetric"
        }
      }
    },
    "ApplicationAccessLogs": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "RetentionInDays": {
          "Ref": "CWLogRetention"
        }
      }
    }
  },
  "Outputs": {
    "GroupName": {
      "Description": "Autoscale Group Name",
      "Value": {
        "Ref": "AutoScaleGrp"
      }
    }
  }
}